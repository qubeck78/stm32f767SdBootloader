
ParkingMeterBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800bcb0  0800bcb0  0000ccb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c368  0800c368  0000e068  2**0
                  CONTENTS
  4 .ARM          00000008  0800c368  0800c368  0000d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c370  0800c370  0000e068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c370  0800c370  0000d370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c374  0800c374  0000d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800c378  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000068  0800c3e0  0000e068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  0800c3e0  0000e8d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016745  00000000  00000000  0000e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c2e  00000000  00000000  000247db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00028410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7c  00000000  00000000  00029728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bd1b  00000000  00000000  0002a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1d6  00000000  00000000  000562bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbb48  00000000  00000000  00071495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016cfdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ec  00000000  00000000  0016d020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0017250c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bc98 	.word	0x0800bc98

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800bc98 	.word	0x0800bc98

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sdTest>:
extern FIL     SDFile;       /* File object for SD */

void (*programEntry)(void) = (void(*)())0x0;

static void sdTest( void )
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0d4      	sub	sp, #336	@ 0x150
 80005d4:	af00      	add	r7, sp, #0
   FRESULT  res;
   DIR      dir;
   FILINFO  fileInfo;

   res = f_opendir( &dir, "0:" );
 80005d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005da:	4926      	ldr	r1, [pc, #152]	@ (8000674 <sdTest+0xa4>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f009 ff19 	bl	800a414 <f_opendir>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

   if( res != FR_OK )
 80005e8:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <sdTest+0x2e>
   {
      printf( "f_opendir failed: %d\r\n ", res );
 80005f0:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80005f4:	4619      	mov	r1, r3
 80005f6:	4820      	ldr	r0, [pc, #128]	@ (8000678 <sdTest+0xa8>)
 80005f8:	f00a fcf2 	bl	800afe0 <iprintf>
 80005fc:	e036      	b.n	800066c <sdTest+0x9c>
      return;
   }

   printf( "SD Dir:\r\n" );
 80005fe:	481f      	ldr	r0, [pc, #124]	@ (800067c <sdTest+0xac>)
 8000600:	f00a fd5e 	bl	800b0c0 <puts>
   do
   {
      res = f_readdir( &dir, &fileInfo );
 8000604:	463a      	mov	r2, r7
 8000606:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f009 ffe4 	bl	800a5da <f_readdir>
 8000612:	4603      	mov	r3, r0
 8000614:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

      if( ( res != FR_OK ) || ( fileInfo.fname[0] == '\0' ) )
 8000618:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800061c:	2b00      	cmp	r3, #0
 800061e:	d11d      	bne.n	800065c <sdTest+0x8c>
 8000620:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000624:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000628:	7d9b      	ldrb	r3, [r3, #22]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d016      	beq.n	800065c <sdTest+0x8c>
      {
         break;
      }

      if(fileInfo.fattrib & AM_DIR)
 800062e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000632:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000636:	7a1b      	ldrb	r3, [r3, #8]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <sdTest+0x7e>
      {
         printf( "DIR  %s\r\n", fileInfo.fname );
 8000640:	463b      	mov	r3, r7
 8000642:	3316      	adds	r3, #22
 8000644:	4619      	mov	r1, r3
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <sdTest+0xb0>)
 8000648:	f00a fcca 	bl	800afe0 <iprintf>
 800064c:	e7da      	b.n	8000604 <sdTest+0x34>
      }
      else
      {
         printf( "FILE %s\r\n", fileInfo.fname );
 800064e:	463b      	mov	r3, r7
 8000650:	3316      	adds	r3, #22
 8000652:	4619      	mov	r1, r3
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <sdTest+0xb4>)
 8000656:	f00a fcc3 	bl	800afe0 <iprintf>
      res = f_readdir( &dir, &fileInfo );
 800065a:	e7d3      	b.n	8000604 <sdTest+0x34>
      }
   }while( 1 );

   res = f_closedir(&dir);
 800065c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000660:	4618      	mov	r0, r3
 8000662:	f009 ff94 	bl	800a58e <f_closedir>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
}
 800066c:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800bcb0 	.word	0x0800bcb0
 8000678:	0800bcb4 	.word	0x0800bcb4
 800067c:	0800bccc 	.word	0x0800bccc
 8000680:	0800bcd8 	.word	0x0800bcd8
 8000684:	0800bce4 	.word	0x0800bce4

08000688 <checkAndFlashImageFile>:


static uint32_t checkAndFlashImageFile( void )
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b0cc      	sub	sp, #304	@ 0x130
 800068c:	af00      	add	r7, sp, #0
   uint32_t               *fileReadBufL;

   UINT                    bytesRead;
   uint32_t                i;

   const char spinner[] = "-\|/";
 800068e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000692:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000696:	4a67      	ldr	r2, [pc, #412]	@ (8000834 <checkAndFlashImageFile+0x1ac>)
 8000698:	601a      	str	r2, [r3, #0]

   lcdCls();
 800069a:	f000 fbef 	bl	8000e7c <lcdCls>
   lcdRefresh();
 800069e:	f000 fb6d 	bl	8000d7c <lcdRefresh>


   res = f_open( &SDFile, "0:firmware.bin", FA_READ );
 80006a2:	2201      	movs	r2, #1
 80006a4:	4964      	ldr	r1, [pc, #400]	@ (8000838 <checkAndFlashImageFile+0x1b0>)
 80006a6:	4865      	ldr	r0, [pc, #404]	@ (800083c <checkAndFlashImageFile+0x1b4>)
 80006a8:	f009 fa1a 	bl	8009ae0 <f_open>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

   if( res != FR_OK )
 80006b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d004      	beq.n	80006c4 <checkAndFlashImageFile+0x3c>
   {
      printf( "No new firmware file\r\n" );
 80006ba:	4861      	ldr	r0, [pc, #388]	@ (8000840 <checkAndFlashImageFile+0x1b8>)
 80006bc:	f00a fd00 	bl	800b0c0 <puts>

      return 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e0b2      	b.n	800082a <checkAndFlashImageFile+0x1a2>
   }

   printf( "Found new firmware file.\r\n" );
 80006c4:	485f      	ldr	r0, [pc, #380]	@ (8000844 <checkAndFlashImageFile+0x1bc>)
 80006c6:	f00a fcfb 	bl	800b0c0 <puts>

   //todo: check firmware file lrc

   lcdSetBacklight( LCD_BACKLIGHT_GREEN );
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 fba6 	bl	8000e1c <lcdSetBacklight>

   lcdCls();
 80006d0:	f000 fbd4 	bl	8000e7c <lcdCls>
   lcdPrint( "Flash erase:" );
 80006d4:	485c      	ldr	r0, [pc, #368]	@ (8000848 <checkAndFlashImageFile+0x1c0>)
 80006d6:	f000 fca1 	bl	800101c <lcdPrint>
   lcdRefresh();
 80006da:	f000 fb4f 	bl	8000d7c <lcdRefresh>

   //clear flash
   printf( "Flash erase:" );
 80006de:	485a      	ldr	r0, [pc, #360]	@ (8000848 <checkAndFlashImageFile+0x1c0>)
 80006e0:	f00a fc7e 	bl	800afe0 <iprintf>
   fflush( stdout );
 80006e4:	4b59      	ldr	r3, [pc, #356]	@ (800084c <checkAndFlashImageFile+0x1c4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f00a fba2 	bl	800ae34 <fflush>

   //1MB Flash in single bank mode
   flashEraseStruct.TypeErase    = FLASH_TYPEERASE_SECTORS;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   flashEraseStruct.Sector       = 4;                          //0x08020000
 80006f6:	2304      	movs	r3, #4
 80006f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   flashEraseStruct.NbSectors    = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
   flashEraseStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;      //2.7 to 3.6V
 8000702:	2302      	movs	r3, #2
 8000704:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

   HAL_FLASH_Unlock();
 8000708:	f002 fac4 	bl	8002c94 <HAL_FLASH_Unlock>

   errorSector = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

   if( HAL_FLASHEx_Erase( &flashEraseStruct, &errorSector ) != HAL_OK )
 8000712:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000716:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f002 fc1b 	bl	8002f58 <HAL_FLASHEx_Erase>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d017      	beq.n	8000758 <checkAndFlashImageFile+0xd0>
   {
      lcdPrintF( "ERROR@%d\n", (int)errorSector );
 8000728:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800072c:	4619      	mov	r1, r3
 800072e:	4848      	ldr	r0, [pc, #288]	@ (8000850 <checkAndFlashImageFile+0x1c8>)
 8000730:	f000 fc9a 	bl	8001068 <lcdPrintF>
      lcdRefresh();
 8000734:	f000 fb22 	bl	8000d7c <lcdRefresh>

      printf( "ERROR, sector:%d\r\n", (int)errorSector );
 8000738:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800073c:	4619      	mov	r1, r3
 800073e:	4845      	ldr	r0, [pc, #276]	@ (8000854 <checkAndFlashImageFile+0x1cc>)
 8000740:	f00a fc4e 	bl	800afe0 <iprintf>

      f_close( &SDFile );
 8000744:	483d      	ldr	r0, [pc, #244]	@ (800083c <checkAndFlashImageFile+0x1b4>)
 8000746:	f009 fe3b 	bl	800a3c0 <f_close>

      HAL_FLASH_Lock();
 800074a:	f002 fac5 	bl	8002cd8 <HAL_FLASH_Lock>

      //fatal error

      lcdSetBacklight( LCD_BACKLIGHT_RED );
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fb64 	bl	8000e1c <lcdSetBacklight>

      do{}while( 1 );
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <checkAndFlashImageFile+0xcc>
   }


   printf( "done\r\n" );
 8000758:	483f      	ldr	r0, [pc, #252]	@ (8000858 <checkAndFlashImageFile+0x1d0>)
 800075a:	f00a fcb1 	bl	800b0c0 <puts>

   lcdCls();
 800075e:	f000 fb8d 	bl	8000e7c <lcdCls>
   lcdPrint( "Flash write:" );
 8000762:	483e      	ldr	r0, [pc, #248]	@ (800085c <checkAndFlashImageFile+0x1d4>)
 8000764:	f000 fc5a 	bl	800101c <lcdPrint>
   lcdRefresh();
 8000768:	f000 fb08 	bl	8000d7c <lcdRefresh>

   printf( "Flash write:" );
 800076c:	483b      	ldr	r0, [pc, #236]	@ (800085c <checkAndFlashImageFile+0x1d4>)
 800076e:	f00a fc37 	bl	800afe0 <iprintf>

   //user app start
   flashWriteAddress = 0x08020000;
 8000772:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <checkAndFlashImageFile+0x1d8>)
 8000774:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   fileReadBufL      = (uint32_t*)fileReadBufB;
 8000778:	f107 0308 	add.w	r3, r7, #8
 800077c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

   do
   {

      bytesRead = 0;
 8000780:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000784:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
      f_read( &SDFile, (void*)fileReadBufB, 256, &bytesRead );
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	f107 0108 	add.w	r1, r7, #8
 8000792:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000796:	4829      	ldr	r0, [pc, #164]	@ (800083c <checkAndFlashImageFile+0x1b4>)
 8000798:	f009 fc55 	bl	800a046 <f_read>

      printf( "." );
 800079c:	202e      	movs	r0, #46	@ 0x2e
 800079e:	f00a fc31 	bl	800b004 <putchar>
      fflush( stdout );
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <checkAndFlashImageFile+0x1c4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f00a fb43 	bl	800ae34 <fflush>

      for( i = 0; i < 256 / 4; i++ )
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80007b4:	e01a      	b.n	80007ec <checkAndFlashImageFile+0x164>
      {
         //write 32-bit word
         HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, flashWriteAddress, fileReadBufL[i] );
 80007b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80007c0:	4413      	add	r3, r2
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	461c      	mov	r4, r3
 80007c8:	4615      	mov	r5, r2
 80007ca:	4622      	mov	r2, r4
 80007cc:	462b      	mov	r3, r5
 80007ce:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80007d2:	2002      	movs	r0, #2
 80007d4:	f002 fa02 	bl	8002bdc <HAL_FLASH_Program>
         flashWriteAddress += 4;
 80007d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80007dc:	3304      	adds	r3, #4
 80007de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      for( i = 0; i < 256 / 4; i++ )
 80007e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007e6:	3301      	adds	r3, #1
 80007e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80007ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f2:	d9e0      	bls.n	80007b6 <checkAndFlashImageFile+0x12e>
      }

   }while( !f_eof( &SDFile ) );
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <checkAndFlashImageFile+0x1b4>)
 80007f6:	699a      	ldr	r2, [r3, #24]
 80007f8:	4b10      	ldr	r3, [pc, #64]	@ (800083c <checkAndFlashImageFile+0x1b4>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d1bf      	bne.n	8000780 <checkAndFlashImageFile+0xf8>

   lcdPrint( "done\n" );
 8000800:	4818      	ldr	r0, [pc, #96]	@ (8000864 <checkAndFlashImageFile+0x1dc>)
 8000802:	f000 fc0b 	bl	800101c <lcdPrint>
   lcdRefresh();
 8000806:	f000 fab9 	bl	8000d7c <lcdRefresh>

   printf( "done\r\n" );
 800080a:	4813      	ldr	r0, [pc, #76]	@ (8000858 <checkAndFlashImageFile+0x1d0>)
 800080c:	f00a fc58 	bl	800b0c0 <puts>

   HAL_FLASH_Lock();
 8000810:	f002 fa62 	bl	8002cd8 <HAL_FLASH_Lock>

   f_close( &SDFile );
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <checkAndFlashImageFile+0x1b4>)
 8000816:	f009 fdd3 	bl	800a3c0 <f_close>


   f_unlink( "0:firmware.cur" );
 800081a:	4813      	ldr	r0, [pc, #76]	@ (8000868 <checkAndFlashImageFile+0x1e0>)
 800081c:	f009 ff50 	bl	800a6c0 <f_unlink>
   f_rename( "0:firmware.bin", "0:firmware.cur" );
 8000820:	4911      	ldr	r1, [pc, #68]	@ (8000868 <checkAndFlashImageFile+0x1e0>)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <checkAndFlashImageFile+0x1b0>)
 8000824:	f00a f813 	bl	800a84e <f_rename>

   return 0;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000830:	46bd      	mov	sp, r7
 8000832:	bdb0      	pop	{r4, r5, r7, pc}
 8000834:	002f7c2d 	.word	0x002f7c2d
 8000838:	0800bcf0 	.word	0x0800bcf0
 800083c:	20000518 	.word	0x20000518
 8000840:	0800bd00 	.word	0x0800bd00
 8000844:	0800bd18 	.word	0x0800bd18
 8000848:	0800bd34 	.word	0x0800bd34
 800084c:	20000018 	.word	0x20000018
 8000850:	0800bd44 	.word	0x0800bd44
 8000854:	0800bd50 	.word	0x0800bd50
 8000858:	0800bd64 	.word	0x0800bd64
 800085c:	0800bd6c 	.word	0x0800bd6c
 8000860:	08020000 	.word	0x08020000
 8000864:	0800bd7c 	.word	0x0800bd7c
 8000868:	0800bd84 	.word	0x0800bd84

0800086c <bootloaderMain>:

void bootloaderMain()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
   uint32_t initRv;
   FRESULT  res;


   printf( "\r\n######################################################\r\n" );
 8000872:	4830      	ldr	r0, [pc, #192]	@ (8000934 <bootloaderMain+0xc8>)
 8000874:	f00a fc24 	bl	800b0c0 <puts>
   printf( "BOOTLOADER B20241022\r\n\r\n" );
 8000878:	482f      	ldr	r0, [pc, #188]	@ (8000938 <bootloaderMain+0xcc>)
 800087a:	f00a fc21 	bl	800b0c0 <puts>


   printf( "boot delay: " );
 800087e:	482f      	ldr	r0, [pc, #188]	@ (800093c <bootloaderMain+0xd0>)
 8000880:	f00a fbae 	bl	800afe0 <iprintf>
   HAL_Delay( 500 );
 8000884:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000888:	f001 fc54 	bl	8002134 <HAL_Delay>
   printf( "done\r\n" );
 800088c:	482c      	ldr	r0, [pc, #176]	@ (8000940 <bootloaderMain+0xd4>)
 800088e:	f00a fc17 	bl	800b0c0 <puts>

   printf( "SD Card init: " );
 8000892:	482c      	ldr	r0, [pc, #176]	@ (8000944 <bootloaderMain+0xd8>)
 8000894:	f00a fba4 	bl	800afe0 <iprintf>

   initRv = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]

   if( disk_initialize( 0 ) )
 800089c:	2000      	movs	r0, #0
 800089e:	f006 fda9 	bl	80073f4 <disk_initialize>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d007      	beq.n	80008b8 <bootloaderMain+0x4c>
   {
      printf( "error\r\n" );
 80008a8:	4827      	ldr	r0, [pc, #156]	@ (8000948 <bootloaderMain+0xdc>)
 80008aa:	f00a fc09 	bl	800b0c0 <puts>

      initRv |= 1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e002      	b.n	80008be <bootloaderMain+0x52>
   }
   else
   {
      printf( "ok\r\n" );
 80008b8:	4824      	ldr	r0, [pc, #144]	@ (800094c <bootloaderMain+0xe0>)
 80008ba:	f00a fc01 	bl	800b0c0 <puts>
   }

   printf( "SD Card mount:" );
 80008be:	4824      	ldr	r0, [pc, #144]	@ (8000950 <bootloaderMain+0xe4>)
 80008c0:	f00a fb8e 	bl	800afe0 <iprintf>

   res = f_mount( &SDFatFS, "", 0 );
 80008c4:	2200      	movs	r2, #0
 80008c6:	4923      	ldr	r1, [pc, #140]	@ (8000954 <bootloaderMain+0xe8>)
 80008c8:	4823      	ldr	r0, [pc, #140]	@ (8000958 <bootloaderMain+0xec>)
 80008ca:	f009 f8c3 	bl	8009a54 <f_mount>
 80008ce:	4603      	mov	r3, r0
 80008d0:	72fb      	strb	r3, [r7, #11]

   if( res != FR_OK )
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d009      	beq.n	80008ec <bootloaderMain+0x80>
   {
      printf( "failed: %d\r\n ", res );
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4619      	mov	r1, r3
 80008dc:	481f      	ldr	r0, [pc, #124]	@ (800095c <bootloaderMain+0xf0>)
 80008de:	f00a fb7f 	bl	800afe0 <iprintf>

      initRv |= 2;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	e002      	b.n	80008f2 <bootloaderMain+0x86>
   }
   else
   {
      printf( "ok\r\n" );
 80008ec:	4817      	ldr	r0, [pc, #92]	@ (800094c <bootloaderMain+0xe0>)
 80008ee:	f00a fbe7 	bl	800b0c0 <puts>
   }


   sdTest();
 80008f2:	f7ff fe6d 	bl	80005d0 <sdTest>

   checkAndFlashImageFile();
 80008f6:	f7ff fec7 	bl	8000688 <checkAndFlashImageFile>


   //unmount sd card

   f_mount(0, "", 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	4915      	ldr	r1, [pc, #84]	@ (8000954 <bootloaderMain+0xe8>)
 80008fe:	2000      	movs	r0, #0
 8000900:	f009 f8a8 	bl	8009a54 <f_mount>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop

    __disable_irq();

   //move irq vector
   SCB->VTOR = 0x8020000;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <bootloaderMain+0xf4>)
 800090a:	4a16      	ldr	r2, [pc, #88]	@ (8000964 <bootloaderMain+0xf8>)
 800090c:	609a      	str	r2, [r3, #8]

   //read initial pc
   programEntry = (void (*)(void)) *(__IO uint32_t*)0x8020004;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <bootloaderMain+0xfc>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <bootloaderMain+0x100>)
 8000916:	601a      	str	r2, [r3, #0]

   //read and set initial stack
   __set_MSP(*(__IO uint32_t*) 0x8020000);
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <bootloaderMain+0xf8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f383 8808 	msr	MSP, r3
}
 8000924:	bf00      	nop

   //jump to app
   (*programEntry)();
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <bootloaderMain+0x100>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4798      	blx	r3

}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	0800bd94 	.word	0x0800bd94
 8000938:	0800bdd0 	.word	0x0800bdd0
 800093c:	0800bde8 	.word	0x0800bde8
 8000940:	0800bd64 	.word	0x0800bd64
 8000944:	0800bdf8 	.word	0x0800bdf8
 8000948:	0800be08 	.word	0x0800be08
 800094c:	0800be10 	.word	0x0800be10
 8000950:	0800be14 	.word	0x0800be14
 8000954:	0800be24 	.word	0x0800be24
 8000958:	200002e4 	.word	0x200002e4
 800095c:	0800be28 	.word	0x0800be28
 8000960:	e000ed00 	.word	0xe000ed00
 8000964:	08020000 	.word	0x08020000
 8000968:	08020004 	.word	0x08020004
 800096c:	20000084 	.word	0x20000084

08000970 <lcdSetRS>:
   };

#define LCD_BUS_DELAY_CYCLES 400

static void lcdSetRS( uint8_t on )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
   if( on )
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <lcdSetRS+0x1c>
   {
      HAL_GPIO_WritePin( LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET );
 8000980:	2201      	movs	r2, #1
 8000982:	2108      	movs	r1, #8
 8000984:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <lcdSetRS+0x30>)
 8000986:	f002 fd91 	bl	80034ac <HAL_GPIO_WritePin>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET );
   }
}
 800098a:	e004      	b.n	8000996 <lcdSetRS+0x26>
      HAL_GPIO_WritePin( LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET );
 800098c:	2200      	movs	r2, #0
 800098e:	2108      	movs	r1, #8
 8000990:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <lcdSetRS+0x30>)
 8000992:	f002 fd8b 	bl	80034ac <HAL_GPIO_WritePin>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <lcdSetRWn>:

static void lcdSetRWn( uint8_t on )
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
   if( on )
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <lcdSetRWn+0x1c>
   {
      HAL_GPIO_WritePin( LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET );
 80009b4:	2201      	movs	r2, #1
 80009b6:	2101      	movs	r1, #1
 80009b8:	4806      	ldr	r0, [pc, #24]	@ (80009d4 <lcdSetRWn+0x30>)
 80009ba:	f002 fd77 	bl	80034ac <HAL_GPIO_WritePin>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET );
   }
}
 80009be:	e004      	b.n	80009ca <lcdSetRWn+0x26>
      HAL_GPIO_WritePin( LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET );
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <lcdSetRWn+0x30>)
 80009c6:	f002 fd71 	bl	80034ac <HAL_GPIO_WritePin>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <lcdSetE>:

static void lcdSetE( uint8_t on )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
   if( on )
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d005      	beq.n	80009f4 <lcdSetE+0x1c>
   {
      HAL_GPIO_WritePin( LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET );
 80009e8:	2201      	movs	r2, #1
 80009ea:	2102      	movs	r1, #2
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <lcdSetE+0x30>)
 80009ee:	f002 fd5d 	bl	80034ac <HAL_GPIO_WritePin>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET );
   }
}
 80009f2:	e004      	b.n	80009fe <lcdSetE+0x26>
      HAL_GPIO_WritePin( LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET );
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <lcdSetE+0x30>)
 80009fa:	f002 fd57 	bl	80034ac <HAL_GPIO_WritePin>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <lcdSetDOut>:

static void lcdSetDOut( uint8_t dataOut )
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
   if( dataOut & 1 )
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d005      	beq.n	8000a2c <lcdSetDOut+0x20>
   {
      HAL_GPIO_WritePin( LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET );
 8000a20:	2201      	movs	r2, #1
 8000a22:	2108      	movs	r1, #8
 8000a24:	4842      	ldr	r0, [pc, #264]	@ (8000b30 <lcdSetDOut+0x124>)
 8000a26:	f002 fd41 	bl	80034ac <HAL_GPIO_WritePin>
 8000a2a:	e004      	b.n	8000a36 <lcdSetDOut+0x2a>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET );
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2108      	movs	r1, #8
 8000a30:	483f      	ldr	r0, [pc, #252]	@ (8000b30 <lcdSetDOut+0x124>)
 8000a32:	f002 fd3b 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 2 )
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <lcdSetDOut+0x40>
   {
      HAL_GPIO_WritePin( LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET );
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	483a      	ldr	r0, [pc, #232]	@ (8000b30 <lcdSetDOut+0x124>)
 8000a46:	f002 fd31 	bl	80034ac <HAL_GPIO_WritePin>
 8000a4a:	e004      	b.n	8000a56 <lcdSetDOut+0x4a>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET );
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4837      	ldr	r0, [pc, #220]	@ (8000b30 <lcdSetDOut+0x124>)
 8000a52:	f002 fd2b 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 4 )
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d005      	beq.n	8000a6c <lcdSetDOut+0x60>
   {
      HAL_GPIO_WritePin( LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET );
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	4832      	ldr	r0, [pc, #200]	@ (8000b30 <lcdSetDOut+0x124>)
 8000a66:	f002 fd21 	bl	80034ac <HAL_GPIO_WritePin>
 8000a6a:	e004      	b.n	8000a76 <lcdSetDOut+0x6a>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET );
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2120      	movs	r1, #32
 8000a70:	482f      	ldr	r0, [pc, #188]	@ (8000b30 <lcdSetDOut+0x124>)
 8000a72:	f002 fd1b 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 8 )
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 0308 	and.w	r3, r3, #8
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <lcdSetDOut+0x82>
   {
      HAL_GPIO_WritePin( LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET );
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a86:	482b      	ldr	r0, [pc, #172]	@ (8000b34 <lcdSetDOut+0x128>)
 8000a88:	f002 fd10 	bl	80034ac <HAL_GPIO_WritePin>
 8000a8c:	e005      	b.n	8000a9a <lcdSetDOut+0x8e>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET );
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a94:	4827      	ldr	r0, [pc, #156]	@ (8000b34 <lcdSetDOut+0x128>)
 8000a96:	f002 fd09 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 16 )
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <lcdSetDOut+0xa6>
   {
      HAL_GPIO_WritePin( LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET );
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aaa:	4822      	ldr	r0, [pc, #136]	@ (8000b34 <lcdSetDOut+0x128>)
 8000aac:	f002 fcfe 	bl	80034ac <HAL_GPIO_WritePin>
 8000ab0:	e005      	b.n	8000abe <lcdSetDOut+0xb2>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET );
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab8:	481e      	ldr	r0, [pc, #120]	@ (8000b34 <lcdSetDOut+0x128>)
 8000aba:	f002 fcf7 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 32 )
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 0320 	and.w	r3, r3, #32
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <lcdSetDOut+0xca>
   {
      HAL_GPIO_WritePin( LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET );
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ace:	4819      	ldr	r0, [pc, #100]	@ (8000b34 <lcdSetDOut+0x128>)
 8000ad0:	f002 fcec 	bl	80034ac <HAL_GPIO_WritePin>
 8000ad4:	e005      	b.n	8000ae2 <lcdSetDOut+0xd6>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET );
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000adc:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <lcdSetDOut+0x128>)
 8000ade:	f002 fce5 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 64 )
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <lcdSetDOut+0xee>
   {
      HAL_GPIO_WritePin( LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET );
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000af2:	4810      	ldr	r0, [pc, #64]	@ (8000b34 <lcdSetDOut+0x128>)
 8000af4:	f002 fcda 	bl	80034ac <HAL_GPIO_WritePin>
 8000af8:	e005      	b.n	8000b06 <lcdSetDOut+0xfa>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET );
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <lcdSetDOut+0x128>)
 8000b02:	f002 fcd3 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( dataOut & 128 )
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	da06      	bge.n	8000b1c <lcdSetDOut+0x110>
   {
      HAL_GPIO_WritePin( LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET );
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b14:	4808      	ldr	r0, [pc, #32]	@ (8000b38 <lcdSetDOut+0x12c>)
 8000b16:	f002 fcc9 	bl	80034ac <HAL_GPIO_WritePin>
   else
   {
      HAL_GPIO_WritePin( LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET );
   }

}
 8000b1a:	e005      	b.n	8000b28 <lcdSetDOut+0x11c>
      HAL_GPIO_WritePin( LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET );
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <lcdSetDOut+0x12c>)
 8000b24:	f002 fcc2 	bl	80034ac <HAL_GPIO_WritePin>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40022400 	.word	0x40022400
 8000b38:	40021800 	.word	0x40021800

08000b3c <lcdSendCmd>:

static void lcdSendCmd( uint8_t command )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
   volatile uint32_t j;

   lcdSetE( 0 );
 8000b46:	2000      	movs	r0, #0
 8000b48:	f7ff ff46 	bl	80009d8 <lcdSetE>

   lcdSetRS( 0 );
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ff0f 	bl	8000970 <lcdSetRS>
   lcdSetRWn( 0 );
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff ff26 	bl	80009a4 <lcdSetRWn>

   lcdSetDOut( command );
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff56 	bl	8000a0c <lcdSetDOut>

   for( j = 0; j < LCD_BUS_DELAY_CYCLES; j++ )
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e002      	b.n	8000b6c <lcdSendCmd+0x30>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000b72:	d3f8      	bcc.n	8000b66 <lcdSendCmd+0x2a>
      ;

   lcdSetE( 1 );
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff ff2f 	bl	80009d8 <lcdSetE>

   for( j = 0; j < LCD_BUS_DELAY_CYCLES; j++ )
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	e002      	b.n	8000b86 <lcdSendCmd+0x4a>
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000b8c:	d3f8      	bcc.n	8000b80 <lcdSendCmd+0x44>
      ;

   lcdSetE( 0 );
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff ff22 	bl	80009d8 <lcdSetE>

   for( j = 0; j < LCD_BUS_DELAY_CYCLES; j++ )
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e002      	b.n	8000ba0 <lcdSendCmd+0x64>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000ba6:	d3f8      	bcc.n	8000b9a <lcdSendCmd+0x5e>
      ;

}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <lcdWriteData>:

static void lcdWriteData( uint8_t command )
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
   volatile uint32_t j;

   lcdSetE( 0 );
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ff0b 	bl	80009d8 <lcdSetE>

   lcdSetRS( 1 );
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fed4 	bl	8000970 <lcdSetRS>
   lcdSetRWn( 0 );
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff feeb 	bl	80009a4 <lcdSetRWn>

   lcdSetDOut( command );
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff1b 	bl	8000a0c <lcdSetDOut>

   for( j = 0; j < LCD_BUS_DELAY_CYCLES; j++ )
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e002      	b.n	8000be2 <lcdWriteData+0x30>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000be8:	d3f8      	bcc.n	8000bdc <lcdWriteData+0x2a>
      ;

   lcdSetE( 1 );
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff fef4 	bl	80009d8 <lcdSetE>

   for( j = 0; j < LCD_BUS_DELAY_CYCLES; j++ )
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e002      	b.n	8000bfc <lcdWriteData+0x4a>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000c02:	d3f8      	bcc.n	8000bf6 <lcdWriteData+0x44>
      ;

   lcdSetE( 0 );
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fee7 	bl	80009d8 <lcdSetE>

   for( j = 0; j < LCD_BUS_DELAY_CYCLES; j++ )
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e002      	b.n	8000c16 <lcdWriteData+0x64>
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000c1c:	d3f8      	bcc.n	8000c10 <lcdWriteData+0x5e>
      ;

}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <lcdInit>:

uint32_t lcdInit()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

   //https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html

   lcdSetBacklight( LCD_BACKLIGHT_OFF );
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f000 f8f5 	bl	8000e1c <lcdSetBacklight>

   lcdSetRWn( 0 );
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff feb6 	bl	80009a4 <lcdSetRWn>

   lcdSetE( 0 );
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fecd 	bl	80009d8 <lcdSetE>
   lcdSetRS( 0 );
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fe96 	bl	8000970 <lcdSetRS>

   HAL_Delay( 100 );
 8000c44:	2064      	movs	r0, #100	@ 0x64
 8000c46:	f001 fa75 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x30 );
 8000c4a:	2030      	movs	r0, #48	@ 0x30
 8000c4c:	f7ff ff76 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 100 );
 8000c50:	2064      	movs	r0, #100	@ 0x64
 8000c52:	f001 fa6f 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x30 );
 8000c56:	2030      	movs	r0, #48	@ 0x30
 8000c58:	f7ff ff70 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f001 fa69 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x38 );
 8000c62:	2038      	movs	r0, #56	@ 0x38
 8000c64:	f7ff ff6a 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000c68:	200a      	movs	r0, #10
 8000c6a:	f001 fa63 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x08 );
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f7ff ff64 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000c74:	200a      	movs	r0, #10
 8000c76:	f001 fa5d 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x01 );
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff ff5e 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000c80:	200a      	movs	r0, #10
 8000c82:	f001 fa57 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x06 );
 8000c86:	2006      	movs	r0, #6
 8000c88:	f7ff ff58 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000c8c:	200a      	movs	r0, #10
 8000c8e:	f001 fa51 	bl	8002134 <HAL_Delay>

   lcdSendCmd( 0x0c );
 8000c92:	200c      	movs	r0, #12
 8000c94:	f7ff ff52 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f001 fa4b 	bl	8002134 <HAL_Delay>


   lcdDefineChar( 1, (uint8_t *)charCheckmark );
 8000c9e:	4913      	ldr	r1, [pc, #76]	@ (8000cec <lcdInit+0xc4>)
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 f833 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 2, (uint8_t *)charA );
 8000ca6:	4912      	ldr	r1, [pc, #72]	@ (8000cf0 <lcdInit+0xc8>)
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f000 f82f 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 3, (uint8_t *)charC );
 8000cae:	4911      	ldr	r1, [pc, #68]	@ (8000cf4 <lcdInit+0xcc>)
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f82b 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 4, (uint8_t *)charE );
 8000cb6:	4910      	ldr	r1, [pc, #64]	@ (8000cf8 <lcdInit+0xd0>)
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f000 f827 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 5, (uint8_t *)charO );
 8000cbe:	490f      	ldr	r1, [pc, #60]	@ (8000cfc <lcdInit+0xd4>)
 8000cc0:	2005      	movs	r0, #5
 8000cc2:	f000 f823 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 6, (uint8_t *)charL );
 8000cc6:	490e      	ldr	r1, [pc, #56]	@ (8000d00 <lcdInit+0xd8>)
 8000cc8:	2006      	movs	r0, #6
 8000cca:	f000 f81f 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 7, (uint8_t *)charS );
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <lcdInit+0xdc>)
 8000cd0:	2007      	movs	r0, #7
 8000cd2:	f000 f81b 	bl	8000d0c <lcdDefineChar>
   lcdDefineChar( 0, (uint8_t *)charN );
 8000cd6:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <lcdInit+0xe0>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f817 	bl	8000d0c <lcdDefineChar>

   lcdCls();
 8000cde:	f000 f8cd 	bl	8000e7c <lcdCls>
   lcdRefresh();
 8000ce2:	f000 f84b 	bl	8000d7c <lcdRefresh>

   return RV_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	0800be80 	.word	0x0800be80
 8000cf0:	0800be88 	.word	0x0800be88
 8000cf4:	0800be90 	.word	0x0800be90
 8000cf8:	0800be98 	.word	0x0800be98
 8000cfc:	0800bea0 	.word	0x0800bea0
 8000d00:	0800bea8 	.word	0x0800bea8
 8000d04:	0800beb0 	.word	0x0800beb0
 8000d08:	0800beb8 	.word	0x0800beb8

08000d0c <lcdDefineChar>:

uint32_t lcdDefineChar( uint32_t charNo, uint8_t *charDataArray )
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
   uint32_t i;

   if( charNo > 7 )
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b07      	cmp	r3, #7
 8000d1a:	d901      	bls.n	8000d20 <lcdDefineChar+0x14>
   {
      return RV_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e028      	b.n	8000d72 <lcdDefineChar+0x66>
   }

   if( charDataArray == NULL )
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <lcdDefineChar+0x1e>
   {
      return RV_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e023      	b.n	8000d72 <lcdDefineChar+0x66>
   }

   //set cgram address

   lcdSendCmd( charNo << 3 | 64 );
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff feff 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f001 f9f8 	bl	8002134 <HAL_Delay>

   for( i = 0; i < 8; i++ )
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e009      	b.n	8000d5e <lcdDefineChar+0x52>
   {
      lcdWriteData( charDataArray[i] );
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff2d 	bl	8000bb2 <lcdWriteData>
   for( i = 0; i < 8; i++ )
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9f2      	bls.n	8000d4a <lcdDefineChar+0x3e>

   }

   //set ddram address

   lcdSendCmd( 0x80 );
 8000d64:	2080      	movs	r0, #128	@ 0x80
 8000d66:	f7ff fee9 	bl	8000b3c <lcdSendCmd>

   HAL_Delay( 10 );
 8000d6a:	200a      	movs	r0, #10
 8000d6c:	f001 f9e2 	bl	8002134 <HAL_Delay>

   return RV_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <lcdRefresh>:

uint32_t lcdRefresh()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

   uint32_t i;

   //home cursor
   lcdSendCmd( 0x02 );
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff feda 	bl	8000b3c <lcdSendCmd>
   HAL_Delay( 1 );
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f001 f9d3 	bl	8002134 <HAL_Delay>

   //0
   for( i = 0; i < 20; i++ )
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	e009      	b.n	8000da8 <lcdRefresh+0x2c>
   {
      lcdWriteData( lcdFrameBuffer[i] );
 8000d94:	4a20      	ldr	r2, [pc, #128]	@ (8000e18 <lcdRefresh+0x9c>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff08 	bl	8000bb2 <lcdWriteData>
   for( i = 0; i < 20; i++ )
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3301      	adds	r3, #1
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b13      	cmp	r3, #19
 8000dac:	d9f2      	bls.n	8000d94 <lcdRefresh+0x18>
   }

   //2
   for( i = 0; i < 20; i++ )
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	e009      	b.n	8000dc8 <lcdRefresh+0x4c>
   {
      lcdWriteData( lcdFrameBuffer[40 + i] );
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3328      	adds	r3, #40	@ 0x28
 8000db8:	4a17      	ldr	r2, [pc, #92]	@ (8000e18 <lcdRefresh+0x9c>)
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fef8 	bl	8000bb2 <lcdWriteData>
   for( i = 0; i < 20; i++ )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b13      	cmp	r3, #19
 8000dcc:	d9f2      	bls.n	8000db4 <lcdRefresh+0x38>
   }

   //1
   for( i = 0; i < 20; i++ )
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e009      	b.n	8000de8 <lcdRefresh+0x6c>
   {
      lcdWriteData( lcdFrameBuffer[20 + i] );
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3314      	adds	r3, #20
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8000e18 <lcdRefresh+0x9c>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fee8 	bl	8000bb2 <lcdWriteData>
   for( i = 0; i < 20; i++ )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3301      	adds	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b13      	cmp	r3, #19
 8000dec:	d9f2      	bls.n	8000dd4 <lcdRefresh+0x58>
   }

   //3
   for( i = 0; i < 20; i++ )
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e009      	b.n	8000e08 <lcdRefresh+0x8c>
   {
      lcdWriteData( lcdFrameBuffer[60 + i] );
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	333c      	adds	r3, #60	@ 0x3c
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <lcdRefresh+0x9c>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fed8 	bl	8000bb2 <lcdWriteData>
   for( i = 0; i < 20; i++ )
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3301      	adds	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b13      	cmp	r3, #19
 8000e0c:	d9f2      	bls.n	8000df4 <lcdRefresh+0x78>
   }

   return RV_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000088 	.word	0x20000088

08000e1c <lcdSetBacklight>:

uint32_t lcdSetBacklight( uint32_t backlightMode )
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

   if( backlightMode & LCD_BACKLIGHT_RED )
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <lcdSetBacklight+0x20>
   {
      HAL_GPIO_WritePin( LCD_BL_R_GPIO_Port, LCD_BL_R_Pin, GPIO_PIN_SET );
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e34:	480f      	ldr	r0, [pc, #60]	@ (8000e74 <lcdSetBacklight+0x58>)
 8000e36:	f002 fb39 	bl	80034ac <HAL_GPIO_WritePin>
 8000e3a:	e005      	b.n	8000e48 <lcdSetBacklight+0x2c>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_BL_R_GPIO_Port, LCD_BL_R_Pin, GPIO_PIN_RESET );
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e42:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <lcdSetBacklight+0x58>)
 8000e44:	f002 fb32 	bl	80034ac <HAL_GPIO_WritePin>
   }

   if( backlightMode & LCD_BACKLIGHT_GREEN )
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <lcdSetBacklight+0x42>
   {
      HAL_GPIO_WritePin( LCD_BL_G_GPIO_Port, LCD_BL_G_Pin, GPIO_PIN_SET );
 8000e52:	2201      	movs	r2, #1
 8000e54:	2108      	movs	r1, #8
 8000e56:	4808      	ldr	r0, [pc, #32]	@ (8000e78 <lcdSetBacklight+0x5c>)
 8000e58:	f002 fb28 	bl	80034ac <HAL_GPIO_WritePin>
 8000e5c:	e004      	b.n	8000e68 <lcdSetBacklight+0x4c>
   }
   else
   {
      HAL_GPIO_WritePin( LCD_BL_G_GPIO_Port, LCD_BL_G_Pin, GPIO_PIN_RESET );
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2108      	movs	r1, #8
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <lcdSetBacklight+0x5c>)
 8000e64:	f002 fb22 	bl	80034ac <HAL_GPIO_WritePin>
   }

   return RV_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021800 	.word	0x40021800
 8000e78:	40022800 	.word	0x40022800

08000e7c <lcdCls>:

uint32_t lcdCls()
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
   uint32_t i;

   for( i = 0; i < sizeof( lcdFrameBuffer ); i++ )
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	e007      	b.n	8000e98 <lcdCls+0x1c>
   {
      lcdFrameBuffer[i] = 32;
 8000e88:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb8 <lcdCls+0x3c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	2220      	movs	r2, #32
 8000e90:	701a      	strb	r2, [r3, #0]
   for( i = 0; i < sizeof( lcdFrameBuffer ); i++ )
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b4f      	cmp	r3, #79	@ 0x4f
 8000e9c:	d9f4      	bls.n	8000e88 <lcdCls+0xc>
   }

   lcdCursX = 0;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <lcdCls+0x40>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
   lcdCursY = 0;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <lcdCls+0x44>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]

   return RV_OK;
 8000eaa:	2300      	movs	r3, #0

}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000088 	.word	0x20000088
 8000ebc:	200000d8 	.word	0x200000d8
 8000ec0:	200000d9 	.word	0x200000d9

08000ec4 <lcdPutChar>:

   return RV_OK;
}

uint32_t lcdPutChar( char c )
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]

   //CP1250
   switch( c )
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2ba9      	cmp	r3, #169	@ 0xa9
 8000ed2:	dc4f      	bgt.n	8000f74 <lcdPutChar+0xb0>
 8000ed4:	2b86      	cmp	r3, #134	@ 0x86
 8000ed6:	db65      	blt.n	8000fa4 <lcdPutChar+0xe0>
 8000ed8:	3b86      	subs	r3, #134	@ 0x86
 8000eda:	2b23      	cmp	r3, #35	@ 0x23
 8000edc:	d862      	bhi.n	8000fa4 <lcdPutChar+0xe0>
 8000ede:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee4 <lcdPutChar+0x20>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000f81 	.word	0x08000f81
 8000ee8:	08000fa5 	.word	0x08000fa5
 8000eec:	08000f93 	.word	0x08000f93
 8000ef0:	08000fa5 	.word	0x08000fa5
 8000ef4:	08000fa5 	.word	0x08000fa5
 8000ef8:	08000fa5 	.word	0x08000fa5
 8000efc:	08000fa5 	.word	0x08000fa5
 8000f00:	08000fa5 	.word	0x08000fa5
 8000f04:	08000fa5 	.word	0x08000fa5
 8000f08:	08000fa5 	.word	0x08000fa5
 8000f0c:	08000fa5 	.word	0x08000fa5
 8000f10:	08000fa5 	.word	0x08000fa5
 8000f14:	08000fa5 	.word	0x08000fa5
 8000f18:	08000fa5 	.word	0x08000fa5
 8000f1c:	08000fa5 	.word	0x08000fa5
 8000f20:	08000fa5 	.word	0x08000fa5
 8000f24:	08000fa5 	.word	0x08000fa5
 8000f28:	08000fa5 	.word	0x08000fa5
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000fa5 	.word	0x08000fa5
 8000f34:	08000fa5 	.word	0x08000fa5
 8000f38:	08000fa5 	.word	0x08000fa5
 8000f3c:	08000fa5 	.word	0x08000fa5
 8000f40:	08000fa5 	.word	0x08000fa5
 8000f44:	08000fa5 	.word	0x08000fa5
 8000f48:	08000fa5 	.word	0x08000fa5
 8000f4c:	08000fa5 	.word	0x08000fa5
 8000f50:	08000fa5 	.word	0x08000fa5
 8000f54:	08000f8d 	.word	0x08000f8d
 8000f58:	08000fa5 	.word	0x08000fa5
 8000f5c:	08000fa5 	.word	0x08000fa5
 8000f60:	08000f7b 	.word	0x08000f7b
 8000f64:	08000fa5 	.word	0x08000fa5
 8000f68:	08000fa5 	.word	0x08000fa5
 8000f6c:	08000fa5 	.word	0x08000fa5
 8000f70:	08000f87 	.word	0x08000f87
 8000f74:	2be4      	cmp	r3, #228	@ 0xe4
 8000f76:	d00f      	beq.n	8000f98 <lcdPutChar+0xd4>
 8000f78:	e014      	b.n	8000fa4 <lcdPutChar+0xe0>
   {
      case 0xa5:     //ą
         c = 0x02;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	71fb      	strb	r3, [r7, #7]
         break;
 8000f7e:	e011      	b.n	8000fa4 <lcdPutChar+0xe0>

      case 0x86:     //ć
         c = 0x03;
 8000f80:	2303      	movs	r3, #3
 8000f82:	71fb      	strb	r3, [r7, #7]
         break;
 8000f84:	e00e      	b.n	8000fa4 <lcdPutChar+0xe0>

      case 0xa9:     //ę
         c = 0x04;
 8000f86:	2304      	movs	r3, #4
 8000f88:	71fb      	strb	r3, [r7, #7]
         break;
 8000f8a:	e00b      	b.n	8000fa4 <lcdPutChar+0xe0>

      case 0xa2:     //ó
         c = 0x05;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	71fb      	strb	r3, [r7, #7]
         break;
 8000f90:	e008      	b.n	8000fa4 <lcdPutChar+0xe0>

      case 0x88:     //ł
         c = 0x06;
 8000f92:	2306      	movs	r3, #6
 8000f94:	71fb      	strb	r3, [r7, #7]
         break;
 8000f96:	e005      	b.n	8000fa4 <lcdPutChar+0xe0>

      case 0xe4:     //ń
         c = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
         break;
 8000f9c:	e002      	b.n	8000fa4 <lcdPutChar+0xe0>

      case 0x98:     //ś
         c = 0x07;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	71fb      	strb	r3, [r7, #7]
         break;
 8000fa2:	bf00      	nop

   }

   if( c != 10 )
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b0a      	cmp	r3, #10
 8000fa8:	d014      	beq.n	8000fd4 <lcdPutChar+0x110>
   {
      lcdFrameBuffer[lcdCursX + 20 * lcdCursY] = c;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <lcdPutChar+0x14c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <lcdPutChar+0x150>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	4915      	ldr	r1, [pc, #84]	@ (8001018 <lcdPutChar+0x154>)
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	54ca      	strb	r2, [r1, r3]

      lcdCursX++;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <lcdPutChar+0x14c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <lcdPutChar+0x14c>)
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e002      	b.n	8000fda <lcdPutChar+0x116>
   }
   else
   {
      //new line, force by increasing x cursor pos out of bounds
      lcdCursX = 20;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <lcdPutChar+0x14c>)
 8000fd6:	2214      	movs	r2, #20
 8000fd8:	701a      	strb	r2, [r3, #0]
   }

   if( lcdCursX > 19 )
 8000fda:	4b0d      	ldr	r3, [pc, #52]	@ (8001010 <lcdPutChar+0x14c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b13      	cmp	r3, #19
 8000fe0:	d90f      	bls.n	8001002 <lcdPutChar+0x13e>
   {
      lcdCursX = 0;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <lcdPutChar+0x14c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]

      lcdCursY++;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <lcdPutChar+0x150>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <lcdPutChar+0x150>)
 8000ff2:	701a      	strb	r2, [r3, #0]

      if( lcdCursY > 3 )
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <lcdPutChar+0x150>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d902      	bls.n	8001002 <lcdPutChar+0x13e>
      {
         lcdCursY = 0;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <lcdPutChar+0x150>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
      }
   }

   return RV_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	200000d8 	.word	0x200000d8
 8001014:	200000d9 	.word	0x200000d9
 8001018:	20000088 	.word	0x20000088

0800101c <lcdPrint>:

uint32_t lcdPrint( char *str )
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
   uint32_t i;
   char c;

   if( str == NULL )
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <lcdPrint+0x12>
   {
      return 1;
 800102a:	2301      	movs	r3, #1
 800102c:	e017      	b.n	800105e <lcdPrint+0x42>
   }

   for( i = 0; i < 20 * 4; i++ )
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e00e      	b.n	8001052 <lcdPrint+0x36>
   {
      c = *str++;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	72fb      	strb	r3, [r7, #11]
      if( c == 0 )
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00a      	beq.n	800105a <lcdPrint+0x3e>
      {
         break;
      }
      else
      {
         lcdPutChar( c );
 8001044:	7afb      	ldrb	r3, [r7, #11]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff3c 	bl	8000ec4 <lcdPutChar>
   for( i = 0; i < 20 * 4; i++ )
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b4f      	cmp	r3, #79	@ 0x4f
 8001056:	d9ed      	bls.n	8001034 <lcdPrint+0x18>
 8001058:	e000      	b.n	800105c <lcdPrint+0x40>
         break;
 800105a:	bf00      	nop
      }
   }

   return RV_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <lcdPrintF>:

uint32_t lcdPrintF( char *format, ... )
{
 8001068:	b40f      	push	{r0, r1, r2, r3}
 800106a:	b580      	push	{r7, lr}
 800106c:	b08e      	sub	sp, #56	@ 0x38
 800106e:	af00      	add	r7, sp, #0
   uint8_t   c;
   uint8_t   d;
   uint32_t  i;
   uint32_t  j;

   va_start( arp, format );
 8001070:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001074:	617b      	str	r3, [r7, #20]

   for( ;; )
   {

      c = *format++;
 8001076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	643a      	str	r2, [r7, #64]	@ 0x40
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

      if( c == 0 )
 8001082:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 819f 	beq.w	80013ca <lcdPrintF+0x362>
         break; /* End of string */

      if( c != '%' )
 800108c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001090:	2b25      	cmp	r3, #37	@ 0x25
 8001092:	d005      	beq.n	80010a0 <lcdPrintF+0x38>
      {

         /* Non escape character */
         lcdPutChar( c );
 8001094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff13 	bl	8000ec4 <lcdPutChar>

         continue;
 800109e:	e193      	b.n	80013c8 <lcdPrintF+0x360>
      }

      width = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      flag = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      c = *format++;
 80010aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

      if( c == '0' )
 80010b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010ba:	2b30      	cmp	r3, #48	@ 0x30
 80010bc:	d109      	bne.n	80010d2 <lcdPrintF+0x6a>
      {
         /* Flag: '0' padding */

         flag = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
         c = *format++;
 80010c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010d0:	e01e      	b.n	8001110 <lcdPrintF+0xa8>

      }
      else
      {

         if( c == '-' )
 80010d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80010d8:	d11a      	bne.n	8001110 <lcdPrintF+0xa8>
         {

            /* Flag: left justified */
            flag = 2;
 80010da:	2302      	movs	r3, #2
 80010dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            c = *format++;
 80010e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         }
      }

      while( _IS_DIGIT( c ) )
 80010ec:	e010      	b.n	8001110 <lcdPrintF+0xa8>
      {

         /* Precision */
         width = width * 10 + c - '0';
 80010ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	461a      	mov	r2, r3
 80010fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010fe:	4413      	add	r3, r2
 8001100:	3b30      	subs	r3, #48	@ 0x30
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
         c = *format++;
 8001104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	643a      	str	r2, [r7, #64]	@ 0x40
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      while( _IS_DIGIT( c ) )
 8001110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001114:	2b2f      	cmp	r3, #47	@ 0x2f
 8001116:	d903      	bls.n	8001120 <lcdPrintF+0xb8>
 8001118:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800111c:	2b39      	cmp	r3, #57	@ 0x39
 800111e:	d9e6      	bls.n	80010ee <lcdPrintF+0x86>
      }

      if( ( c == 'l' ) || ( c == 'L' ) )
 8001120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001124:	2b6c      	cmp	r3, #108	@ 0x6c
 8001126:	d003      	beq.n	8001130 <lcdPrintF+0xc8>
 8001128:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800112c:	2b4c      	cmp	r3, #76	@ 0x4c
 800112e:	d10b      	bne.n	8001148 <lcdPrintF+0xe0>
      {
         /* Prefix: Size is long int */

         flag |= 4;
 8001130:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
         c = *format++;
 800113c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	643a      	str	r2, [r7, #64]	@ 0x40
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }

      if( !c )
 8001148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 813e 	beq.w	80013ce <lcdPrintF+0x366>
         break;

      d = c;
 8001152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001156:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

      if( _IS_LOWER( d ) )
 800115a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800115e:	2b60      	cmp	r3, #96	@ 0x60
 8001160:	d908      	bls.n	8001174 <lcdPrintF+0x10c>
 8001162:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001166:	2b7a      	cmp	r3, #122	@ 0x7a
 8001168:	d804      	bhi.n	8001174 <lcdPrintF+0x10c>
         d -= 0x20;
 800116a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800116e:	3b20      	subs	r3, #32
 8001170:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

      switch( d )
 8001174:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001178:	3b42      	subs	r3, #66	@ 0x42
 800117a:	2b16      	cmp	r3, #22
 800117c:	d87d      	bhi.n	800127a <lcdPrintF+0x212>
 800117e:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <lcdPrintF+0x11c>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001263 	.word	0x08001263
 8001188:	08001251 	.word	0x08001251
 800118c:	0800126f 	.word	0x0800126f
 8001190:	0800127b 	.word	0x0800127b
 8001194:	0800127b 	.word	0x0800127b
 8001198:	0800127b 	.word	0x0800127b
 800119c:	0800127b 	.word	0x0800127b
 80011a0:	0800127b 	.word	0x0800127b
 80011a4:	0800127b 	.word	0x0800127b
 80011a8:	0800127b 	.word	0x0800127b
 80011ac:	0800127b 	.word	0x0800127b
 80011b0:	0800127b 	.word	0x0800127b
 80011b4:	0800127b 	.word	0x0800127b
 80011b8:	08001269 	.word	0x08001269
 80011bc:	0800127b 	.word	0x0800127b
 80011c0:	0800127b 	.word	0x0800127b
 80011c4:	0800127b 	.word	0x0800127b
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	0800127b 	.word	0x0800127b
 80011d0:	0800126f 	.word	0x0800126f
 80011d4:	0800127b 	.word	0x0800127b
 80011d8:	0800127b 	.word	0x0800127b
 80011dc:	08001275 	.word	0x08001275

         case 'S':

            /* String */

            pointer = va_arg( arp, unsigned char* );
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	1d1a      	adds	r2, r3, #4
 80011e4:	617a      	str	r2, [r7, #20]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24

            for( j = 0; pointer[j]; j++ )
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	e002      	b.n	80011f6 <lcdPrintF+0x18e>
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	3301      	adds	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f6      	bne.n	80011f0 <lcdPrintF+0x188>
               ;

            if( !( flag & 2 ) )
 8001202:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d111      	bne.n	8001232 <lcdPrintF+0x1ca>
            {
               while( j++ < width )
 800120e:	e002      	b.n	8001216 <lcdPrintF+0x1ae>
               {
                  lcdPutChar( ' ' );
 8001210:	2020      	movs	r0, #32
 8001212:	f7ff fe57 	bl	8000ec4 <lcdPutChar>
               while( j++ < width )
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	61ba      	str	r2, [r7, #24]
 800121c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800121e:	429a      	cmp	r2, r3
 8001220:	d8f6      	bhi.n	8001210 <lcdPrintF+0x1a8>

               }
            }

            while( *pointer )
 8001222:	e006      	b.n	8001232 <lcdPrintF+0x1ca>
            {
               lcdPutChar( *pointer++ );
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	627a      	str	r2, [r7, #36]	@ 0x24
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe49 	bl	8000ec4 <lcdPutChar>
            while( *pointer )
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f4      	bne.n	8001224 <lcdPrintF+0x1bc>

            }
            while( j++ < width )
 800123a:	e002      	b.n	8001242 <lcdPrintF+0x1da>
            {
               lcdPutChar( ' ' );
 800123c:	2020      	movs	r0, #32
 800123e:	f7ff fe41 	bl	8000ec4 <lcdPutChar>
            while( j++ < width )
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	61ba      	str	r2, [r7, #24]
 8001248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800124a:	429a      	cmp	r2, r3
 800124c:	d8f6      	bhi.n	800123c <lcdPrintF+0x1d4>
            }
            continue;
 800124e:	e0bb      	b.n	80013c8 <lcdPrintF+0x360>

         case 'C': /* Character */

            lcdPutChar( (char) va_arg( arp, int ) );
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	617a      	str	r2, [r7, #20]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe32 	bl	8000ec4 <lcdPutChar>

            continue;
 8001260:	e0b2      	b.n	80013c8 <lcdPrintF+0x360>

         case 'B': /* Binary */

            radix = 2;
 8001262:	2302      	movs	r3, #2
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8001266:	e00e      	b.n	8001286 <lcdPrintF+0x21e>

         case 'O': /* Octal */
            radix = 8;
 8001268:	2308      	movs	r3, #8
 800126a:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 800126c:	e00b      	b.n	8001286 <lcdPrintF+0x21e>

         case 'D': /* Signed decimal */
         case 'U': /* Unsigned decimal */

            radix = 10;
 800126e:	230a      	movs	r3, #10
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8001272:	e008      	b.n	8001286 <lcdPrintF+0x21e>

         case 'X': /* Hexdecimal */

            radix = 16;
 8001274:	2310      	movs	r3, #16
 8001276:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8001278:	e005      	b.n	8001286 <lcdPrintF+0x21e>

         default: /* Unknown type (pass-through) */

            lcdPutChar( c );
 800127a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe20 	bl	8000ec4 <lcdPutChar>

            continue;
 8001284:	e0a0      	b.n	80013c8 <lcdPrintF+0x360>
      }

      /* Get an argument and put it in numeral */

      value =
            ( flag & 4 ) ?
 8001286:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800128a:	f003 0304 	and.w	r3, r3, #4
                  (uint32_t) va_arg( arp, long ) :
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <lcdPrintF+0x234>
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	1d1a      	adds	r2, r3, #4
 8001296:	617a      	str	r2, [r7, #20]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	e00c      	b.n	80012b6 <lcdPrintF+0x24e>
                  ( ( d == 'D' ) ?
                        (uint32_t) (long) va_arg( arp, int ) :
 800129c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80012a0:	2b44      	cmp	r3, #68	@ 0x44
 80012a2:	d104      	bne.n	80012ae <lcdPrintF+0x246>
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	1d1a      	adds	r2, r3, #4
 80012a8:	617a      	str	r2, [r7, #20]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	e003      	b.n	80012b6 <lcdPrintF+0x24e>
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	1d1a      	adds	r2, r3, #4
 80012b2:	617a      	str	r2, [r7, #20]
 80012b4:	681b      	ldr	r3, [r3, #0]
      value =
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28
                        (uint32_t) va_arg( arp, unsigned int ) );

      if( d == 'D' && ( value & 0x80000000 ) )
 80012b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80012bc:	2b44      	cmp	r3, #68	@ 0x44
 80012be:	d10b      	bne.n	80012d8 <lcdPrintF+0x270>
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da08      	bge.n	80012d8 <lcdPrintF+0x270>
      {
         value = 0 - value;
 80012c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c8:	425b      	negs	r3, r3
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
         flag |= 8;
 80012cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }

      i = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]

      do
      {
         d = (char) ( value % radix );
 80012dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80012e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80012e6:	fb01 f202 	mul.w	r2, r1, r2
 80012ea:	1a9b      	subs	r3, r3, r2
 80012ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
         value /= radix;
 80012f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28

         if( d > 9 )
 80012fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80012fe:	2b09      	cmp	r3, #9
 8001300:	d90b      	bls.n	800131a <lcdPrintF+0x2b2>
            d += ( c == 'x' ) ? 0x27 : 0x07;
 8001302:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001306:	2b78      	cmp	r3, #120	@ 0x78
 8001308:	d101      	bne.n	800130e <lcdPrintF+0x2a6>
 800130a:	2227      	movs	r2, #39	@ 0x27
 800130c:	e000      	b.n	8001310 <lcdPrintF+0x2a8>
 800130e:	2207      	movs	r2, #7
 8001310:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001314:	4413      	add	r3, r2
 8001316:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

         scratch[i++] = d + '0';
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	61fa      	str	r2, [r7, #28]
 8001320:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001324:	3230      	adds	r2, #48	@ 0x30
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	3338      	adds	r3, #56	@ 0x38
 800132a:	443b      	add	r3, r7
 800132c:	f803 2c34 	strb.w	r2, [r3, #-52]

      } while( value && i < sizeof scratch / sizeof scratch[0] );
 8001330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <lcdPrintF+0x2d4>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d9cf      	bls.n	80012dc <lcdPrintF+0x274>

      if( flag & 8 )
 800133c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <lcdPrintF+0x2f0>
         scratch[i++] = '-';
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	61fa      	str	r2, [r7, #28]
 800134e:	3338      	adds	r3, #56	@ 0x38
 8001350:	443b      	add	r3, r7
 8001352:	222d      	movs	r2, #45	@ 0x2d
 8001354:	f803 2c34 	strb.w	r2, [r3, #-52]

      j = i;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	61bb      	str	r3, [r7, #24]
      d = ( flag & 1 ) ? '0' : ' ';
 800135c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <lcdPrintF+0x304>
 8001368:	2330      	movs	r3, #48	@ 0x30
 800136a:	e000      	b.n	800136e <lcdPrintF+0x306>
 800136c:	2320      	movs	r3, #32
 800136e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

      while( !( flag & 2 ) && j++ < width )
 8001372:	e004      	b.n	800137e <lcdPrintF+0x316>
      {
         lcdPutChar( d );
 8001374:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fda3 	bl	8000ec4 <lcdPutChar>
      while( !( flag & 2 ) && j++ < width )
 800137e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <lcdPrintF+0x32e>
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	61ba      	str	r2, [r7, #24]
 8001390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001392:	429a      	cmp	r2, r3
 8001394:	d8ee      	bhi.n	8001374 <lcdPrintF+0x30c>
      }

      do
      {

         lcdPutChar( scratch[--i] );
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b01      	subs	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	1d3a      	adds	r2, r7, #4
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fd8d 	bl	8000ec4 <lcdPutChar>

      } while( i );
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f2      	bne.n	8001396 <lcdPrintF+0x32e>

      while( j++ < width )
 80013b0:	e004      	b.n	80013bc <lcdPrintF+0x354>
      {
         lcdPutChar( d );
 80013b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd84 	bl	8000ec4 <lcdPutChar>
      while( j++ < width )
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	61ba      	str	r2, [r7, #24]
 80013c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f4      	bhi.n	80013b2 <lcdPrintF+0x34a>
      c = *format++;
 80013c8:	e655      	b.n	8001076 <lcdPrintF+0xe>
         break; /* End of string */
 80013ca:	bf00      	nop
 80013cc:	e000      	b.n	80013d0 <lcdPrintF+0x368>
         break;
 80013ce:	bf00      	nop
      }
   }

   va_end( arp );

   return RV_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3738      	adds	r7, #56	@ 0x38
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013dc:	b004      	add	sp, #16
 80013de:	4770      	bx	lr

080013e0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//override putchar -> printf redirected to uart
int __io_putchar( int ch )
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit( &huart7, (uint8_t *)&ch, 1, 0xFFFF );
 80013e8:	1d39      	adds	r1, r7, #4
 80013ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ee:	2201      	movs	r2, #1
 80013f0:	4803      	ldr	r0, [pc, #12]	@ (8001400 <__io_putchar+0x20>)
 80013f2:	f004 fb71 	bl	8005ad8 <HAL_UART_Transmit>

   return ch;
 80013f6:	687b      	ldr	r3, [r7, #4]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000230 	.word	0x20000230

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001408:	f000 fb3c 	bl	8001a84 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f000 fe35 	bl	800207a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f816 	bl	8001440 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001414:	f000 f884 	bl	8001520 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f938 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 800141c:	f000 f910 	bl	8001640 <MX_DMA_Init>
  MX_RNG_Init();
 8001420:	f000 f8aa 	bl	8001578 <MX_RNG_Init>
  MX_UART7_Init();
 8001424:	f000 f8dc 	bl	80015e0 <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 8001428:	f000 f8ba 	bl	80015a0 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800142c:	f005 fd90 	bl	8006f50 <MX_FATFS_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8001430:	b662      	cpsie	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN 2 */
  __enable_irq();


  lcdInit();
 8001434:	f7ff fbf8 	bl	8000c28 <lcdInit>

  bootloaderMain();
 8001438:	f7ff fa18 	bl	800086c <bootloaderMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <main+0x38>

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	@ 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	2234      	movs	r2, #52	@ 0x34
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f009 ff16 	bl	800b280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001464:	f002 f83c 	bl	80034e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	4b2b      	ldr	r3, [pc, #172]	@ (8001518 <SystemClock_Config+0xd8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	4a2a      	ldr	r2, [pc, #168]	@ (8001518 <SystemClock_Config+0xd8>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	@ 0x40
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <SystemClock_Config+0xd8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	4b26      	ldr	r3, [pc, #152]	@ (800151c <SystemClock_Config+0xdc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a25      	ldr	r2, [pc, #148]	@ (800151c <SystemClock_Config+0xdc>)
 8001486:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <SystemClock_Config+0xdc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	2302      	movs	r3, #2
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014b0:	23c0      	movs	r3, #192	@ 0xc0
 80014b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 f86b 	bl	80035a0 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014d0:	f000 fb04 	bl	8001adc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014d4:	f002 f814 	bl	8003500 <HAL_PWREx_EnableOverDrive>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014de:	f000 fafd 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2302      	movs	r3, #2
 80014e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	2106      	movs	r1, #6
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fafb 	bl	8003afc <HAL_RCC_ClockConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800150c:	f000 fae6 	bl	8001adc <Error_Handler>
  }
}
 8001510:	bf00      	nop
 8001512:	3750      	adds	r7, #80	@ 0x50
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0a4      	sub	sp, #144	@ 0x90
 8001524:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2290      	movs	r2, #144	@ 0x90
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f009 fea7 	bl	800b280 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8001532:	f04f 6384 	mov.w	r3, #69206016	@ 0x4200000
 8001536:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001538:	23c0      	movs	r3, #192	@ 0xc0
 800153a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800153c:	2302      	movs	r3, #2
 800153e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001550:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001554:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fcf2 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800156a:	f000 fab7 	bl	8001adc <Error_Handler>
  }
}
 800156e:	bf00      	nop
 8001570:	3790      	adds	r7, #144	@ 0x90
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_RNG_Init+0x20>)
 800157e:	4a07      	ldr	r2, [pc, #28]	@ (800159c <MX_RNG_Init+0x24>)
 8001580:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_RNG_Init+0x20>)
 8001584:	f003 f908 	bl	8004798 <HAL_RNG_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800158e:	f000 faa5 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000dc 	.word	0x200000dc
 800159c:	50060800 	.word	0x50060800

080015a0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015a6:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <MX_SDMMC2_SD_Init+0x3c>)
 80015a8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 2;
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <MX_SDMMC2_SD_Init+0x38>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	200000ec 	.word	0x200000ec
 80015dc:	40011c00 	.word	0x40011c00

080015e0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <MX_UART7_Init+0x58>)
 80015e6:	4a15      	ldr	r2, [pc, #84]	@ (800163c <MX_UART7_Init+0x5c>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80015ea:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <MX_UART7_Init+0x58>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_UART7_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_UART7_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_UART7_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_UART7_Init+0x58>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_UART7_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_UART7_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_UART7_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_UART7_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_UART7_Init+0x58>)
 8001624:	f004 fa0a 	bl	8005a3c <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 fa55 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000230 	.word	0x20000230
 800163c:	40007800 	.word	0x40007800

08001640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001646:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <MX_DMA_Init+0x48>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <MX_DMA_Init+0x48>)
 800164c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <MX_DMA_Init+0x48>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2038      	movs	r0, #56	@ 0x38
 8001664:	f000 fe65 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001668:	2038      	movs	r0, #56	@ 0x38
 800166a:	f000 fe7e 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	2044      	movs	r0, #68	@ 0x44
 8001674:	f000 fe5d 	bl	8002332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001678:	2044      	movs	r0, #68	@ 0x44
 800167a:	f000 fe76 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b090      	sub	sp, #64	@ 0x40
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4bb0      	ldr	r3, [pc, #704]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4aaf      	ldr	r2, [pc, #700]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4bad      	ldr	r3, [pc, #692]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4baa      	ldr	r3, [pc, #680]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4aa9      	ldr	r2, [pc, #676]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4ba7      	ldr	r3, [pc, #668]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d2:	4ba4      	ldr	r3, [pc, #656]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4aa3      	ldr	r2, [pc, #652]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4ba1      	ldr	r3, [pc, #644]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a9d      	ldr	r2, [pc, #628]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b9b      	ldr	r3, [pc, #620]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b98      	ldr	r3, [pc, #608]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a97      	ldr	r2, [pc, #604]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b95      	ldr	r3, [pc, #596]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800171a:	4b92      	ldr	r3, [pc, #584]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a91      	ldr	r2, [pc, #580]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b8f      	ldr	r3, [pc, #572]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b8c      	ldr	r3, [pc, #560]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a8b      	ldr	r2, [pc, #556]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b89      	ldr	r3, [pc, #548]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800174a:	4b86      	ldr	r3, [pc, #536]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a85      	ldr	r2, [pc, #532]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b83      	ldr	r3, [pc, #524]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001762:	4b80      	ldr	r3, [pc, #512]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a7f      	ldr	r2, [pc, #508]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001768:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800177a:	4b7a      	ldr	r3, [pc, #488]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a79      	ldr	r2, [pc, #484]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b77      	ldr	r3, [pc, #476]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001792:	4b74      	ldr	r3, [pc, #464]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a73      	ldr	r2, [pc, #460]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 8001798:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b71      	ldr	r3, [pc, #452]	@ (8001964 <MX_GPIO_Init+0x2d8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VCC_PRINTER_ON_Pin|BUZZER_TTL_Pin|VCC_COIN_ON_Pin|CJ_MOTOR_TTL_Pin
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 414f 	mov.w	r1, #52992	@ 0xcf00
 80017b0:	486d      	ldr	r0, [pc, #436]	@ (8001968 <MX_GPIO_Init+0x2dc>)
 80017b2:	f001 fe7b 	bl	80034ac <HAL_GPIO_WritePin>
                          |ES_DECL_MAG_TTL_Pin|ES_ACC_MAG_TTL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, AP_MAGNET_Pin|VCC_MDM_ON_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5190 	mov.w	r1, #4608	@ 0x1200
 80017bc:	486b      	ldr	r0, [pc, #428]	@ (800196c <MX_GPIO_Init+0x2e0>)
 80017be:	f001 fe75 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MDM_ON_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D0_Pin
 80017c2:	2200      	movs	r2, #0
 80017c4:	f241 013b 	movw	r1, #4155	@ 0x103b
 80017c8:	4869      	ldr	r0, [pc, #420]	@ (8001970 <MX_GPIO_Init+0x2e4>)
 80017ca:	f001 fe6f 	bl	80034ac <HAL_GPIO_WritePin>
                          |LCD_D1_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2108      	movs	r1, #8
 80017d2:	4868      	ldr	r0, [pc, #416]	@ (8001974 <MX_GPIO_Init+0x2e8>)
 80017d4:	f001 fe6a 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80017de:	4866      	ldr	r0, [pc, #408]	@ (8001978 <MX_GPIO_Init+0x2ec>)
 80017e0:	f001 fe64 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D7_Pin|LCD_BL_R_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80017ea:	4864      	ldr	r0, [pc, #400]	@ (800197c <MX_GPIO_Init+0x2f0>)
 80017ec:	f001 fe5e 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, LCD_BL_G_Pin|LCD_BL_B_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2118      	movs	r1, #24
 80017f4:	4862      	ldr	r0, [pc, #392]	@ (8001980 <MX_GPIO_Init+0x2f4>)
 80017f6:	f001 fe59 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VCC12_MEASUREMENT_Pin VCC24_MEASUREMENT_Pin VCC5_MEASUREMENT_Pin */
  GPIO_InitStruct.Pin = VCC12_MEASUREMENT_Pin|VCC24_MEASUREMENT_Pin|VCC5_MEASUREMENT_Pin;
 80017fa:	230e      	movs	r3, #14
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fe:	2303      	movs	r3, #3
 8001800:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	485d      	ldr	r0, [pc, #372]	@ (8001984 <MX_GPIO_Init+0x2f8>)
 800180e:	f001 fca1 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPI0_Pin */
  GPIO_InitStruct.Pin = GPI0_Pin;
 8001812:	2301      	movs	r3, #1
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPI0_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001822:	4619      	mov	r1, r3
 8001824:	4858      	ldr	r0, [pc, #352]	@ (8001988 <MX_GPIO_Init+0x2fc>)
 8001826:	f001 fc95 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182a:	2302      	movs	r3, #2
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800183a:	2308      	movs	r3, #8
 800183c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001842:	4619      	mov	r1, r3
 8001844:	4850      	ldr	r0, [pc, #320]	@ (8001988 <MX_GPIO_Init+0x2fc>)
 8001846:	f001 fc85 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_SENSOR_Pin VCC_SOLAR_MEASUREMENT_Pin */
  GPIO_InitStruct.Pin = LIGHT_SENSOR_Pin|VCC_SOLAR_MEASUREMENT_Pin;
 800184a:	2303      	movs	r3, #3
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	484b      	ldr	r0, [pc, #300]	@ (800198c <MX_GPIO_Init+0x300>)
 800185e:	f001 fc79 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_PRINTER_ON_Pin BUZZER_TTL_Pin VCC_COIN_ON_Pin CJ_MOTOR_TTL_Pin
                           ES_DECL_MAG_TTL_Pin ES_ACC_MAG_TTL_Pin */
  GPIO_InitStruct.Pin = VCC_PRINTER_ON_Pin|BUZZER_TTL_Pin|VCC_COIN_ON_Pin|CJ_MOTOR_TTL_Pin
 8001862:	f44f 434f 	mov.w	r3, #52992	@ 0xcf00
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ES_DECL_MAG_TTL_Pin|ES_ACC_MAG_TTL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001874:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001878:	4619      	mov	r1, r3
 800187a:	483b      	ldr	r0, [pc, #236]	@ (8001968 <MX_GPIO_Init+0x2dc>)
 800187c:	f001 fc6a 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : CJ_SENSOR_Pin ES_SENSOR_Pin */
  GPIO_InitStruct.Pin = CJ_SENSOR_Pin|ES_SENSOR_Pin;
 8001880:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001892:	4619      	mov	r1, r3
 8001894:	4834      	ldr	r0, [pc, #208]	@ (8001968 <MX_GPIO_Init+0x2dc>)
 8001896:	f001 fc5d 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800189a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018ac:	2307      	movs	r3, #7
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018b4:	4619      	mov	r1, r3
 80018b6:	4835      	ldr	r0, [pc, #212]	@ (800198c <MX_GPIO_Init+0x300>)
 80018b8:	f001 fc4c 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : AP_MAGNET_Pin VCC_MDM_ON_Pin */
  GPIO_InitStruct.Pin = AP_MAGNET_Pin|VCC_MDM_ON_Pin;
 80018bc:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d2:	4619      	mov	r1, r3
 80018d4:	4825      	ldr	r0, [pc, #148]	@ (800196c <MX_GPIO_Init+0x2e0>)
 80018d6:	f001 fc3d 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : AP_COIN_Pin AP_ERROR_Pin */
  GPIO_InitStruct.Pin = AP_COIN_Pin|AP_ERROR_Pin;
 80018da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	481f      	ldr	r0, [pc, #124]	@ (800196c <MX_GPIO_Init+0x2e0>)
 80018f0:	f001 fc30 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018f4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001906:	2308      	movs	r3, #8
 8001908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190e:	4619      	mov	r1, r3
 8001910:	481e      	ldr	r0, [pc, #120]	@ (800198c <MX_GPIO_Init+0x300>)
 8001912:	f001 fc1f 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001916:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800191a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001928:	2304      	movs	r3, #4
 800192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	4816      	ldr	r0, [pc, #88]	@ (800198c <MX_GPIO_Init+0x300>)
 8001934:	f001 fc0e 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDM_ON_Pin LCD_RW_Pin LCD_E_Pin LCD_D0_Pin
                           LCD_D1_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = MDM_ON_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D0_Pin
 8001938:	f241 033b 	movw	r3, #4155	@ 0x103b
 800193c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_D1_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193e:	2301      	movs	r3, #1
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800194e:	4619      	mov	r1, r3
 8001950:	4807      	ldr	r0, [pc, #28]	@ (8001970 <MX_GPIO_Init+0x2e4>)
 8001952:	f001 fbff 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDM_RING_Pin */
  GPIO_InitStruct.Pin = MDM_RING_Pin;
 8001956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	e015      	b.n	8001990 <MX_GPIO_Init+0x304>
 8001964:	40023800 	.word	0x40023800
 8001968:	40021000 	.word	0x40021000
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40022000 	.word	0x40022000
 8001978:	40022400 	.word	0x40022400
 800197c:	40021800 	.word	0x40021800
 8001980:	40022800 	.word	0x40022800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MDM_RING_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001996:	4619      	mov	r1, r3
 8001998:	4834      	ldr	r0, [pc, #208]	@ (8001a6c <MX_GPIO_Init+0x3e0>)
 800199a:	f001 fbdb 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800199e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019b0:	2308      	movs	r3, #8
 80019b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b8:	4619      	mov	r1, r3
 80019ba:	482d      	ldr	r0, [pc, #180]	@ (8001a70 <MX_GPIO_Init+0x3e4>)
 80019bc:	f001 fbca 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 80019c0:	2308      	movs	r3, #8
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4827      	ldr	r0, [pc, #156]	@ (8001a74 <MX_GPIO_Init+0x3e8>)
 80019d8:	f001 fbbc 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin;
 80019dc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80019ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019f2:	4619      	mov	r1, r3
 80019f4:	4820      	ldr	r0, [pc, #128]	@ (8001a78 <MX_GPIO_Init+0x3ec>)
 80019f6:	f001 fbad 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_BL_R_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_BL_R_Pin;
 80019fa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a10:	4619      	mov	r1, r3
 8001a12:	481a      	ldr	r0, [pc, #104]	@ (8001a7c <MX_GPIO_Init+0x3f0>)
 8001a14:	f001 fb9e 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_G_Pin LCD_BL_B_Pin */
  GPIO_InitStruct.Pin = LCD_BL_G_Pin|LCD_BL_B_Pin;
 8001a18:	2318      	movs	r3, #24
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <MX_GPIO_Init+0x3f4>)
 8001a30:	f001 fb90 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI3_Pin GPI2_Pin GPI1_Pin */
  GPIO_InitStruct.Pin = GPI3_Pin|GPI2_Pin|GPI1_Pin;
 8001a34:	23e0      	movs	r3, #224	@ 0xe0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	480e      	ldr	r0, [pc, #56]	@ (8001a80 <MX_GPIO_Init+0x3f4>)
 8001a48:	f001 fb84 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI5_Pin GPI4_Pin GPI7_Pin GPI6_Pin */
  GPIO_InitStruct.Pin = GPI5_Pin|GPI4_Pin|GPI7_Pin|GPI6_Pin;
 8001a4c:	23f0      	movs	r3, #240	@ 0xf0
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <MX_GPIO_Init+0x3e8>)
 8001a60:	f001 fb78 	bl	8003154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a64:	bf00      	nop
 8001a66:	3740      	adds	r7, #64	@ 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021c00 	.word	0x40021c00
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40022400 	.word	0x40022400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40022800 	.word	0x40022800

08001a84 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a96:	f000 fc83 	bl	80023a0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001aa6:	231f      	movs	r3, #31
 8001aa8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001aaa:	2387      	movs	r3, #135	@ 0x87
 8001aac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001aba:	2301      	movs	r3, #1
 8001abc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fca1 	bl	8002410 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f000 fc7e 	bl	80023d0 <HAL_MPU_Enable>

}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <Error_Handler+0x8>

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <HAL_MspInit+0x44>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <HAL_MspInit+0x44>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_MspInit+0x44>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_MspInit+0x44>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_MspInit+0x44>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_MspInit+0x44>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <HAL_RNG_MspInit+0x38>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10b      	bne.n	8001b5a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_RNG_MspInit+0x3c>)
 8001b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <HAL_RNG_MspInit+0x3c>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b4c:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <HAL_RNG_MspInit+0x3c>)
 8001b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	50060800 	.word	0x50060800
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6d      	ldr	r2, [pc, #436]	@ (8001d44 <HAL_SD_MspInit+0x1d4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f040 80d4 	bne.w	8001d3c <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8001b94:	4b6c      	ldr	r3, [pc, #432]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	4a6b      	ldr	r2, [pc, #428]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba0:	4b69      	ldr	r3, [pc, #420]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bac:	4b66      	ldr	r3, [pc, #408]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	4a65      	ldr	r2, [pc, #404]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb8:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bc4:	4b60      	ldr	r3, [pc, #384]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d48 <HAL_SD_MspInit+0x1d8>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bdc:	23c0      	movs	r3, #192	@ 0xc0
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001bec:	230b      	movs	r3, #11
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4855      	ldr	r0, [pc, #340]	@ (8001d4c <HAL_SD_MspInit+0x1dc>)
 8001bf8:	f001 faac 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001bfc:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001c0e:	230b      	movs	r3, #11
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	484d      	ldr	r0, [pc, #308]	@ (8001d50 <HAL_SD_MspInit+0x1e0>)
 8001c1a:	f001 fa9b 	bl	8003154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001c30:	230a      	movs	r3, #10
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4845      	ldr	r0, [pc, #276]	@ (8001d50 <HAL_SD_MspInit+0x1e0>)
 8001c3c:	f001 fa8a 	bl	8003154 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8001c40:	4b44      	ldr	r3, [pc, #272]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c42:	4a45      	ldr	r2, [pc, #276]	@ (8001d58 <HAL_SD_MspInit+0x1e8>)
 8001c44:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8001c46:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c48:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8001c4c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4e:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c54:	4b3f      	ldr	r3, [pc, #252]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c60:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c68:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c70:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c74:	2220      	movs	r2, #32
 8001c76:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c78:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c80:	2204      	movs	r2, #4
 8001c82:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c84:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c86:	2203      	movs	r2, #3
 8001c88:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001c8a:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c8c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c92:	4b30      	ldr	r3, [pc, #192]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c94:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001c98:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8001c9a:	482e      	ldr	r0, [pc, #184]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001c9c:	f000 fbf8 	bl	8002490 <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 8001ca6:	f7ff ff19 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a29      	ldr	r2, [pc, #164]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cb0:	4a28      	ldr	r2, [pc, #160]	@ (8001d54 <HAL_SD_MspInit+0x1e4>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8001cb6:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cb8:	4a29      	ldr	r2, [pc, #164]	@ (8001d60 <HAL_SD_MspInit+0x1f0>)
 8001cba:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cbe:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8001cc2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cc4:	4b25      	ldr	r3, [pc, #148]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cc6:	2240      	movs	r2, #64	@ 0x40
 8001cc8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cca:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cd6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001cde:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ce6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cea:	2220      	movs	r2, #32
 8001cec:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cee:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001cf4:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001d00:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001d02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d08:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001d0a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8001d10:	4812      	ldr	r0, [pc, #72]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001d12:	f000 fbbd 	bl	8002490 <HAL_DMA_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001d1c:	f7ff fede 	bl	8001adc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a0e      	ldr	r2, [pc, #56]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001d24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d26:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_SD_MspInit+0x1ec>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2067      	movs	r0, #103	@ 0x67
 8001d32:	f000 fafe 	bl	8002332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8001d36:	2067      	movs	r0, #103	@ 0x67
 8001d38:	f000 fb17 	bl	800236a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	@ 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40011c00 	.word	0x40011c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021800 	.word	0x40021800
 8001d54:	20000170 	.word	0x20000170
 8001d58:	40026410 	.word	0x40026410
 8001d5c:	200001d0 	.word	0x200001d0
 8001d60:	40026488 	.word	0x40026488

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0ae      	sub	sp, #184	@ 0xb8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2290      	movs	r2, #144	@ 0x90
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f009 fa7b 	bl	800b280 <memset>
  if(huart->Instance==UART7)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a21      	ldr	r2, [pc, #132]	@ (8001e14 <HAL_UART_MspInit+0xb0>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d13b      	bne.n	8001e0c <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 f8d0 	bl	8003f48 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dae:	f7ff fe95 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001db2:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dd0:	f043 0320 	orr.w	r3, r3, #32
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_UART_MspInit+0xb4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23c0      	movs	r3, #192	@ 0xc0
 8001de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <HAL_UART_MspInit+0xb8>)
 8001e08:	f001 f9a4 	bl	8003154 <HAL_GPIO_Init>

  /* USER CODE END UART7_MspInit 1 */

  }

}
 8001e0c:	bf00      	nop
 8001e0e:	37b8      	adds	r7, #184	@ 0xb8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40007800 	.word	0x40007800
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40021400 	.word	0x40021400

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <NMI_Handler+0x4>

08001e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <MemManage_Handler+0x4>

08001e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e76:	f000 f93d 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8001e84:	4802      	ldr	r0, [pc, #8]	@ (8001e90 <DMA2_Stream0_IRQHandler+0x10>)
 8001e86:	f000 fc33 	bl	80026f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000170 	.word	0x20000170

08001e94 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8001e98:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <DMA2_Stream5_IRQHandler+0x10>)
 8001e9a:	f000 fc29 	bl	80026f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200001d0 	.word	0x200001d0

08001ea8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8001eac:	4802      	ldr	r0, [pc, #8]	@ (8001eb8 <SDMMC2_IRQHandler+0x10>)
 8001eae:	f002 ff1d 	bl	8004cec <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200000ec 	.word	0x200000ec

08001ebc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00a      	b.n	8001ee4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf0      	blt.n	8001ece <_read+0x12>
  }

  return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e009      	b.n	8001f1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fa65 	bl	80013e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf1      	blt.n	8001f08 <_write+0x12>
  }
  return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:

int _close(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f56:	605a      	str	r2, [r3, #4]
  return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f009 f9a8 	bl	800b31c <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20080000 	.word	0x20080000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	200002b8 	.word	0x200002b8
 8002000:	200008d0 	.word	0x200008d0

08002004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	@ (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002060 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202c:	f7ff ffea 	bl	8002004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002032:	490d      	ldr	r1, [pc, #52]	@ (8002068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002034:	4a0d      	ldr	r2, [pc, #52]	@ (800206c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002038:	e002      	b.n	8002040 <LoopCopyDataInit>

0800203a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800203a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800203c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203e:	3304      	adds	r3, #4

08002040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002044:	d3f9      	bcc.n	800203a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002048:	4c0a      	ldr	r4, [pc, #40]	@ (8002074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800204c:	e001      	b.n	8002052 <LoopFillZerobss>

0800204e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002050:	3204      	adds	r2, #4

08002052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002054:	d3fb      	bcc.n	800204e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002056:	f009 f967 	bl	800b328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7ff f9d3 	bl	8001404 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800206c:	0800c378 	.word	0x0800c378
  ldr r2, =_sbss
 8002070:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002074:	200008d0 	.word	0x200008d0

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>

0800207a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207e:	2003      	movs	r0, #3
 8002080:	f000 f94c 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002084:	200f      	movs	r0, #15
 8002086:	f000 f805 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208a:	f7ff fd2d 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800209c:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_InitTick+0x54>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_InitTick+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f967 	bl	8002386 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 f92f 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	@ (80020f0 <HAL_InitTick+0x5c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000008 	.word	0x20000008
 80020f0:	20000004 	.word	0x20000004

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	20000008 	.word	0x20000008
 8002118:	200002bc 	.word	0x200002bc

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	200002bc 	.word	0x200002bc

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x40>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00
 80021c0:	05fa0000 	.word	0x05fa0000

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023a4:	f3bf 8f5f 	dmb	sy
}
 80023a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <HAL_MPU_Disable+0x28>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	4a06      	ldr	r2, [pc, #24]	@ (80023c8 <HAL_MPU_Disable+0x28>)
 80023b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b4:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023b6:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <HAL_MPU_Disable+0x2c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	e000ed90 	.word	0xe000ed90

080023d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002408 <HAL_MPU_Enable+0x38>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <HAL_MPU_Enable+0x3c>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_MPU_Enable+0x3c>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80023ee:	f3bf 8f4f 	dsb	sy
}
 80023f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023f4:	f3bf 8f6f 	isb	sy
}
 80023f8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed90 	.word	0xe000ed90
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	785a      	ldrb	r2, [r3, #1]
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <HAL_MPU_ConfigRegion+0x7c>)
 800241e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002420:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <HAL_MPU_ConfigRegion+0x7c>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_MPU_ConfigRegion+0x7c>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800242c:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_MPU_ConfigRegion+0x7c>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7b1b      	ldrb	r3, [r3, #12]
 8002438:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7adb      	ldrb	r3, [r3, #11]
 800243e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7a9b      	ldrb	r3, [r3, #10]
 8002446:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7b5b      	ldrb	r3, [r3, #13]
 800244e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002450:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	7b9b      	ldrb	r3, [r3, #14]
 8002456:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002458:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7bdb      	ldrb	r3, [r3, #15]
 800245e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002460:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7a5b      	ldrb	r3, [r3, #9]
 8002466:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002468:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7a1b      	ldrb	r3, [r3, #8]
 800246e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002470:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002478:	4a04      	ldr	r2, [pc, #16]	@ (800248c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800247a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800247c:	6113      	str	r3, [r2, #16]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed90 	.word	0xe000ed90

08002490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff fe3e 	bl	800211c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e099      	b.n	80025e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024cc:	e00f      	b.n	80024ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ce:	f7ff fe25 	bl	800211c <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d908      	bls.n	80024ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2203      	movs	r2, #3
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e078      	b.n	80025e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e8      	bne.n	80024ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_DMA_Init+0x158>)
 8002508:	4013      	ands	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f023 0307 	bic.w	r3, r3, #7
 800256e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	2b04      	cmp	r3, #4
 8002580:	d117      	bne.n	80025b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 faa5 	bl	8002ae4 <DMA_CheckFifoParam>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2240      	movs	r2, #64	@ 0x40
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025ae:	2301      	movs	r3, #1
 80025b0:	e016      	b.n	80025e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa5c 	bl	8002a78 <DMA_CalcBaseAndBitshift>
 80025c0:	4603      	mov	r3, r0
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	223f      	movs	r2, #63	@ 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	e010803f 	.word	0xe010803f

080025ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_DMA_Start_IT+0x26>
 800260e:	2302      	movs	r3, #2
 8002610:	e048      	b.n	80026a4 <HAL_DMA_Start_IT+0xb8>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d137      	bne.n	8002696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f9ee 	bl	8002a1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	223f      	movs	r2, #63	@ 0x3f
 8002646:	409a      	lsls	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0216 	orr.w	r2, r2, #22
 800265a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800266a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e005      	b.n	80026a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d004      	beq.n	80026ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2280      	movs	r2, #128	@ 0x80
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00c      	b.n	80026e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2205      	movs	r2, #5
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80026fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <HAL_DMA_IRQHandler+0x248>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8e      	ldr	r2, [pc, #568]	@ (800293c <HAL_DMA_IRQHandler+0x24c>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	2208      	movs	r2, #8
 800271c:	409a      	lsls	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01a      	beq.n	800275c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0204 	bic.w	r2, r2, #4
 8002742:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002748:	2208      	movs	r2, #8
 800274a:	409a      	lsls	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002760:	2201      	movs	r2, #1
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	2201      	movs	r2, #1
 8002780:	409a      	lsls	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00b      	beq.n	80027c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	2204      	movs	r2, #4
 80027b6:	409a      	lsls	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f043 0204 	orr.w	r2, r3, #4
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027cc:	2210      	movs	r2, #16
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d043      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03c      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	2210      	movs	r2, #16
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d018      	beq.n	8002832 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d108      	bne.n	8002820 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d024      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
 800281e:	e01f      	b.n	8002860 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e016      	b.n	8002860 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0208 	bic.w	r2, r2, #8
 800284e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	2220      	movs	r2, #32
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 808f 	beq.w	8002990 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8087 	beq.w	8002990 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002886:	2220      	movs	r2, #32
 8002888:	409a      	lsls	r2, r3
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b05      	cmp	r3, #5
 8002898:	d136      	bne.n	8002908 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0216 	bic.w	r2, r2, #22
 80028a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d103      	bne.n	80028ca <HAL_DMA_IRQHandler+0x1da>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0208 	bic.w	r2, r2, #8
 80028d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	223f      	movs	r2, #63	@ 0x3f
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d07e      	beq.n	80029fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
        }
        return;
 8002906:	e079      	b.n	80029fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01d      	beq.n	8002952 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002928:	2b00      	cmp	r3, #0
 800292a:	d031      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e02c      	b.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000
 800293c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d023      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e01e      	b.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10f      	bne.n	8002980 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0210 	bic.w	r2, r2, #16
 800296e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	2b00      	cmp	r3, #0
 8002996:	d032      	beq.n	80029fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2205      	movs	r2, #5
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3301      	adds	r3, #1
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d307      	bcc.n	80029d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f2      	bne.n	80029bc <HAL_DMA_IRQHandler+0x2cc>
 80029d6:	e000      	b.n	80029da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
 80029fa:	e000      	b.n	80029fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80029fc:	bf00      	nop
    }
  }
}
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b40      	cmp	r3, #64	@ 0x40
 8002a48:	d108      	bne.n	8002a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a5a:	e007      	b.n	8002a6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	60da      	str	r2, [r3, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3b10      	subs	r3, #16
 8002a88:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <DMA_CalcBaseAndBitshift+0x60>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a92:	4a12      	ldr	r2, [pc, #72]	@ (8002adc <DMA_CalcBaseAndBitshift+0x64>)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d908      	bls.n	8002ab8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	1d1a      	adds	r2, r3, #4
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ab6:	e006      	b.n	8002ac6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b08      	ldr	r3, [pc, #32]	@ (8002ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	aaaaaaab 	.word	0xaaaaaaab
 8002adc:	0800bed8 	.word	0x0800bed8
 8002ae0:	fffffc00 	.word	0xfffffc00

08002ae4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11f      	bne.n	8002b3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d856      	bhi.n	8002bb2 <DMA_CheckFifoParam+0xce>
 8002b04:	a201      	add	r2, pc, #4	@ (adr r2, 8002b0c <DMA_CheckFifoParam+0x28>)
 8002b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0a:	bf00      	nop
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b2f 	.word	0x08002b2f
 8002b14:	08002b1d 	.word	0x08002b1d
 8002b18:	08002bb3 	.word	0x08002bb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d046      	beq.n	8002bb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e043      	b.n	8002bb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b36:	d140      	bne.n	8002bba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e03d      	b.n	8002bba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b46:	d121      	bne.n	8002b8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d837      	bhi.n	8002bbe <DMA_CheckFifoParam+0xda>
 8002b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b54 <DMA_CheckFifoParam+0x70>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b6b 	.word	0x08002b6b
 8002b5c:	08002b65 	.word	0x08002b65
 8002b60:	08002b7d 	.word	0x08002b7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e030      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d025      	beq.n	8002bc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7a:	e022      	b.n	8002bc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b84:	d11f      	bne.n	8002bc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b8a:	e01c      	b.n	8002bc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d903      	bls.n	8002b9a <DMA_CheckFifoParam+0xb6>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d003      	beq.n	8002ba0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b98:	e018      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b9e:	e015      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb0:	e00b      	b.n	8002bca <DMA_CheckFifoParam+0xe6>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e00a      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e008      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e006      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e004      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e002      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      break;   
 8002bc6:	bf00      	nop
 8002bc8:	e000      	b.n	8002bcc <DMA_CheckFifoParam+0xe8>
      break;
 8002bca:	bf00      	nop
    }
  } 
  
  return status; 
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop

08002bdc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bee:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <HAL_FLASH_Program+0xb0>)
 8002bf0:	7d1b      	ldrb	r3, [r3, #20]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_FLASH_Program+0x1e>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e043      	b.n	8002c82 <HAL_FLASH_Program+0xa6>
 8002bfa:	4b24      	ldr	r3, [pc, #144]	@ (8002c8c <HAL_FLASH_Program+0xb0>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c00:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c04:	f000 f878 	bl	8002cf8 <FLASH_WaitForLastOperation>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d133      	bne.n	8002c7a <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d823      	bhi.n	8002c60 <HAL_FLASH_Program+0x84>
 8002c18:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <HAL_FLASH_Program+0x44>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c3d 	.word	0x08002c3d
 8002c28:	08002c49 	.word	0x08002c49
 8002c2c:	08002c55 	.word	0x08002c55
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002c30:	783b      	ldrb	r3, [r7, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	f000 f921 	bl	8002e7c <FLASH_Program_Byte>
        break;
 8002c3a:	e012      	b.n	8002c62 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002c3c:	883b      	ldrh	r3, [r7, #0]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f000 f8f5 	bl	8002e30 <FLASH_Program_HalfWord>
        break;
 8002c46:	e00c      	b.n	8002c62 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	68b8      	ldr	r0, [r7, #8]
 8002c4e:	f000 f8c9 	bl	8002de4 <FLASH_Program_Word>
        break;
 8002c52:	e006      	b.n	8002c62 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c58:	68b8      	ldr	r0, [r7, #8]
 8002c5a:	f000 f88d 	bl	8002d78 <FLASH_Program_DoubleWord>
        break;
 8002c5e:	e000      	b.n	8002c62 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002c60:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c62:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c66:	f000 f847 	bl	8002cf8 <FLASH_WaitForLastOperation>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <HAL_FLASH_Program+0xb4>)
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <HAL_FLASH_Program+0xb4>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c7a:	4b04      	ldr	r3, [pc, #16]	@ (8002c8c <HAL_FLASH_Program+0xb0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	751a      	strb	r2, [r3, #20]

  return status;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200002c0 	.word	0x200002c0
 8002c90:	40023c00 	.word	0x40023c00

08002c94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_FLASH_Unlock+0x38>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da0b      	bge.n	8002cbe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <HAL_FLASH_Unlock+0x38>)
 8002ca8:	4a09      	ldr	r2, [pc, #36]	@ (8002cd0 <HAL_FLASH_Unlock+0x3c>)
 8002caa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002cac:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_FLASH_Unlock+0x38>)
 8002cae:	4a09      	ldr	r2, [pc, #36]	@ (8002cd4 <HAL_FLASH_Unlock+0x40>)
 8002cb0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_FLASH_Unlock+0x38>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da01      	bge.n	8002cbe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40023c00 	.word	0x40023c00
 8002cd0:	45670123 	.word	0x45670123
 8002cd4:	cdef89ab 	.word	0xcdef89ab

08002cd8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_FLASH_Lock+0x1c>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <HAL_FLASH_Lock+0x1c>)
 8002ce2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ce6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40023c00 	.word	0x40023c00

08002cf8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <FLASH_WaitForLastOperation+0x78>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d0a:	f7ff fa07 	bl	800211c <HAL_GetTick>
 8002d0e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d10:	e010      	b.n	8002d34 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d00c      	beq.n	8002d34 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <FLASH_WaitForLastOperation+0x38>
 8002d20:	f7ff f9fc 	bl	800211c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d201      	bcs.n	8002d34 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e019      	b.n	8002d68 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <FLASH_WaitForLastOperation+0x7c>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e8      	bne.n	8002d12 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <FLASH_WaitForLastOperation+0x7c>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d4c:	f000 f8ba 	bl	8002ec4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e009      	b.n	8002d68 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002d54:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <FLASH_WaitForLastOperation+0x7c>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <FLASH_WaitForLastOperation+0x7c>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
  
}  
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200002c0 	.word	0x200002c0
 8002d74:	40023c00 	.word	0x40023c00

08002d78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002d84:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <FLASH_Program_DoubleWord+0x68>)
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	4a15      	ldr	r2, [pc, #84]	@ (8002de0 <FLASH_Program_DoubleWord+0x68>)
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002d90:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <FLASH_Program_DoubleWord+0x68>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	4a12      	ldr	r2, [pc, #72]	@ (8002de0 <FLASH_Program_DoubleWord+0x68>)
 8002d96:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d9c:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <FLASH_Program_DoubleWord+0x68>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	4a0f      	ldr	r2, [pc, #60]	@ (8002de0 <FLASH_Program_DoubleWord+0x68>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002dae:	f3bf 8f6f 	isb	sy
}
 8002db2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	000a      	movs	r2, r1
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	68f9      	ldr	r1, [r7, #12]
 8002dc6:	3104      	adds	r1, #4
 8002dc8:	4613      	mov	r3, r2
 8002dca:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dcc:	f3bf 8f4f 	dsb	sy
}
 8002dd0:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002dee:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <FLASH_Program_Word+0x48>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	@ (8002e2c <FLASH_Program_Word+0x48>)
 8002df4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <FLASH_Program_Word+0x48>)
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002e2c <FLASH_Program_Word+0x48>)
 8002e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <FLASH_Program_Word+0x48>)
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	4a08      	ldr	r2, [pc, #32]	@ (8002e2c <FLASH_Program_Word+0x48>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e18:	f3bf 8f4f 	dsb	sy
}
 8002e1c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <FLASH_Program_HalfWord+0x48>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <FLASH_Program_HalfWord+0x48>)
 8002e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <FLASH_Program_HalfWord+0x48>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <FLASH_Program_HalfWord+0x48>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e54:	4b08      	ldr	r3, [pc, #32]	@ (8002e78 <FLASH_Program_HalfWord+0x48>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4a07      	ldr	r2, [pc, #28]	@ (8002e78 <FLASH_Program_HalfWord+0x48>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e66:	f3bf 8f4f 	dsb	sy
}
 8002e6a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40023c00 	.word	0x40023c00

08002e7c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e88:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec0 <FLASH_Program_Byte+0x44>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec0 <FLASH_Program_Byte+0x44>)
 8002e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <FLASH_Program_Byte+0x44>)
 8002e96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec0 <FLASH_Program_Byte+0x44>)
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <FLASH_Program_Byte+0x44>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <FLASH_Program_Byte+0x44>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002eae:	f3bf 8f4f 	dsb	sy
}
 8002eb2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002ec8:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <FLASH_SetErrorCode+0x8c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f043 0320 	orr.w	r3, r3, #32
 8002edc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002ede:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <FLASH_SetErrorCode+0x8c>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002eec:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002ef6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002ef8:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <FLASH_SetErrorCode+0x8c>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f04:	4b13      	ldr	r3, [pc, #76]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	4a11      	ldr	r2, [pc, #68]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002f0e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <FLASH_SetErrorCode+0x8c>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	4a0b      	ldr	r2, [pc, #44]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002f26:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <FLASH_SetErrorCode+0x8c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002f34:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	4a05      	ldr	r2, [pc, #20]	@ (8002f54 <FLASH_SetErrorCode+0x90>)
 8002f3e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <FLASH_SetErrorCode+0x8c>)
 8002f42:	22f2      	movs	r2, #242	@ 0xf2
 8002f44:	60da      	str	r2, [r3, #12]
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	200002c0 	.word	0x200002c0

08002f58 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f6a:	4b30      	ldr	r3, [pc, #192]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 8002f6c:	7d1b      	ldrb	r3, [r3, #20]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_FLASHEx_Erase+0x1e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e056      	b.n	8003024 <HAL_FLASHEx_Erase+0xcc>
 8002f76:	4b2d      	ldr	r3, [pc, #180]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f80:	f7ff feba 	bl	8002cf8 <FLASH_WaitForLastOperation>
 8002f84:	4603      	mov	r3, r0
 8002f86:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d146      	bne.n	800301c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d115      	bne.n	8002fca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 f844 	bl	8003038 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fb0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fb4:	f7ff fea0 	bl	8002cf8 <FLASH_WaitForLastOperation>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003030 <HAL_FLASHEx_Erase+0xd8>)
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	491b      	ldr	r1, [pc, #108]	@ (8003030 <HAL_FLASHEx_Erase+0xd8>)
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <HAL_FLASHEx_Erase+0xdc>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	610b      	str	r3, [r1, #16]
 8002fc8:	e028      	b.n	800301c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	e01c      	b.n	800300c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	68b8      	ldr	r0, [r7, #8]
 8002fdc:	f000 f868 	bl	80030b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fe0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fe4:	f7ff fe88 	bl	8002cf8 <FLASH_WaitForLastOperation>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002fec:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <HAL_FLASHEx_Erase+0xd8>)
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8003030 <HAL_FLASHEx_Erase+0xd8>)
 8002ff2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002ff6:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	601a      	str	r2, [r3, #0]
          break;
 8003004:	e00a      	b.n	800301c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4413      	add	r3, r2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d3da      	bcc.n	8002fd2 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <HAL_FLASHEx_Erase+0xd4>)
 800301e:	2200      	movs	r2, #0
 8003020:	751a      	strb	r2, [r3, #20]

  return status;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	200002c0 	.word	0x200002c0
 8003030:	40023c00 	.word	0x40023c00
 8003034:	ffff7ffb 	.word	0xffff7ffb

08003038 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8003044:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <FLASH_MassErase+0x74>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <FLASH_MassErase+0x74>)
 800304a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800304e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d107      	bne.n	8003066 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <FLASH_MassErase+0x74>)
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	4914      	ldr	r1, [pc, #80]	@ (80030ac <FLASH_MassErase+0x74>)
 800305c:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003060:	4313      	orrs	r3, r2
 8003062:	610b      	str	r3, [r1, #16]
 8003064:	e00f      	b.n	8003086 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d106      	bne.n	800307a <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <FLASH_MassErase+0x74>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4a0e      	ldr	r2, [pc, #56]	@ (80030ac <FLASH_MassErase+0x74>)
 8003072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003076:	6113      	str	r3, [r2, #16]
 8003078:	e005      	b.n	8003086 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800307a:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <FLASH_MassErase+0x74>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4a0b      	ldr	r2, [pc, #44]	@ (80030ac <FLASH_MassErase+0x74>)
 8003080:	f043 0304 	orr.w	r3, r3, #4
 8003084:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <FLASH_MassErase+0x74>)
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4313      	orrs	r3, r2
 8003090:	4a06      	ldr	r2, [pc, #24]	@ (80030ac <FLASH_MassErase+0x74>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003096:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003098:	f3bf 8f4f 	dsb	sy
}
 800309c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00

080030b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e010      	b.n	80030ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d103      	bne.n	80030da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80030d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e009      	b.n	80030ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d103      	bne.n	80030e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80030e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e002      	b.n	80030ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80030e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030ec:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0b      	cmp	r3, #11
 80030f2:	d902      	bls.n	80030fa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3304      	adds	r3, #4
 80030f8:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4a14      	ldr	r2, [pc, #80]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003104:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003106:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	4911      	ldr	r1, [pc, #68]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003112:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003118:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800311c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4313      	orrs	r3, r2
 8003128:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 800312a:	f043 0302 	orr.w	r3, r3, #2
 800312e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003130:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4a06      	ldr	r2, [pc, #24]	@ (8003150 <FLASH_Erase_Sector+0xa0>)
 8003136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800313c:	f3bf 8f4f 	dsb	sy
}
 8003140:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023c00 	.word	0x40023c00

08003154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003154:	b480      	push	{r7}
 8003156:	b089      	sub	sp, #36	@ 0x24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e175      	b.n	8003460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 8164 	bne.w	800345a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d005      	beq.n	80031aa <HAL_GPIO_Init+0x56>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d130      	bne.n	800320c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e0:	2201      	movs	r2, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0201 	and.w	r2, r3, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b03      	cmp	r3, #3
 8003216:	d017      	beq.n	8003248 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	69b9      	ldr	r1, [r7, #24]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80be 	beq.w	800345a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	4b66      	ldr	r3, [pc, #408]	@ (8003478 <HAL_GPIO_Init+0x324>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	4a65      	ldr	r2, [pc, #404]	@ (8003478 <HAL_GPIO_Init+0x324>)
 80032e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ea:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <HAL_GPIO_Init+0x324>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032f6:	4a61      	ldr	r2, [pc, #388]	@ (800347c <HAL_GPIO_Init+0x328>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a58      	ldr	r2, [pc, #352]	@ (8003480 <HAL_GPIO_Init+0x32c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d037      	beq.n	8003392 <HAL_GPIO_Init+0x23e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a57      	ldr	r2, [pc, #348]	@ (8003484 <HAL_GPIO_Init+0x330>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_GPIO_Init+0x23a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a56      	ldr	r2, [pc, #344]	@ (8003488 <HAL_GPIO_Init+0x334>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x236>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a55      	ldr	r2, [pc, #340]	@ (800348c <HAL_GPIO_Init+0x338>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x232>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a54      	ldr	r2, [pc, #336]	@ (8003490 <HAL_GPIO_Init+0x33c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x22e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a53      	ldr	r2, [pc, #332]	@ (8003494 <HAL_GPIO_Init+0x340>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x22a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a52      	ldr	r2, [pc, #328]	@ (8003498 <HAL_GPIO_Init+0x344>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x226>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a51      	ldr	r2, [pc, #324]	@ (800349c <HAL_GPIO_Init+0x348>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x222>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a50      	ldr	r2, [pc, #320]	@ (80034a0 <HAL_GPIO_Init+0x34c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x21e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4f      	ldr	r2, [pc, #316]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x21a>
 800336a:	2309      	movs	r3, #9
 800336c:	e012      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800336e:	230a      	movs	r3, #10
 8003370:	e010      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003372:	2308      	movs	r3, #8
 8003374:	e00e      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003376:	2307      	movs	r3, #7
 8003378:	e00c      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800337a:	2306      	movs	r3, #6
 800337c:	e00a      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800337e:	2305      	movs	r3, #5
 8003380:	e008      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003382:	2304      	movs	r3, #4
 8003384:	e006      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003386:	2303      	movs	r3, #3
 8003388:	e004      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800338a:	2302      	movs	r3, #2
 800338c:	e002      	b.n	8003394 <HAL_GPIO_Init+0x240>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_GPIO_Init+0x240>
 8003392:	2300      	movs	r3, #0
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	f002 0203 	and.w	r2, r2, #3
 800339a:	0092      	lsls	r2, r2, #2
 800339c:	4093      	lsls	r3, r2
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033a4:	4935      	ldr	r1, [pc, #212]	@ (800347c <HAL_GPIO_Init+0x328>)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	089b      	lsrs	r3, r3, #2
 80033aa:	3302      	adds	r3, #2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033b2:	4b3d      	ldr	r3, [pc, #244]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d6:	4a34      	ldr	r2, [pc, #208]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033dc:	4b32      	ldr	r3, [pc, #200]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003400:	4a29      	ldr	r2, [pc, #164]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800342a:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003430:	4b1d      	ldr	r3, [pc, #116]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003454:	4a14      	ldr	r2, [pc, #80]	@ (80034a8 <HAL_GPIO_Init+0x354>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3301      	adds	r3, #1
 800345e:	61fb      	str	r3, [r7, #28]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b0f      	cmp	r3, #15
 8003464:	f67f ae86 	bls.w	8003174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	3724      	adds	r7, #36	@ 0x24
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40013800 	.word	0x40013800
 8003480:	40020000 	.word	0x40020000
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	40021000 	.word	0x40021000
 8003494:	40021400 	.word	0x40021400
 8003498:	40021800 	.word	0x40021800
 800349c:	40021c00 	.word	0x40021c00
 80034a0:	40022000 	.word	0x40022000
 80034a4:	40022400 	.word	0x40022400
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034c8:	e003      	b.n	80034d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	041a      	lsls	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b23      	ldr	r3, [pc, #140]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	@ 0x40
 8003516:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352e:	f7fe fdf5 	bl	800211c <HAL_GetTick>
 8003532:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003534:	e009      	b.n	800354a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003536:	f7fe fdf1 	bl	800211c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003544:	d901      	bls.n	800354a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e022      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800354a:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003556:	d1ee      	bne.n	8003536 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003558:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800355e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003562:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7fe fdda 	bl	800211c <HAL_GetTick>
 8003568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356a:	e009      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800356c:	f7fe fdd6 	bl	800211c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800358c:	d1ee      	bne.n	800356c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e29b      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8087 	beq.w	80036d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c4:	4b96      	ldr	r3, [pc, #600]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00c      	beq.n	80035ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d0:	4b93      	ldr	r3, [pc, #588]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x62>
 80035dc:	4b90      	ldr	r3, [pc, #576]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d06c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x130>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d168      	bne.n	80036d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e275      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x7a>
 800360c:	4b84      	ldr	r3, [pc, #528]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e02e      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x9c>
 8003622:	4b7f      	ldr	r3, [pc, #508]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7e      	ldr	r2, [pc, #504]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b7c      	ldr	r3, [pc, #496]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7b      	ldr	r2, [pc, #492]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003634:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e01d      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0xc0>
 8003646:	4b76      	ldr	r3, [pc, #472]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a75      	ldr	r2, [pc, #468]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b73      	ldr	r3, [pc, #460]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a72      	ldr	r2, [pc, #456]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 8003660:	4b6f      	ldr	r3, [pc, #444]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6e      	ldr	r2, [pc, #440]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b6c      	ldr	r3, [pc, #432]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6b      	ldr	r2, [pc, #428]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fd4c 	bl	800211c <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fd48 	bl	800211c <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e229      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fd38 	bl	800211c <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe fd34 	bl	800211c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	@ 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e215      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	4b57      	ldr	r3, [pc, #348]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x110>
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d069      	beq.n	80037b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036de:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11c      	bne.n	8003730 <HAL_RCC_OscConfig+0x190>
 80036f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	4b47      	ldr	r3, [pc, #284]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RCC_OscConfig+0x17a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e1e9      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	493d      	ldr	r1, [pc, #244]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	e040      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003738:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a38      	ldr	r2, [pc, #224]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fcea 	bl	800211c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fce6 	bl	800211c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1c7      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b2d      	ldr	r3, [pc, #180]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4929      	ldr	r1, [pc, #164]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
 800377e:	e018      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003780:	4b27      	ldr	r3, [pc, #156]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a26      	ldr	r2, [pc, #152]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fcc6 	bl	800211c <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe fcc2 	bl	800211c <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1a3      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d038      	beq.n	8003830 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ca:	4a15      	ldr	r2, [pc, #84]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe fca3 	bl	800211c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe fc9f 	bl	800211c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e180      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x23a>
 80037f8:	e01a      	b.n	8003830 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fa:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fe:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fc89 	bl	800211c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe fc85 	bl	800211c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d903      	bls.n	8003824 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e166      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
 8003820:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b92      	ldr	r3, [pc, #584]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ee      	bne.n	800380e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a4 	beq.w	8003986 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b8c      	ldr	r3, [pc, #560]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b89      	ldr	r3, [pc, #548]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	4a88      	ldr	r2, [pc, #544]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	@ 0x40
 8003856:	4b86      	ldr	r3, [pc, #536]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b83      	ldr	r3, [pc, #524]	@ (8003a74 <HAL_RCC_OscConfig+0x4d4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003872:	4b80      	ldr	r3, [pc, #512]	@ (8003a74 <HAL_RCC_OscConfig+0x4d4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7f      	ldr	r2, [pc, #508]	@ (8003a74 <HAL_RCC_OscConfig+0x4d4>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fe fc4d 	bl	800211c <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe fc49 	bl	800211c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	@ 0x64
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e12a      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003898:	4b76      	ldr	r3, [pc, #472]	@ (8003a74 <HAL_RCC_OscConfig+0x4d4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x31a>
 80038ac:	4b70      	ldr	r3, [pc, #448]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	e02d      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x33c>
 80038c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ce:	4b68      	ldr	r3, [pc, #416]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a67      	ldr	r2, [pc, #412]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	e01c      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d10c      	bne.n	80038fe <HAL_RCC_OscConfig+0x35e>
 80038e4:	4b62      	ldr	r3, [pc, #392]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a61      	ldr	r2, [pc, #388]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f4:	4a5e      	ldr	r2, [pc, #376]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fc:	e00b      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	4a5b      	ldr	r2, [pc, #364]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	@ 0x70
 800390a:	4b59      	ldr	r3, [pc, #356]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	4a58      	ldr	r2, [pc, #352]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d015      	beq.n	800394a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fe fbfd 	bl	800211c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe fbf9 	bl	800211c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0d8      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ee      	beq.n	8003926 <HAL_RCC_OscConfig+0x386>
 8003948:	e014      	b.n	8003974 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fe fbe7 	bl	800211c <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fe fbe3 	bl	800211c <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0c2      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003968:	4b41      	ldr	r3, [pc, #260]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ee      	bne.n	8003952 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80ae 	beq.w	8003aec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003990:	4b37      	ldr	r3, [pc, #220]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d06d      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d14b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b32      	ldr	r3, [pc, #200]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a31      	ldr	r2, [pc, #196]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80039aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fbb4 	bl	800211c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe fbb0 	bl	800211c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e091      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a00:	071b      	lsls	r3, r3, #28
 8003a02:	491b      	ldr	r1, [pc, #108]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b19      	ldr	r3, [pc, #100]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a18      	ldr	r2, [pc, #96]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe fb82 	bl	800211c <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fe fb7e 	bl	800211c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e05f      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	4b10      	ldr	r3, [pc, #64]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x47c>
 8003a3a:	e057      	b.n	8003aec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0b      	ldr	r2, [pc, #44]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fb68 	bl	800211c <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe fb64 	bl	800211c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e045      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b03      	ldr	r3, [pc, #12]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x4b0>
 8003a6e:	e03d      	b.n	8003aec <HAL_RCC_OscConfig+0x54c>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a78:	4b1f      	ldr	r3, [pc, #124]	@ (8003af8 <HAL_RCC_OscConfig+0x558>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d030      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d129      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d122      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d119      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0d0      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b14:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d910      	bls.n	8003b44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b67      	ldr	r3, [pc, #412]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4965      	ldr	r1, [pc, #404]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b63      	ldr	r3, [pc, #396]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0b8      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d020      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b5c:	4b59      	ldr	r3, [pc, #356]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	4a58      	ldr	r2, [pc, #352]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d005      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b74:	4b53      	ldr	r3, [pc, #332]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a52      	ldr	r2, [pc, #328]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b80:	4b50      	ldr	r3, [pc, #320]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	494d      	ldr	r1, [pc, #308]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d040      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d107      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	4b47      	ldr	r3, [pc, #284]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d115      	bne.n	8003bde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e07f      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d107      	bne.n	8003bce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	4b41      	ldr	r3, [pc, #260]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e073      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bce:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b39      	ldr	r3, [pc, #228]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4936      	ldr	r1, [pc, #216]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fe fa94 	bl	800211c <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fe fa90 	bl	800211c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e053      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c20:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d210      	bcs.n	8003c50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 020f 	bic.w	r2, r3, #15
 8003c36:	4922      	ldr	r1, [pc, #136]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b20      	ldr	r3, [pc, #128]	@ (8003cc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e032      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c5c:	4b19      	ldr	r3, [pc, #100]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4916      	ldr	r1, [pc, #88]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c7a:	4b12      	ldr	r3, [pc, #72]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	490e      	ldr	r1, [pc, #56]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c8e:	f000 f821 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8003c92:	4602      	mov	r2, r0
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	490a      	ldr	r1, [pc, #40]	@ (8003cc8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ca0:	5ccb      	ldrb	r3, [r1, r3]
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	4a09      	ldr	r2, [pc, #36]	@ (8003ccc <HAL_RCC_ClockConfig+0x1d0>)
 8003ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003caa:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <HAL_RCC_ClockConfig+0x1d4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fe f9f0 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023c00 	.word	0x40023c00
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	0800bec0 	.word	0x0800bec0
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20000004 	.word	0x20000004

08003cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd8:	b094      	sub	sp, #80	@ 0x50
 8003cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cec:	4b79      	ldr	r3, [pc, #484]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d00d      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x40>
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	f200 80e1 	bhi.w	8003ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <HAL_RCC_GetSysClockFreq+0x34>
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d003      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d06:	e0db      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d08:	4b73      	ldr	r3, [pc, #460]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d0c:	e0db      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d0e:	4b73      	ldr	r3, [pc, #460]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x208>)
 8003d10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d12:	e0d8      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d14:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d063      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	099b      	lsrs	r3, r3, #6
 8003d30:	2200      	movs	r2, #0
 8003d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d3e:	2300      	movs	r3, #0
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	f04f 0000 	mov.w	r0, #0
 8003d4e:	f04f 0100 	mov.w	r1, #0
 8003d52:	0159      	lsls	r1, r3, #5
 8003d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d58:	0150      	lsls	r0, r2, #5
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4621      	mov	r1, r4
 8003d60:	1a51      	subs	r1, r2, r1
 8003d62:	6139      	str	r1, [r7, #16]
 8003d64:	4629      	mov	r1, r5
 8003d66:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d78:	4659      	mov	r1, fp
 8003d7a:	018b      	lsls	r3, r1, #6
 8003d7c:	4651      	mov	r1, sl
 8003d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d82:	4651      	mov	r1, sl
 8003d84:	018a      	lsls	r2, r1, #6
 8003d86:	4651      	mov	r1, sl
 8003d88:	ebb2 0801 	subs.w	r8, r2, r1
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003da6:	4690      	mov	r8, r2
 8003da8:	4699      	mov	r9, r3
 8003daa:	4623      	mov	r3, r4
 8003dac:	eb18 0303 	adds.w	r3, r8, r3
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	462b      	mov	r3, r5
 8003db4:	eb49 0303 	adc.w	r3, r9, r3
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	024b      	lsls	r3, r1, #9
 8003dca:	4621      	mov	r1, r4
 8003dcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	024a      	lsls	r2, r1, #9
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dda:	2200      	movs	r2, #0
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003de4:	f7fc fa7c 	bl	80002e0 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4613      	mov	r3, r2
 8003dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003df0:	e058      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b38      	ldr	r3, [pc, #224]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	2300      	movs	r3, #0
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	f04f 0000 	mov.w	r0, #0
 8003e14:	f04f 0100 	mov.w	r1, #0
 8003e18:	0159      	lsls	r1, r3, #5
 8003e1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e1e:	0150      	lsls	r0, r2, #5
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4641      	mov	r1, r8
 8003e26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e44:	ebb2 040a 	subs.w	r4, r2, sl
 8003e48:	eb63 050b 	sbc.w	r5, r3, fp
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	00eb      	lsls	r3, r5, #3
 8003e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e5a:	00e2      	lsls	r2, r4, #3
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	461d      	mov	r5, r3
 8003e60:	4643      	mov	r3, r8
 8003e62:	18e3      	adds	r3, r4, r3
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	464b      	mov	r3, r9
 8003e68:	eb45 0303 	adc.w	r3, r5, r3
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e7a:	4629      	mov	r1, r5
 8003e7c:	028b      	lsls	r3, r1, #10
 8003e7e:	4621      	mov	r1, r4
 8003e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e84:	4621      	mov	r1, r4
 8003e86:	028a      	lsls	r2, r1, #10
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	61fa      	str	r2, [r7, #28]
 8003e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e98:	f7fc fa22 	bl	80002e0 <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	0c1b      	lsrs	r3, r3, #16
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003eb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ebe:	e002      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3750      	adds	r7, #80	@ 0x50
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	00f42400 	.word	0x00f42400
 8003edc:	007a1200 	.word	0x007a1200

08003ee0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000000 	.word	0x20000000

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003efc:	f7ff fff0 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	@ (8003f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0a9b      	lsrs	r3, r3, #10
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	@ (8003f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40023800 	.word	0x40023800
 8003f1c:	0800bed0 	.word	0x0800bed0

08003f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f24:	f7ff ffdc 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	0b5b      	lsrs	r3, r3, #13
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	4903      	ldr	r1, [pc, #12]	@ (8003f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f36:	5ccb      	ldrb	r3, [r1, r3]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	0800bed0 	.word	0x0800bed0

08003f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d012      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f70:	4b69      	ldr	r3, [pc, #420]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a68      	ldr	r2, [pc, #416]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f7a:	6093      	str	r3, [r2, #8]
 8003f7c:	4b66      	ldr	r3, [pc, #408]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	4964      	ldr	r1, [pc, #400]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d017      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	4959      	ldr	r1, [pc, #356]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d017      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fde:	4b4e      	ldr	r3, [pc, #312]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fe4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	494a      	ldr	r1, [pc, #296]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ffc:	d101      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800400a:	2301      	movs	r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800401a:	2301      	movs	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 808b 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800402c:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	4a39      	ldr	r2, [pc, #228]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	@ 0x40
 8004038:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004044:	4b35      	ldr	r3, [pc, #212]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a34      	ldr	r2, [pc, #208]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004050:	f7fe f864 	bl	800211c <HAL_GetTick>
 8004054:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004056:	e008      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fe f860 	bl	800211c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	@ 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e38f      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800406a:	4b2c      	ldr	r3, [pc, #176]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004076:	4b28      	ldr	r3, [pc, #160]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800407e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d035      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	429a      	cmp	r2, r3
 8004092:	d02e      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004094:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800409e:	4b1e      	ldr	r3, [pc, #120]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80040b6:	4a18      	ldr	r2, [pc, #96]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040bc:	4b16      	ldr	r3, [pc, #88]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d114      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fe f828 	bl	800211c <HAL_GetTick>
 80040cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ce:	e00a      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d0:	f7fe f824 	bl	800211c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e351      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0ee      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040fe:	d111      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800410c:	4b04      	ldr	r3, [pc, #16]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800410e:	400b      	ands	r3, r1
 8004110:	4901      	ldr	r1, [pc, #4]	@ (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
 8004116:	e00b      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004118:	40023800 	.word	0x40023800
 800411c:	40007000 	.word	0x40007000
 8004120:	0ffffcff 	.word	0x0ffffcff
 8004124:	4bac      	ldr	r3, [pc, #688]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4aab      	ldr	r2, [pc, #684]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800412e:	6093      	str	r3, [r2, #8]
 8004130:	4ba9      	ldr	r3, [pc, #676]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004132:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413c:	49a6      	ldr	r1, [pc, #664]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	4313      	orrs	r3, r2
 8004140:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d010      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800414e:	4ba2      	ldr	r3, [pc, #648]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004150:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004154:	4aa0      	ldr	r2, [pc, #640]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800415a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800415e:	4b9e      	ldr	r3, [pc, #632]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	499b      	ldr	r1, [pc, #620]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800417c:	4b96      	ldr	r3, [pc, #600]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800418a:	4993      	ldr	r1, [pc, #588]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800419e:	4b8e      	ldr	r3, [pc, #568]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ac:	498a      	ldr	r1, [pc, #552]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041c0:	4b85      	ldr	r3, [pc, #532]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ce:	4982      	ldr	r1, [pc, #520]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041e2:	4b7d      	ldr	r3, [pc, #500]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f0:	4979      	ldr	r1, [pc, #484]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004204:	4b74      	ldr	r3, [pc, #464]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	f023 0203 	bic.w	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	4971      	ldr	r1, [pc, #452]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004226:	4b6c      	ldr	r3, [pc, #432]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	f023 020c 	bic.w	r2, r3, #12
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004234:	4968      	ldr	r1, [pc, #416]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004248:	4b63      	ldr	r3, [pc, #396]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	4960      	ldr	r1, [pc, #384]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800426a:	4b5b      	ldr	r3, [pc, #364]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004278:	4957      	ldr	r1, [pc, #348]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800428c:	4b52      	ldr	r3, [pc, #328]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	494f      	ldr	r1, [pc, #316]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80042ae:	4b4a      	ldr	r3, [pc, #296]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	4946      	ldr	r1, [pc, #280]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80042d0:	4b41      	ldr	r3, [pc, #260]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	493e      	ldr	r1, [pc, #248]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042f2:	4b39      	ldr	r3, [pc, #228]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004300:	4935      	ldr	r1, [pc, #212]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004314:	4b30      	ldr	r3, [pc, #192]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004322:	492d      	ldr	r1, [pc, #180]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d011      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004336:	4b28      	ldr	r3, [pc, #160]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004344:	4924      	ldr	r1, [pc, #144]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004354:	d101      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004356:	2301      	movs	r3, #1
 8004358:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004376:	4b18      	ldr	r3, [pc, #96]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004384:	4914      	ldr	r1, [pc, #80]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004398:	4b0f      	ldr	r3, [pc, #60]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a8:	490b      	ldr	r1, [pc, #44]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00f      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80043bc:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043cc:	4902      	ldr	r1, [pc, #8]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e8:	4b8a      	ldr	r3, [pc, #552]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	4986      	ldr	r1, [pc, #536]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800440c:	4b81      	ldr	r3, [pc, #516]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004412:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800441c:	497d      	ldr	r1, [pc, #500]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d006      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80d6 	beq.w	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004438:	4b76      	ldr	r3, [pc, #472]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a75      	ldr	r2, [pc, #468]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800443e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004444:	f7fd fe6a 	bl	800211c <HAL_GetTick>
 8004448:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800444c:	f7fd fe66 	bl	800211c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	@ 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e195      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800445e:	4b6d      	ldr	r3, [pc, #436]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d021      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11d      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800447e:	4b65      	ldr	r3, [pc, #404]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004484:	0c1b      	lsrs	r3, r3, #16
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800448c:	4b61      	ldr	r3, [pc, #388]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004492:	0e1b      	lsrs	r3, r3, #24
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	019a      	lsls	r2, r3, #6
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	4958      	ldr	r1, [pc, #352]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d004      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044ce:	d00a      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e4:	d129      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80044e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044f4:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fa:	0f1b      	lsrs	r3, r3, #28
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	019a      	lsls	r2, r3, #6
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	071b      	lsls	r3, r3, #28
 800451a:	493e      	ldr	r1, [pc, #248]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004522:	4b3c      	ldr	r3, [pc, #240]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004528:	f023 021f 	bic.w	r2, r3, #31
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	3b01      	subs	r3, #1
 8004532:	4938      	ldr	r1, [pc, #224]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01d      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004546:	4b33      	ldr	r3, [pc, #204]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454c:	0e1b      	lsrs	r3, r3, #24
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004554:	4b2f      	ldr	r3, [pc, #188]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800455a:	0f1b      	lsrs	r3, r3, #28
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	019a      	lsls	r2, r3, #6
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	061b      	lsls	r3, r3, #24
 8004574:	431a      	orrs	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	4926      	ldr	r1, [pc, #152]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d011      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	019a      	lsls	r2, r3, #6
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	491a      	ldr	r1, [pc, #104]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045b2:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a17      	ldr	r2, [pc, #92]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045be:	f7fd fdad 	bl	800211c <HAL_GetTick>
 80045c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045c6:	f7fd fda9 	bl	800211c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	@ 0x64
 80045d2:	d901      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0d8      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	f040 80ce 	bne.w	8004788 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045ec:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fd fd90 	bl	800211c <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045fe:	e00b      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004600:	f7fd fd8c 	bl	800211c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d904      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0bb      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004618:	4b5e      	ldr	r3, [pc, #376]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004624:	d0ec      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02e      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d12a      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800464e:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800465c:	4b4d      	ldr	r3, [pc, #308]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004662:	0f1b      	lsrs	r3, r3, #28
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	019a      	lsls	r2, r3, #6
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	071b      	lsls	r3, r3, #28
 8004682:	4944      	ldr	r1, [pc, #272]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800468a:	4b42      	ldr	r3, [pc, #264]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004690:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	493d      	ldr	r1, [pc, #244]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d022      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046b8:	d11d      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046ba:	4b36      	ldr	r3, [pc, #216]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c0:	0e1b      	lsrs	r3, r3, #24
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80046c8:	4b32      	ldr	r3, [pc, #200]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	0f1b      	lsrs	r3, r3, #28
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	019a      	lsls	r2, r3, #6
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	071b      	lsls	r3, r3, #28
 80046ee:	4929      	ldr	r1, [pc, #164]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d028      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004708:	0e1b      	lsrs	r3, r3, #24
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	019a      	lsls	r2, r3, #6
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	431a      	orrs	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	071b      	lsls	r3, r3, #28
 8004736:	4917      	ldr	r1, [pc, #92]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004740:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004744:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	4911      	ldr	r1, [pc, #68]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0e      	ldr	r2, [pc, #56]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004760:	f7fd fcdc 	bl	800211c <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004768:	f7fd fcd8 	bl	800211c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	@ 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e007      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004786:	d1ef      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3720      	adds	r7, #32
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e01c      	b.n	80047e4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	795b      	ldrb	r3, [r3, #5]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd f9b8 	bl	8001b30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0204 	orr.w	r2, r2, #4
 80047d4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e022      	b.n	8004844 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d105      	bne.n	8004816 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fd f9ad 	bl	8001b70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2203      	movs	r2, #3
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f814 	bl	800484c <HAL_SD_InitCard>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e00a      	b.n	8004844 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800484c:	b5b0      	push	{r4, r5, r7, lr}
 800484e:	b08e      	sub	sp, #56	@ 0x38
 8004850:	af04      	add	r7, sp, #16
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004864:	2300      	movs	r3, #0
 8004866:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004868:	2376      	movs	r3, #118	@ 0x76
 800486a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681d      	ldr	r5, [r3, #0]
 8004870:	466c      	mov	r4, sp
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800487a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004884:	4628      	mov	r0, r5
 8004886:	f001 fe31 	bl	80064ec <SDMMC_Init>
 800488a:	4603      	mov	r3, r0
 800488c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e059      	b.n	8004950 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048aa:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 fe65 	bl	8006580 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80048c6:	2002      	movs	r0, #2
 80048c8:	f7fd fc34 	bl	8002134 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 ff59 	bl	8005784 <SD_PowerON>
 80048d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e02e      	b.n	8004950 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fe78 	bl	80055e8 <SD_InitCard>
 80048f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e01b      	b.n	8004950 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004920:	4618      	mov	r0, r3
 8004922:	f001 febf 	bl	80066a4 <SDMMC_CmdBlockLength>
 8004926:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00f      	beq.n	800494e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a09      	ldr	r2, [pc, #36]	@ (8004958 <HAL_SD_InitCard+0x10c>)
 8004934:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bdb0      	pop	{r4, r5, r7, pc}
 8004958:	004005ff 	.word	0x004005ff

0800495c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	@ 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d107      	bne.n	8004984 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004978:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0c3      	b.n	8004b0c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	f040 80bc 	bne.w	8004b0a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	441a      	add	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d907      	bls.n	80049b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e0aa      	b.n	8004b0c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2203      	movs	r2, #3
 80049ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2200      	movs	r2, #0
 80049c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80049d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	4a4e      	ldr	r2, [pc, #312]	@ (8004b14 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004b18 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80049e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	2200      	movs	r2, #0
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3380      	adds	r3, #128	@ 0x80
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	025b      	lsls	r3, r3, #9
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	f7fd fde1 	bl	80025ec <HAL_DMA_Start_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d017      	beq.n	8004a60 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a35      	ldr	r2, [pc, #212]	@ (8004b1c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e055      	b.n	8004b0c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0208 	orr.w	r2, r2, #8
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d002      	beq.n	8004a7e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	025b      	lsls	r3, r3, #9
 8004a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a82:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	025b      	lsls	r3, r3, #9
 8004a88:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004a8a:	2390      	movs	r3, #144	@ 0x90
 8004a8c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a8e:	2302      	movs	r3, #2
 8004a90:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f107 0210 	add.w	r2, r7, #16
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fdd1 	bl	800664c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d90a      	bls.n	8004ac6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2282      	movs	r2, #130	@ 0x82
 8004ab4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fe35 	bl	800672c <SDMMC_CmdReadMultiBlock>
 8004ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004ac4:	e009      	b.n	8004ada <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2281      	movs	r2, #129	@ 0x81
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fe08 	bl	80066e8 <SDMMC_CmdReadSingleBlock>
 8004ad8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d012      	beq.n	8004b06 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b1c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	431a      	orrs	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e002      	b.n	8004b0c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3730      	adds	r7, #48	@ 0x30
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	080053f7 	.word	0x080053f7
 8004b18:	08005469 	.word	0x08005469
 8004b1c:	004005ff 	.word	0x004005ff

08004b20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08c      	sub	sp, #48	@ 0x30
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0c6      	b.n	8004cd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	f040 80bf 	bne.w	8004cd4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d907      	bls.n	8004b7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e0ad      	b.n	8004cd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 021a 	orr.w	r2, r2, #26
 8004b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9e:	4a50      	ldr	r2, [pc, #320]	@ (8004ce0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8004ce4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004ba8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bae:	2200      	movs	r2, #0
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	025b      	lsls	r3, r3, #9
 8004bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d90a      	bls.n	8004bdc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	22a0      	movs	r2, #160	@ 0xa0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fdee 	bl	80067b4 <SDMMC_CmdWriteMultiBlock>
 8004bd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004bda:	e009      	b.n	8004bf0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2290      	movs	r2, #144	@ 0x90
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 fdc1 	bl	8006770 <SDMMC_CmdWriteSingleBlock>
 8004bee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8004ce8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004bfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c04:	431a      	orrs	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e05c      	b.n	8004cd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0208 	orr.w	r2, r2, #8
 8004c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	2240      	movs	r2, #64	@ 0x40
 8004c32:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3380      	adds	r3, #128	@ 0x80
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	025b      	lsls	r3, r3, #9
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	f7fd fcc2 	bl	80025ec <HAL_DMA_Start_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 021a 	bic.w	r2, r2, #26
 8004c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a19      	ldr	r2, [pc, #100]	@ (8004ce8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004c84:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e018      	b.n	8004cd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	025b      	lsls	r3, r3, #9
 8004cae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004cb0:	2390      	movs	r3, #144	@ 0x90
 8004cb2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f107 0210 	add.w	r2, r7, #16
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f001 fcbe 	bl	800664c <SDMMC_ConfigData>

      return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3730      	adds	r7, #48	@ 0x30
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	080053cd 	.word	0x080053cd
 8004ce4:	08005469 	.word	0x08005469
 8004ce8:	004005ff 	.word	0x004005ff

08004cec <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_SD_IRQHandler+0x2e>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fdec 	bl	80058f0 <SD_Read_IT>
 8004d18:	e15a      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 808d 	beq.w	8004e44 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d32:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b9a      	ldr	r3, [pc, #616]	@ (8004fa8 <HAL_SD_IRQHandler+0x2bc>)
 8004d40:	400b      	ands	r3, r1
 8004d42:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0201 	bic.w	r2, r2, #1
 8004d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d039      	beq.n	8004dd2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_SD_IRQHandler+0x86>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d011      	beq.n	8004d96 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 fd3e 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8004d7c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d008      	beq.n	8004d96 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f921 	bl	8004fd8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <HAL_SD_IRQHandler+0xd6>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f002 f95c 	bl	8007080 <HAL_SD_RxCpltCallback>
 8004dc8:	e102      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f002 f94e 	bl	800706c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dd0:	e0fe      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80f9 	beq.w	8004fd0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fd03 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8004df2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f8e6 	bl	8004fd8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 80dc 	bne.w	8004fd0 <HAL_SD_IRQHandler+0x2e4>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 80d6 	bne.w	8004fd0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0208 	bic.w	r2, r2, #8
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f002 f915 	bl	800706c <HAL_SD_TxCpltCallback>
}
 8004e42:	e0c5      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_SD_IRQHandler+0x178>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fd98 	bl	8005992 <SD_Write_IT>
 8004e62:	e0b5      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 80ae 	beq.w	8004fd0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	f043 0202 	orr.w	r2, r3, #2
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea0:	f043 0208 	orr.w	r2, r3, #8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	f043 0210 	orr.w	r2, r3, #16
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fc7c 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f857 	bl	8004fd8 <HAL_SD_ErrorCallback>
}
 8004f2a:	e051      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04c      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <HAL_SD_IRQHandler+0x25e>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <HAL_SD_IRQHandler+0x2c0>)
 8004f50:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fd fba8 	bl	80026ac <HAL_DMA_Abort_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d036      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fad0 	bl	800550c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004f6c:	e030      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d104      	bne.n	8004f82 <HAL_SD_IRQHandler+0x296>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d018      	beq.n	8004fb4 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	4a0a      	ldr	r2, [pc, #40]	@ (8004fb0 <HAL_SD_IRQHandler+0x2c4>)
 8004f88:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fb8c 	bl	80026ac <HAL_DMA_Abort_IT>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d01a      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 faeb 	bl	800557a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004fa4:	e014      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
 8004fa6:	bf00      	nop
 8004fa8:	ffff3ec5 	.word	0xffff3ec5
 8004fac:	0800550d 	.word	0x0800550d
 8004fb0:	0800557b 	.word	0x0800557b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f002 f845 	bl	8007058 <HAL_SD_AbortCallback>
}
 8004fce:	e7ff      	b.n	8004fd0 <HAL_SD_IRQHandler+0x2e4>
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffa:	0f9b      	lsrs	r3, r3, #30
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005006:	0e9b      	lsrs	r3, r3, #26
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	b2da      	uxtb	r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005018:	0e1b      	lsrs	r3, r3, #24
 800501a:	b2db      	uxtb	r3, r3
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	b2da      	uxtb	r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800502a:	0c1b      	lsrs	r3, r3, #16
 800502c:	b2da      	uxtb	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	b2da      	uxtb	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005042:	b2da      	uxtb	r2, r3
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800504c:	0d1b      	lsrs	r3, r3, #20
 800504e:	b29a      	uxth	r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	b2db      	uxtb	r3, r3
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	b2da      	uxtb	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800506a:	0bdb      	lsrs	r3, r3, #15
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800507c:	0b9b      	lsrs	r3, r3, #14
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	b2da      	uxtb	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800508e:	0b5b      	lsrs	r3, r3, #13
 8005090:	b2db      	uxtb	r3, r3
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050a0:	0b1b      	lsrs	r3, r3, #12
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	b2da      	uxtb	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d163      	bne.n	8005184 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c0:	009a      	lsls	r2, r3, #2
 80050c2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050c6:	4013      	ands	r3, r2
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80050cc:	0f92      	lsrs	r2, r2, #30
 80050ce:	431a      	orrs	r2, r3
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d8:	0edb      	lsrs	r3, r3, #27
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ea:	0e1b      	lsrs	r3, r3, #24
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fc:	0d5b      	lsrs	r3, r3, #21
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	b2da      	uxtb	r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510e:	0c9b      	lsrs	r3, r3, #18
 8005110:	b2db      	uxtb	r3, r3
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	b2da      	uxtb	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005120:	0bdb      	lsrs	r3, r3, #15
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	b2da      	uxtb	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	7e1b      	ldrb	r3, [r3, #24]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	3302      	adds	r3, #2
 8005144:	2201      	movs	r2, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800514e:	fb03 f202 	mul.w	r2, r3, r2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	7a1b      	ldrb	r3, [r3, #8]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	2201      	movs	r2, #1
 8005162:	409a      	lsls	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005170:	0a52      	lsrs	r2, r2, #9
 8005172:	fb03 f202 	mul.w	r2, r3, r2
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005180:	661a      	str	r2, [r3, #96]	@ 0x60
 8005182:	e031      	b.n	80051e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005188:	2b01      	cmp	r3, #1
 800518a:	d11d      	bne.n	80051c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800519a:	0c1b      	lsrs	r3, r3, #16
 800519c:	431a      	orrs	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	3301      	adds	r3, #1
 80051a8:	029a      	lsls	r2, r3, #10
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051bc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80051c6:	e00f      	b.n	80051e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a58      	ldr	r2, [pc, #352]	@ (8005330 <HAL_SD_GetCardCSD+0x344>)
 80051ce:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e09d      	b.n	8005324 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ec:	0b9b      	lsrs	r3, r3, #14
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fe:	09db      	lsrs	r3, r3, #7
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005206:	b2da      	uxtb	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005216:	b2da      	uxtb	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	0fdb      	lsrs	r3, r3, #31
 8005222:	b2da      	uxtb	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522c:	0f5b      	lsrs	r3, r3, #29
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	b2da      	uxtb	r2, r3
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	0e9b      	lsrs	r3, r3, #26
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	b2da      	uxtb	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005250:	0d9b      	lsrs	r3, r3, #22
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	b2da      	uxtb	r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005262:	0d5b      	lsrs	r3, r3, #21
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527e:	0c1b      	lsrs	r3, r3, #16
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	b2da      	uxtb	r2, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	0bdb      	lsrs	r3, r3, #15
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	0b9b      	lsrs	r3, r3, #14
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ba:	0b5b      	lsrs	r3, r3, #13
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	0b1b      	lsrs	r3, r3, #12
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	0a9b      	lsrs	r3, r3, #10
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005312:	b2da      	uxtb	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	004005ff 	.word	0x004005ff

08005334 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005398:	f107 030c 	add.w	r3, r7, #12
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa7e 	bl	80058a0 <SD_SendStatus>
 80053a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	0a5b      	lsrs	r3, r3, #9
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80053c2:	693b      	ldr	r3, [r7, #16]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	2b82      	cmp	r3, #130	@ 0x82
 800540a:	d111      	bne.n	8005430 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f9f1 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8005416:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff fdd4 	bl	8004fd8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0208 	bic.w	r2, r2, #8
 800543e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005448:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 fe11 	bl	8007080 <HAL_SD_RxCpltCallback>
#endif
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005474:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fd fac4 	bl	8002a04 <HAL_DMA_GetError>
 800547c:	4603      	mov	r3, r0
 800547e:	2b02      	cmp	r3, #2
 8005480:	d03e      	beq.n	8005500 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005488:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005490:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d002      	beq.n	800549e <SD_DMAError+0x36>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d12d      	bne.n	80054fa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a19      	ldr	r2, [pc, #100]	@ (8005508 <SD_DMAError+0xa0>)
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80054b4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80054c2:	6978      	ldr	r0, [r7, #20]
 80054c4:	f7ff ff62 	bl	800538c <HAL_SD_GetCardState>
 80054c8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b06      	cmp	r3, #6
 80054ce:	d002      	beq.n	80054d6 <SD_DMAError+0x6e>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d10a      	bne.n	80054ec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 f98c 	bl	80067f8 <SDMMC_CmdStopTransfer>
 80054e0:	4602      	mov	r2, r0
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e6:	431a      	orrs	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	f7ff fd6c 	bl	8004fd8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	004005ff 	.word	0x004005ff

0800550c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005522:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff ff31 	bl	800538c <HAL_SD_GetCardState>
 800552a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b06      	cmp	r3, #6
 800553e:	d002      	beq.n	8005546 <SD_DMATxAbort+0x3a>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d10a      	bne.n	800555c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f001 f954 	bl	80067f8 <SDMMC_CmdStopTransfer>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f001 fd77 	bl	8007058 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800556a:	e002      	b.n	8005572 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff fd33 	bl	8004fd8 <HAL_SD_ErrorCallback>
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005586:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7ff fefa 	bl	800538c <HAL_SD_GetCardState>
 8005598:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d002      	beq.n	80055b4 <SD_DMARxAbort+0x3a>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b05      	cmp	r3, #5
 80055b2:	d10a      	bne.n	80055ca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 f91d 	bl	80067f8 <SDMMC_CmdStopTransfer>
 80055be:	4602      	mov	r2, r0
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f001 fd40 	bl	8007058 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80055d8:	e002      	b.n	80055e0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff fcfc 	bl	8004fd8 <HAL_SD_ErrorCallback>
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80055e8:	b5b0      	push	{r4, r5, r7, lr}
 80055ea:	b094      	sub	sp, #80	@ 0x50
 80055ec:	af04      	add	r7, sp, #16
 80055ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80055f0:	2301      	movs	r3, #1
 80055f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 ffcf 	bl	800659c <SDMMC_GetPowerState>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005604:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005608:	e0b8      	b.n	800577c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	2b03      	cmp	r3, #3
 8005610:	d02f      	beq.n	8005672 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f9b6 	bl	8006988 <SDMMC_CmdSendCID>
 800561c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800561e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <SD_InitCard+0x40>
    {
      return errorstate;
 8005624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005626:	e0a9      	b.n	800577c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fff9 	bl	8006626 <SDMMC_GetResponse>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2104      	movs	r1, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fff0 	bl	8006626 <SDMMC_GetResponse>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2108      	movs	r1, #8
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ffe7 	bl	8006626 <SDMMC_GetResponse>
 8005658:	4602      	mov	r2, r0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	210c      	movs	r1, #12
 8005664:	4618      	mov	r0, r3
 8005666:	f000 ffde 	bl	8006626 <SDMMC_GetResponse>
 800566a:	4602      	mov	r2, r0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005676:	2b03      	cmp	r3, #3
 8005678:	d00d      	beq.n	8005696 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f107 020e 	add.w	r2, r7, #14
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f9bc 	bl	8006a02 <SDMMC_CmdSetRelAdd>
 800568a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800568c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <SD_InitCard+0xae>
    {
      return errorstate;
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005694:	e072      	b.n	800577c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	2b03      	cmp	r3, #3
 800569c:	d036      	beq.n	800570c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	461a      	mov	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f001 f986 	bl	80069c4 <SDMMC_CmdSendCSD>
 80056b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80056c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c2:	e05b      	b.n	800577c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 ffab 	bl	8006626 <SDMMC_GetResponse>
 80056d0:	4602      	mov	r2, r0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2104      	movs	r1, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 ffa2 	bl	8006626 <SDMMC_GetResponse>
 80056e2:	4602      	mov	r2, r0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2108      	movs	r1, #8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 ff99 	bl	8006626 <SDMMC_GetResponse>
 80056f4:	4602      	mov	r2, r0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	210c      	movs	r1, #12
 8005700:	4618      	mov	r0, r3
 8005702:	f000 ff90 	bl	8006626 <SDMMC_GetResponse>
 8005706:	4602      	mov	r2, r0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2104      	movs	r1, #4
 8005712:	4618      	mov	r0, r3
 8005714:	f000 ff87 	bl	8006626 <SDMMC_GetResponse>
 8005718:	4603      	mov	r3, r0
 800571a:	0d1a      	lsrs	r2, r3, #20
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	4619      	mov	r1, r3
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7ff fc60 	bl	8004fec <HAL_SD_GetCardCSD>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005732:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005736:	e021      	b.n	800577c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6819      	ldr	r1, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005740:	041b      	lsls	r3, r3, #16
 8005742:	2200      	movs	r2, #0
 8005744:	461c      	mov	r4, r3
 8005746:	4615      	mov	r5, r2
 8005748:	4622      	mov	r2, r4
 800574a:	462b      	mov	r3, r5
 800574c:	4608      	mov	r0, r1
 800574e:	f001 f875 	bl	800683c <SDMMC_CmdSelDesel>
 8005752:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <SD_InitCard+0x176>
  {
    return errorstate;
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	e00e      	b.n	800577c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681d      	ldr	r5, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	466c      	mov	r4, sp
 8005766:	f103 0210 	add.w	r2, r3, #16
 800576a:	ca07      	ldmia	r2, {r0, r1, r2}
 800576c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005770:	3304      	adds	r3, #4
 8005772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005774:	4628      	mov	r0, r5
 8005776:	f000 feb9 	bl	80064ec <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3740      	adds	r7, #64	@ 0x40
 8005780:	46bd      	mov	sp, r7
 8005782:	bdb0      	pop	{r4, r5, r7, pc}

08005784 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f001 f870 	bl	8006882 <SDMMC_CmdGoIdleState>
 80057a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	e072      	b.n	8005894 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 f883 	bl	80068be <SDMMC_CmdOperCond>
 80057b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 f859 	bl	8006882 <SDMMC_CmdGoIdleState>
 80057d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	e05b      	b.n	8005894 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d137      	bne.n	800585a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f883 	bl	80068fc <SDMMC_CmdAppCommand>
 80057f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02d      	beq.n	800585a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005802:	e047      	b.n	8005894 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f001 f876 	bl	80068fc <SDMMC_CmdAppCommand>
 8005810:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <SD_PowerON+0x98>
    {
      return errorstate;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	e03b      	b.n	8005894 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	491e      	ldr	r1, [pc, #120]	@ (800589c <SD_PowerON+0x118>)
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f88c 	bl	8006940 <SDMMC_CmdAppOperCommand>
 8005828:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005830:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005834:	e02e      	b.n	8005894 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fef2 	bl	8006626 <SDMMC_GetResponse>
 8005842:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	0fdb      	lsrs	r3, r3, #31
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <SD_PowerON+0xcc>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <SD_PowerON+0xce>
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]

    count++;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	3301      	adds	r3, #1
 8005858:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005860:	4293      	cmp	r3, r2
 8005862:	d802      	bhi.n	800586a <SD_PowerON+0xe6>
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0cc      	beq.n	8005804 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005870:	4293      	cmp	r3, r2
 8005872:	d902      	bls.n	800587a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005874:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005878:	e00c      	b.n	8005894 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
 800588a:	e002      	b.n	8005892 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	c1100000 	.word	0xc1100000

080058a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80058b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058b4:	e018      	b.n	80058e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f001 f8be 	bl	8006a44 <SDMMC_CmdSendStatus>
 80058c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	e009      	b.n	80058e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fea3 	bl	8006626 <SDMMC_GetResponse>
 80058e0:	4602      	mov	r2, r0
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03f      	beq.n	800598a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	e033      	b.n	8005978 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fe15 	bl	8006544 <SDMMC_ReadFIFO>
 800591a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	3b01      	subs	r3, #1
 800592e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	b2da      	uxtb	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	701a      	strb	r2, [r3, #0]
      tmp++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3b01      	subs	r3, #1
 8005944:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	0c1b      	lsrs	r3, r3, #16
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	3b01      	subs	r3, #1
 800595a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	0e1b      	lsrs	r3, r3, #24
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	3b01      	subs	r3, #1
 8005970:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3301      	adds	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b07      	cmp	r3, #7
 800597c:	d9c8      	bls.n	8005910 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800598a:	bf00      	nop
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d043      	beq.n	8005a34 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	e037      	b.n	8005a22 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	021a      	lsls	r2, r3, #8
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	3b01      	subs	r3, #1
 80059da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	041a      	lsls	r2, r3, #16
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	061a      	lsls	r2, r3, #24
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f107 0208 	add.w	r2, r7, #8
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fda1 	bl	800655e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2b07      	cmp	r3, #7
 8005a26:	d9c4      	bls.n	80059b2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e040      	b.n	8005ad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7fc f980 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2224      	movs	r2, #36	@ 0x24
 8005a68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0201 	bic.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fb16 	bl	80060b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f8af 	bl	8005bec <UART_SetConfig>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e01b      	b.n	8005ad0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fb95 	bl	80061f8 <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	@ 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d177      	bne.n	8005be0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Transmit+0x24>
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e070      	b.n	8005be2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2221      	movs	r2, #33	@ 0x21
 8005b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b0e:	f7fc fb05 	bl	800211c <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	88fa      	ldrh	r2, [r7, #6]
 8005b20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2c:	d108      	bne.n	8005b40 <HAL_UART_Transmit+0x68>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d104      	bne.n	8005b40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e003      	b.n	8005b48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b48:	e02f      	b.n	8005baa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	2180      	movs	r1, #128	@ 0x80
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fbf7 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e03b      	b.n	8005be2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	461a      	mov	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	3302      	adds	r3, #2
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e007      	b.n	8005b98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3301      	adds	r3, #1
 8005b96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1c9      	bne.n	8005b4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2140      	movs	r1, #64	@ 0x40
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fbc1 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e005      	b.n	8005be2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e000      	b.n	8005be2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4ba6      	ldr	r3, [pc, #664]	@ (8005eb0 <UART_SetConfig+0x2c4>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	6979      	ldr	r1, [r7, #20]
 8005c20:	430b      	orrs	r3, r1
 8005c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a94      	ldr	r2, [pc, #592]	@ (8005eb4 <UART_SetConfig+0x2c8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d120      	bne.n	8005caa <UART_SetConfig+0xbe>
 8005c68:	4b93      	ldr	r3, [pc, #588]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d816      	bhi.n	8005ca4 <UART_SetConfig+0xb8>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <UART_SetConfig+0x90>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005c93 	.word	0x08005c93
 8005c88:	08005c9f 	.word	0x08005c9f
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e150      	b.n	8005f34 <UART_SetConfig+0x348>
 8005c92:	2302      	movs	r3, #2
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e14d      	b.n	8005f34 <UART_SetConfig+0x348>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e14a      	b.n	8005f34 <UART_SetConfig+0x348>
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e147      	b.n	8005f34 <UART_SetConfig+0x348>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e144      	b.n	8005f34 <UART_SetConfig+0x348>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a83      	ldr	r2, [pc, #524]	@ (8005ebc <UART_SetConfig+0x2d0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d132      	bne.n	8005d1a <UART_SetConfig+0x12e>
 8005cb4:	4b80      	ldr	r3, [pc, #512]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b0c      	cmp	r3, #12
 8005cc0:	d828      	bhi.n	8005d14 <UART_SetConfig+0x128>
 8005cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <UART_SetConfig+0xdc>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005d15 	.word	0x08005d15
 8005cd0:	08005d15 	.word	0x08005d15
 8005cd4:	08005d15 	.word	0x08005d15
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005d15 	.word	0x08005d15
 8005ce0:	08005d15 	.word	0x08005d15
 8005ce4:	08005d15 	.word	0x08005d15
 8005ce8:	08005d03 	.word	0x08005d03
 8005cec:	08005d15 	.word	0x08005d15
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d15 	.word	0x08005d15
 8005cf8:	08005d0f 	.word	0x08005d0f
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e118      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d02:	2302      	movs	r3, #2
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e115      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e112      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d0e:	2308      	movs	r3, #8
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e10f      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d14:	2310      	movs	r3, #16
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	e10c      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a68      	ldr	r2, [pc, #416]	@ (8005ec0 <UART_SetConfig+0x2d4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d120      	bne.n	8005d66 <UART_SetConfig+0x17a>
 8005d24:	4b64      	ldr	r3, [pc, #400]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d2a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d2e:	2b30      	cmp	r3, #48	@ 0x30
 8005d30:	d013      	beq.n	8005d5a <UART_SetConfig+0x16e>
 8005d32:	2b30      	cmp	r3, #48	@ 0x30
 8005d34:	d814      	bhi.n	8005d60 <UART_SetConfig+0x174>
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d009      	beq.n	8005d4e <UART_SetConfig+0x162>
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d810      	bhi.n	8005d60 <UART_SetConfig+0x174>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <UART_SetConfig+0x15c>
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	d006      	beq.n	8005d54 <UART_SetConfig+0x168>
 8005d46:	e00b      	b.n	8005d60 <UART_SetConfig+0x174>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e0f2      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e0ef      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d54:	2304      	movs	r3, #4
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e0ec      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e0e9      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e0e6      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a56      	ldr	r2, [pc, #344]	@ (8005ec4 <UART_SetConfig+0x2d8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d120      	bne.n	8005db2 <UART_SetConfig+0x1c6>
 8005d70:	4b51      	ldr	r3, [pc, #324]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d7c:	d013      	beq.n	8005da6 <UART_SetConfig+0x1ba>
 8005d7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d80:	d814      	bhi.n	8005dac <UART_SetConfig+0x1c0>
 8005d82:	2b80      	cmp	r3, #128	@ 0x80
 8005d84:	d009      	beq.n	8005d9a <UART_SetConfig+0x1ae>
 8005d86:	2b80      	cmp	r3, #128	@ 0x80
 8005d88:	d810      	bhi.n	8005dac <UART_SetConfig+0x1c0>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <UART_SetConfig+0x1a8>
 8005d8e:	2b40      	cmp	r3, #64	@ 0x40
 8005d90:	d006      	beq.n	8005da0 <UART_SetConfig+0x1b4>
 8005d92:	e00b      	b.n	8005dac <UART_SetConfig+0x1c0>
 8005d94:	2300      	movs	r3, #0
 8005d96:	77fb      	strb	r3, [r7, #31]
 8005d98:	e0cc      	b.n	8005f34 <UART_SetConfig+0x348>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	77fb      	strb	r3, [r7, #31]
 8005d9e:	e0c9      	b.n	8005f34 <UART_SetConfig+0x348>
 8005da0:	2304      	movs	r3, #4
 8005da2:	77fb      	strb	r3, [r7, #31]
 8005da4:	e0c6      	b.n	8005f34 <UART_SetConfig+0x348>
 8005da6:	2308      	movs	r3, #8
 8005da8:	77fb      	strb	r3, [r7, #31]
 8005daa:	e0c3      	b.n	8005f34 <UART_SetConfig+0x348>
 8005dac:	2310      	movs	r3, #16
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e0c0      	b.n	8005f34 <UART_SetConfig+0x348>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a44      	ldr	r2, [pc, #272]	@ (8005ec8 <UART_SetConfig+0x2dc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d125      	bne.n	8005e08 <UART_SetConfig+0x21c>
 8005dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dca:	d017      	beq.n	8005dfc <UART_SetConfig+0x210>
 8005dcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dd0:	d817      	bhi.n	8005e02 <UART_SetConfig+0x216>
 8005dd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dd6:	d00b      	beq.n	8005df0 <UART_SetConfig+0x204>
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ddc:	d811      	bhi.n	8005e02 <UART_SetConfig+0x216>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <UART_SetConfig+0x1fe>
 8005de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de6:	d006      	beq.n	8005df6 <UART_SetConfig+0x20a>
 8005de8:	e00b      	b.n	8005e02 <UART_SetConfig+0x216>
 8005dea:	2300      	movs	r3, #0
 8005dec:	77fb      	strb	r3, [r7, #31]
 8005dee:	e0a1      	b.n	8005f34 <UART_SetConfig+0x348>
 8005df0:	2302      	movs	r3, #2
 8005df2:	77fb      	strb	r3, [r7, #31]
 8005df4:	e09e      	b.n	8005f34 <UART_SetConfig+0x348>
 8005df6:	2304      	movs	r3, #4
 8005df8:	77fb      	strb	r3, [r7, #31]
 8005dfa:	e09b      	b.n	8005f34 <UART_SetConfig+0x348>
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e098      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e02:	2310      	movs	r3, #16
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e095      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ecc <UART_SetConfig+0x2e0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d125      	bne.n	8005e5e <UART_SetConfig+0x272>
 8005e12:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e20:	d017      	beq.n	8005e52 <UART_SetConfig+0x266>
 8005e22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e26:	d817      	bhi.n	8005e58 <UART_SetConfig+0x26c>
 8005e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e2c:	d00b      	beq.n	8005e46 <UART_SetConfig+0x25a>
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e32:	d811      	bhi.n	8005e58 <UART_SetConfig+0x26c>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <UART_SetConfig+0x254>
 8005e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e3c:	d006      	beq.n	8005e4c <UART_SetConfig+0x260>
 8005e3e:	e00b      	b.n	8005e58 <UART_SetConfig+0x26c>
 8005e40:	2301      	movs	r3, #1
 8005e42:	77fb      	strb	r3, [r7, #31]
 8005e44:	e076      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e46:	2302      	movs	r3, #2
 8005e48:	77fb      	strb	r3, [r7, #31]
 8005e4a:	e073      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	77fb      	strb	r3, [r7, #31]
 8005e50:	e070      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e52:	2308      	movs	r3, #8
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e06d      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e58:	2310      	movs	r3, #16
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e06a      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1b      	ldr	r2, [pc, #108]	@ (8005ed0 <UART_SetConfig+0x2e4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d138      	bne.n	8005eda <UART_SetConfig+0x2ee>
 8005e68:	4b13      	ldr	r3, [pc, #76]	@ (8005eb8 <UART_SetConfig+0x2cc>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e76:	d017      	beq.n	8005ea8 <UART_SetConfig+0x2bc>
 8005e78:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e7c:	d82a      	bhi.n	8005ed4 <UART_SetConfig+0x2e8>
 8005e7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e82:	d00b      	beq.n	8005e9c <UART_SetConfig+0x2b0>
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e88:	d824      	bhi.n	8005ed4 <UART_SetConfig+0x2e8>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <UART_SetConfig+0x2aa>
 8005e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e92:	d006      	beq.n	8005ea2 <UART_SetConfig+0x2b6>
 8005e94:	e01e      	b.n	8005ed4 <UART_SetConfig+0x2e8>
 8005e96:	2300      	movs	r3, #0
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e04b      	b.n	8005f34 <UART_SetConfig+0x348>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e048      	b.n	8005f34 <UART_SetConfig+0x348>
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e045      	b.n	8005f34 <UART_SetConfig+0x348>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e042      	b.n	8005f34 <UART_SetConfig+0x348>
 8005eae:	bf00      	nop
 8005eb0:	efff69f3 	.word	0xefff69f3
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40004400 	.word	0x40004400
 8005ec0:	40004800 	.word	0x40004800
 8005ec4:	40004c00 	.word	0x40004c00
 8005ec8:	40005000 	.word	0x40005000
 8005ecc:	40011400 	.word	0x40011400
 8005ed0:	40007800 	.word	0x40007800
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e02c      	b.n	8005f34 <UART_SetConfig+0x348>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a72      	ldr	r2, [pc, #456]	@ (80060a8 <UART_SetConfig+0x4bc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d125      	bne.n	8005f30 <UART_SetConfig+0x344>
 8005ee4:	4b71      	ldr	r3, [pc, #452]	@ (80060ac <UART_SetConfig+0x4c0>)
 8005ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005eee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ef2:	d017      	beq.n	8005f24 <UART_SetConfig+0x338>
 8005ef4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ef8:	d817      	bhi.n	8005f2a <UART_SetConfig+0x33e>
 8005efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005efe:	d00b      	beq.n	8005f18 <UART_SetConfig+0x32c>
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f04:	d811      	bhi.n	8005f2a <UART_SetConfig+0x33e>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <UART_SetConfig+0x326>
 8005f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f0e:	d006      	beq.n	8005f1e <UART_SetConfig+0x332>
 8005f10:	e00b      	b.n	8005f2a <UART_SetConfig+0x33e>
 8005f12:	2300      	movs	r3, #0
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e00d      	b.n	8005f34 <UART_SetConfig+0x348>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e00a      	b.n	8005f34 <UART_SetConfig+0x348>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e007      	b.n	8005f34 <UART_SetConfig+0x348>
 8005f24:	2308      	movs	r3, #8
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e004      	b.n	8005f34 <UART_SetConfig+0x348>
 8005f2a:	2310      	movs	r3, #16
 8005f2c:	77fb      	strb	r3, [r7, #31]
 8005f2e:	e001      	b.n	8005f34 <UART_SetConfig+0x348>
 8005f30:	2310      	movs	r3, #16
 8005f32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f3c:	d15b      	bne.n	8005ff6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d828      	bhi.n	8005f96 <UART_SetConfig+0x3aa>
 8005f44:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0x360>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f79 	.word	0x08005f79
 8005f54:	08005f81 	.word	0x08005f81
 8005f58:	08005f97 	.word	0x08005f97
 8005f5c:	08005f87 	.word	0x08005f87
 8005f60:	08005f97 	.word	0x08005f97
 8005f64:	08005f97 	.word	0x08005f97
 8005f68:	08005f97 	.word	0x08005f97
 8005f6c:	08005f8f 	.word	0x08005f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f70:	f7fd ffc2 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8005f74:	61b8      	str	r0, [r7, #24]
        break;
 8005f76:	e013      	b.n	8005fa0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f78:	f7fd ffd2 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 8005f7c:	61b8      	str	r0, [r7, #24]
        break;
 8005f7e:	e00f      	b.n	8005fa0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f80:	4b4b      	ldr	r3, [pc, #300]	@ (80060b0 <UART_SetConfig+0x4c4>)
 8005f82:	61bb      	str	r3, [r7, #24]
        break;
 8005f84:	e00c      	b.n	8005fa0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f86:	f7fd fea5 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8005f8a:	61b8      	str	r0, [r7, #24]
        break;
 8005f8c:	e008      	b.n	8005fa0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f92:	61bb      	str	r3, [r7, #24]
        break;
 8005f94:	e004      	b.n	8005fa0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	77bb      	strb	r3, [r7, #30]
        break;
 8005f9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d074      	beq.n	8006090 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	005a      	lsls	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	d916      	bls.n	8005ff0 <UART_SetConfig+0x404>
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc8:	d212      	bcs.n	8005ff0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f023 030f 	bic.w	r3, r3, #15
 8005fd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	89fb      	ldrh	r3, [r7, #14]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	89fa      	ldrh	r2, [r7, #14]
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	e04f      	b.n	8006090 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	77bb      	strb	r3, [r7, #30]
 8005ff4:	e04c      	b.n	8006090 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ff6:	7ffb      	ldrb	r3, [r7, #31]
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d828      	bhi.n	800604e <UART_SetConfig+0x462>
 8005ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <UART_SetConfig+0x418>)
 8005ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006002:	bf00      	nop
 8006004:	08006029 	.word	0x08006029
 8006008:	08006031 	.word	0x08006031
 800600c:	08006039 	.word	0x08006039
 8006010:	0800604f 	.word	0x0800604f
 8006014:	0800603f 	.word	0x0800603f
 8006018:	0800604f 	.word	0x0800604f
 800601c:	0800604f 	.word	0x0800604f
 8006020:	0800604f 	.word	0x0800604f
 8006024:	08006047 	.word	0x08006047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fd ff66 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 800602c:	61b8      	str	r0, [r7, #24]
        break;
 800602e:	e013      	b.n	8006058 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006030:	f7fd ff76 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 8006034:	61b8      	str	r0, [r7, #24]
        break;
 8006036:	e00f      	b.n	8006058 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006038:	4b1d      	ldr	r3, [pc, #116]	@ (80060b0 <UART_SetConfig+0x4c4>)
 800603a:	61bb      	str	r3, [r7, #24]
        break;
 800603c:	e00c      	b.n	8006058 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603e:	f7fd fe49 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8006042:	61b8      	str	r0, [r7, #24]
        break;
 8006044:	e008      	b.n	8006058 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800604a:	61bb      	str	r3, [r7, #24]
        break;
 800604c:	e004      	b.n	8006058 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	77bb      	strb	r3, [r7, #30]
        break;
 8006056:	bf00      	nop
    }

    if (pclk != 0U)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	085a      	lsrs	r2, r3, #1
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	441a      	add	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	2b0f      	cmp	r3, #15
 8006076:	d909      	bls.n	800608c <UART_SetConfig+0x4a0>
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607e:	d205      	bcs.n	800608c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60da      	str	r2, [r3, #12]
 800608a:	e001      	b.n	8006090 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800609c:	7fbb      	ldrb	r3, [r7, #30]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40007c00 	.word	0x40007c00
 80060ac:	40023800 	.word	0x40023800
 80060b0:	00f42400 	.word	0x00f42400

080060b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01a      	beq.n	80061ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b2:	d10a      	bne.n	80061ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b098      	sub	sp, #96	@ 0x60
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006208:	f7fb ff88 	bl	800211c <HAL_GetTick>
 800620c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d12e      	bne.n	800627a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006224:	2200      	movs	r2, #0
 8006226:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f88c 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d021      	beq.n	800627a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623e:	e853 3f00 	ldrex	r3, [r3]
 8006242:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006246:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624a:	653b      	str	r3, [r7, #80]	@ 0x50
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006254:	647b      	str	r3, [r7, #68]	@ 0x44
 8006256:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800625a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800625c:	e841 2300 	strex	r3, r2, [r1]
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e6      	bne.n	8006236 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e062      	b.n	8006340 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d149      	bne.n	800631c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006290:	2200      	movs	r2, #0
 8006292:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f856 	bl	8006348 <UART_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d03c      	beq.n	800631c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	e853 3f00 	ldrex	r3, [r3]
 80062ae:	623b      	str	r3, [r7, #32]
   return(result);
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	e841 2300 	strex	r3, r2, [r1]
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e6      	bne.n	80062a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3308      	adds	r3, #8
 80062f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f4:	61fa      	str	r2, [r7, #28]
 80062f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	617b      	str	r3, [r7, #20]
   return(result);
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e011      	b.n	8006340 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3758      	adds	r7, #88	@ 0x58
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	4613      	mov	r3, r2
 8006356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	e04f      	b.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006360:	d04b      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006362:	f7fb fedb 	bl	800211c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	429a      	cmp	r2, r3
 8006370:	d302      	bcc.n	8006378 <UART_WaitOnFlagUntilTimeout+0x30>
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e04e      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d037      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b80      	cmp	r3, #128	@ 0x80
 800638e:	d034      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d031      	beq.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d110      	bne.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2208      	movs	r2, #8
 80063aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f838 	bl	8006422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2208      	movs	r2, #8
 80063b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e029      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063d4:	d111      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f81e 	bl	8006422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e00f      	b.n	800641a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4013      	ands	r3, r2
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	429a      	cmp	r2, r3
 8006408:	bf0c      	ite	eq
 800640a:	2301      	moveq	r3, #1
 800640c:	2300      	movne	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	429a      	cmp	r2, r3
 8006416:	d0a0      	beq.n	800635a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006422:	b480      	push	{r7}
 8006424:	b095      	sub	sp, #84	@ 0x54
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	643b      	str	r3, [r7, #64]	@ 0x40
 800644a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800644e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	61fb      	str	r3, [r7, #28]
   return(result);
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800647c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800647e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006494:	2b01      	cmp	r3, #1
 8006496:	d118      	bne.n	80064ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0310 	bic.w	r3, r3, #16
 80064ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	613b      	str	r3, [r7, #16]
   return(result);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e6      	bne.n	8006498 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064de:	bf00      	nop
 80064e0:	3754      	adds	r7, #84	@ 0x54
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80064ec:	b084      	sub	sp, #16
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	f107 001c 	add.w	r0, r7, #28
 80064fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006502:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006504:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006506:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800650a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800650e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006512:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006516:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <SDMMC_Init+0x54>)
 8006524:	4013      	ands	r3, r2
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	b004      	add	sp, #16
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	ffff8100 	.word	0xffff8100

08006544 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2203      	movs	r2, #3
 800658c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0303 	and.w	r3, r3, #3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80065d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80065dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80065e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <SDMMC_SendCommand+0x50>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	fffff000 	.word	0xfffff000

0800660c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	b2db      	uxtb	r3, r3
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3314      	adds	r3, #20
 8006634:	461a      	mov	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	4413      	add	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
}  
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006672:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006678:	431a      	orrs	r2, r3
                       Data->DPSM);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800667e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800668a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006696:	2300      	movs	r3, #0

}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80066b2:	2310      	movs	r3, #16
 80066b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066b6:	2340      	movs	r3, #64	@ 0x40
 80066b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066c4:	f107 0308 	add.w	r3, r7, #8
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff ff74 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80066d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d4:	2110      	movs	r1, #16
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9d6 	bl	8006a88 <SDMMC_GetCmdResp1>
 80066dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066de:	69fb      	ldr	r3, [r7, #28]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3720      	adds	r7, #32
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80066f6:	2311      	movs	r3, #17
 80066f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066fa:	2340      	movs	r3, #64	@ 0x40
 80066fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff ff52 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006718:	2111      	movs	r1, #17
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f9b4 	bl	8006a88 <SDMMC_GetCmdResp1>
 8006720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006722:	69fb      	ldr	r3, [r7, #28]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800673a:	2312      	movs	r3, #18
 800673c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800673e:	2340      	movs	r3, #64	@ 0x40
 8006740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800674a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff ff30 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675c:	2112      	movs	r1, #18
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f992 	bl	8006a88 <SDMMC_GetCmdResp1>
 8006764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006766:	69fb      	ldr	r3, [r7, #28]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800677e:	2318      	movs	r3, #24
 8006780:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006782:	2340      	movs	r3, #64	@ 0x40
 8006784:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800678a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800678e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006790:	f107 0308 	add.w	r3, r7, #8
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff ff0e 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800679c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067a0:	2118      	movs	r1, #24
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f970 	bl	8006a88 <SDMMC_GetCmdResp1>
 80067a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3720      	adds	r7, #32
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80067c2:	2319      	movs	r3, #25
 80067c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80067c6:	2340      	movs	r3, #64	@ 0x40
 80067c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067d4:	f107 0308 	add.w	r3, r7, #8
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff feec 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80067e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067e4:	2119      	movs	r1, #25
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f94e 	bl	8006a88 <SDMMC_GetCmdResp1>
 80067ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067ee:	69fb      	ldr	r3, [r7, #28]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3720      	adds	r7, #32
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006804:	230c      	movs	r3, #12
 8006806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006808:	2340      	movs	r3, #64	@ 0x40
 800680a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006814:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fecb 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006822:	4a05      	ldr	r2, [pc, #20]	@ (8006838 <SDMMC_CmdStopTransfer+0x40>)
 8006824:	210c      	movs	r1, #12
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f92e 	bl	8006a88 <SDMMC_GetCmdResp1>
 800682c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800682e:	69fb      	ldr	r3, [r7, #28]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3720      	adds	r7, #32
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	05f5e100 	.word	0x05f5e100

0800683c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	@ 0x28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800684c:	2307      	movs	r3, #7
 800684e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006850:	2340      	movs	r3, #64	@ 0x40
 8006852:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800685c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800685e:	f107 0310 	add.w	r3, r7, #16
 8006862:	4619      	mov	r1, r3
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fea7 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800686a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800686e:	2107      	movs	r1, #7
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f909 	bl	8006a88 <SDMMC_GetCmdResp1>
 8006876:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800687a:	4618      	mov	r0, r3
 800687c:	3728      	adds	r7, #40	@ 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800689a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800689e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fe86 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fb23 	bl	8006ef8 <SDMMC_GetCmdError>
 80068b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068b4:	69fb      	ldr	r3, [r7, #28]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b088      	sub	sp, #32
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80068c6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80068ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80068cc:	2308      	movs	r3, #8
 80068ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068d0:	2340      	movs	r3, #64	@ 0x40
 80068d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe67 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fab6 	bl	8006e5c <SDMMC_GetCmdResp7>
 80068f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068f2:	69fb      	ldr	r3, [r7, #28]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800690a:	2337      	movs	r3, #55	@ 0x37
 800690c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800690e:	2340      	movs	r3, #64	@ 0x40
 8006910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800691a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800691c:	f107 0308 	add.w	r3, r7, #8
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff fe48 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692c:	2137      	movs	r1, #55	@ 0x37
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f8aa 	bl	8006a88 <SDMMC_GetCmdResp1>
 8006934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006936:	69fb      	ldr	r3, [r7, #28]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	4b0d      	ldr	r3, [pc, #52]	@ (8006984 <SDMMC_CmdAppOperCommand+0x44>)
 800694e:	4313      	orrs	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006952:	2329      	movs	r3, #41	@ 0x29
 8006954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006956:	2340      	movs	r3, #64	@ 0x40
 8006958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800695e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006964:	f107 0308 	add.w	r3, r7, #8
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fe24 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9bf 	bl	8006cf4 <SDMMC_GetCmdResp3>
 8006976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006978:	69fb      	ldr	r3, [r7, #28]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	80100000 	.word	0x80100000

08006988 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b088      	sub	sp, #32
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006994:	2302      	movs	r3, #2
 8006996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006998:	23c0      	movs	r3, #192	@ 0xc0
 800699a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069a6:	f107 0308 	add.w	r3, r7, #8
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff fe03 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f956 	bl	8006c64 <SDMMC_GetCmdResp2>
 80069b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ba:	69fb      	ldr	r3, [r7, #28]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3720      	adds	r7, #32
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80069d2:	2309      	movs	r3, #9
 80069d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80069d6:	23c0      	movs	r3, #192	@ 0xc0
 80069d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069da:	2300      	movs	r3, #0
 80069dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069e4:	f107 0308 	add.w	r3, r7, #8
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fde4 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f937 	bl	8006c64 <SDMMC_GetCmdResp2>
 80069f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f8:	69fb      	ldr	r3, [r7, #28]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b088      	sub	sp, #32
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006a10:	2303      	movs	r3, #3
 8006a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a14:	2340      	movs	r3, #64	@ 0x40
 8006a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fdc5 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	2103      	movs	r1, #3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f99c 	bl	8006d70 <SDMMC_GetCmdResp6>
 8006a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006a52:	230d      	movs	r3, #13
 8006a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a56:	2340      	movs	r3, #64	@ 0x40
 8006a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a64:	f107 0308 	add.w	r3, r7, #8
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fda4 	bl	80065b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a74:	210d      	movs	r1, #13
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f806 	bl	8006a88 <SDMMC_GetCmdResp1>
 8006a7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	460b      	mov	r3, r1
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a96:	4b70      	ldr	r3, [pc, #448]	@ (8006c58 <SDMMC_GetCmdResp1+0x1d0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a70      	ldr	r2, [pc, #448]	@ (8006c5c <SDMMC_GetCmdResp1+0x1d4>)
 8006a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa0:	0a5a      	lsrs	r2, r3, #9
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	1e5a      	subs	r2, r3, #1
 8006aae:	61fa      	str	r2, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ab4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006ab8:	e0c9      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0ef      	beq.n	8006aaa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ea      	bne.n	8006aaa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	e0b1      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0a6      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	22c5      	movs	r2, #197	@ 0xc5
 8006b04:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff fd80 	bl	800660c <SDMMC_GetCommandResponse>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d001      	beq.n	8006b1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e099      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f7ff fd82 	bl	8006626 <SDMMC_GetResponse>
 8006b22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4b4e      	ldr	r3, [pc, #312]	@ (8006c60 <SDMMC_GetCmdResp1+0x1d8>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	e08d      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	da02      	bge.n	8006b3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006b38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b3c:	e087      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006b48:	2340      	movs	r3, #64	@ 0x40
 8006b4a:	e080      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006b56:	2380      	movs	r3, #128	@ 0x80
 8006b58:	e079      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b68:	e071      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006b74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b78:	e069      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b88:	e061      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006b98:	e059      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ba8:	e051      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bb8:	e049      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006bc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bc8:	e041      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006bd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd8:	e039      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006be4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006be8:	e031      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006bf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006bf8:	e029      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006c04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006c08:	e021      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006c14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006c18:	e019      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006c24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006c28:	e011      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006c34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006c38:	e009      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006c44:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006c48:	e001      	b.n	8006c4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000000 	.word	0x20000000
 8006c5c:	10624dd3 	.word	0x10624dd3
 8006c60:	fdffe008 	.word	0xfdffe008

08006c64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006cec <SDMMC_GetCmdResp2+0x88>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf0 <SDMMC_GetCmdResp2+0x8c>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	0a5b      	lsrs	r3, r3, #9
 8006c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1e5a      	subs	r2, r3, #1
 8006c86:	60fa      	str	r2, [r7, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c90:	e026      	b.n	8006ce0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0ef      	beq.n	8006c82 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ea      	bne.n	8006c82 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	e00e      	b.n	8006ce0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e003      	b.n	8006ce0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	22c5      	movs	r2, #197	@ 0xc5
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	20000000 	.word	0x20000000
 8006cf0:	10624dd3 	.word	0x10624dd3

08006cf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <SDMMC_GetCmdResp3+0x74>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	@ (8006d6c <SDMMC_GetCmdResp3+0x78>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	0a5b      	lsrs	r3, r3, #9
 8006d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1e5a      	subs	r2, r3, #1
 8006d16:	60fa      	str	r2, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006d20:	e01b      	b.n	8006d5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0ef      	beq.n	8006d12 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ea      	bne.n	8006d12 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d4e:	2304      	movs	r3, #4
 8006d50:	e003      	b.n	8006d5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	22c5      	movs	r2, #197	@ 0xc5
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	10624dd3 	.word	0x10624dd3

08006d70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d7e:	4b35      	ldr	r3, [pc, #212]	@ (8006e54 <SDMMC_GetCmdResp6+0xe4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a35      	ldr	r2, [pc, #212]	@ (8006e58 <SDMMC_GetCmdResp6+0xe8>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	0a5b      	lsrs	r3, r3, #9
 8006d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	61fa      	str	r2, [r7, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006da2:	e052      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0ef      	beq.n	8006d94 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1ea      	bne.n	8006d94 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dd0:	2304      	movs	r3, #4
 8006dd2:	e03a      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d004      	beq.n	8006dea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e02f      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fc0e 	bl	800660c <SDMMC_GetCommandResponse>
 8006df0:	4603      	mov	r3, r0
 8006df2:	461a      	mov	r2, r3
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d001      	beq.n	8006dfe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e025      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	22c5      	movs	r2, #197	@ 0xc5
 8006e02:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006e04:	2100      	movs	r1, #0
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fc0d 	bl	8006626 <SDMMC_GetResponse>
 8006e0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d106      	bne.n	8006e26 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	0c1b      	lsrs	r3, r3, #16
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	e011      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d002      	beq.n	8006e36 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e34:	e009      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006e44:	e001      	b.n	8006e4a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000000 	.word	0x20000000
 8006e58:	10624dd3 	.word	0x10624dd3

08006e5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e64:	4b22      	ldr	r3, [pc, #136]	@ (8006ef0 <SDMMC_GetCmdResp7+0x94>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a22      	ldr	r2, [pc, #136]	@ (8006ef4 <SDMMC_GetCmdResp7+0x98>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	0a5b      	lsrs	r3, r3, #9
 8006e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1e5a      	subs	r2, r3, #1
 8006e7e:	60fa      	str	r2, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e88:	e02c      	b.n	8006ee4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ef      	beq.n	8006e7a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1ea      	bne.n	8006e7a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	e014      	b.n	8006ee4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e009      	b.n	8006ee4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2240      	movs	r2, #64	@ 0x40
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ee2:	2300      	movs	r3, #0
  
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20000000 	.word	0x20000000
 8006ef4:	10624dd3 	.word	0x10624dd3

08006ef8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f00:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <SDMMC_GetCmdError+0x50>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a11      	ldr	r2, [pc, #68]	@ (8006f4c <SDMMC_GetCmdError+0x54>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	0a5b      	lsrs	r3, r3, #9
 8006f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1e5a      	subs	r2, r3, #1
 8006f1a:	60fa      	str	r2, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f24:	e009      	b.n	8006f3a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f1      	beq.n	8006f16 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	22c5      	movs	r2, #197	@ 0xc5
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20000000 	.word	0x20000000
 8006f4c:	10624dd3 	.word	0x10624dd3

08006f50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006f54:	4904      	ldr	r1, [pc, #16]	@ (8006f68 <MX_FATFS_Init+0x18>)
 8006f56:	4805      	ldr	r0, [pc, #20]	@ (8006f6c <MX_FATFS_Init+0x1c>)
 8006f58:	f003 fdea 	bl	800ab30 <FATFS_LinkDriver>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <MX_FATFS_Init+0x20>)
 8006f62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f64:	bf00      	nop
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	200002e0 	.word	0x200002e0
 8006f6c:	0800bee0 	.word	0x0800bee0
 8006f70:	200002dc 	.word	0x200002dc

08006f74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006f78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006f8e:	f000 f888 	bl	80070a2 <BSP_SD_IsDetected>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d001      	beq.n	8006f9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e005      	b.n	8006fa8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8006f9c:	4804      	ldr	r0, [pc, #16]	@ (8006fb0 <BSP_SD_Init+0x2c>)
 8006f9e:	f7fd fc25 	bl	80047ec <HAL_SD_Init>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	200000ec 	.word	0x200000ec

08006fb4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	68f9      	ldr	r1, [r7, #12]
 8006fca:	4806      	ldr	r0, [pc, #24]	@ (8006fe4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006fcc:	f7fd fcc6 	bl	800495c <HAL_SD_ReadBlocks_DMA>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	200000ec 	.word	0x200000ec

08006fe8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	4806      	ldr	r0, [pc, #24]	@ (8007018 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007000:	f7fd fd8e 	bl	8004b20 <HAL_SD_WriteBlocks_DMA>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200000ec 	.word	0x200000ec

0800701c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007020:	4805      	ldr	r0, [pc, #20]	@ (8007038 <BSP_SD_GetCardState+0x1c>)
 8007022:	f7fe f9b3 	bl	800538c <HAL_SD_GetCardState>
 8007026:	4603      	mov	r3, r0
 8007028:	2b04      	cmp	r3, #4
 800702a:	bf14      	ite	ne
 800702c:	2301      	movne	r3, #1
 800702e:	2300      	moveq	r3, #0
 8007030:	b2db      	uxtb	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	200000ec 	.word	0x200000ec

0800703c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	4803      	ldr	r0, [pc, #12]	@ (8007054 <BSP_SD_GetCardInfo+0x18>)
 8007048:	f7fe f974 	bl	8005334 <HAL_SD_GetCardInfo>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	200000ec 	.word	0x200000ec

08007058 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007060:	f000 f818 	bl	8007094 <BSP_SD_AbortCallback>
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007074:	f000 f98c 	bl	8007390 <BSP_SD_WriteCpltCallback>
}
 8007078:	bf00      	nop
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007088:	f000 f98e 	bl	80073a8 <BSP_SD_ReadCpltCallback>
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0

}
 8007098:	bf00      	nop
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b083      	sub	sp, #12
 80070a6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80070a8:	2301      	movs	r3, #1
 80070aa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	b2db      	uxtb	r3, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80070c4:	f7fb f82a 	bl	800211c <HAL_GetTick>
 80070c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80070ca:	e006      	b.n	80070da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070cc:	f7ff ffa6 	bl	800701c <BSP_SD_GetCardState>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e009      	b.n	80070ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80070da:	f7fb f81f 	bl	800211c <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d8f0      	bhi.n	80070cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80070ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007102:	4b0b      	ldr	r3, [pc, #44]	@ (8007130 <SD_CheckStatus+0x38>)
 8007104:	2201      	movs	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007108:	f7ff ff88 	bl	800701c <BSP_SD_GetCardState>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d107      	bne.n	8007122 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007112:	4b07      	ldr	r3, [pc, #28]	@ (8007130 <SD_CheckStatus+0x38>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f023 0301 	bic.w	r3, r3, #1
 800711c:	b2da      	uxtb	r2, r3
 800711e:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <SD_CheckStatus+0x38>)
 8007120:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007122:	4b03      	ldr	r3, [pc, #12]	@ (8007130 <SD_CheckStatus+0x38>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	b2db      	uxtb	r3, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20000009 	.word	0x20000009

08007134 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800713e:	f7ff ff21 	bl	8006f84 <BSP_SD_Init>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d107      	bne.n	8007158 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff ffd4 	bl	80070f8 <SD_CheckStatus>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <SD_initialize+0x34>)
 8007156:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007158:	4b03      	ldr	r3, [pc, #12]	@ (8007168 <SD_initialize+0x34>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b2db      	uxtb	r3, r3
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000009 	.word	0x20000009

0800716c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff ffbd 	bl	80070f8 <SD_CheckStatus>
 800717e:	4603      	mov	r3, r0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800719c:	f247 5030 	movw	r0, #30000	@ 0x7530
 80071a0:	f7ff ff8c 	bl	80070bc <SD_CheckStatusWithTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da01      	bge.n	80071ae <SD_read+0x26>
  {
    return res;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	e03b      	b.n	8007226 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	68b8      	ldr	r0, [r7, #8]
 80071b4:	f7ff fefe 	bl	8006fb4 <BSP_SD_ReadBlocks_DMA>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d132      	bne.n	8007224 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80071be:	4b1c      	ldr	r3, [pc, #112]	@ (8007230 <SD_read+0xa8>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80071c4:	f7fa ffaa 	bl	800211c <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80071ca:	bf00      	nop
 80071cc:	4b18      	ldr	r3, [pc, #96]	@ (8007230 <SD_read+0xa8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d108      	bne.n	80071e6 <SD_read+0x5e>
 80071d4:	f7fa ffa2 	bl	800211c <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	f247 522f 	movw	r2, #29999	@ 0x752f
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d9f2      	bls.n	80071cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80071e6:	4b12      	ldr	r3, [pc, #72]	@ (8007230 <SD_read+0xa8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
 80071f2:	e017      	b.n	8007224 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80071f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007230 <SD_read+0xa8>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80071fa:	f7fa ff8f 	bl	800211c <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007200:	e007      	b.n	8007212 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007202:	f7ff ff0b 	bl	800701c <BSP_SD_GetCardState>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <SD_read+0x8a>
          {
            res = RES_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007210:	e008      	b.n	8007224 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007212:	f7fa ff83 	bl	800211c <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007220:	4293      	cmp	r3, r2
 8007222:	d9ee      	bls.n	8007202 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	2000074c 	.word	0x2000074c

08007234 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
 8007240:	4603      	mov	r3, r0
 8007242:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007248:	4b24      	ldr	r3, [pc, #144]	@ (80072dc <SD_write+0xa8>)
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800724e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007252:	f7ff ff33 	bl	80070bc <SD_CheckStatusWithTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	da01      	bge.n	8007260 <SD_write+0x2c>
  {
    return res;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	e038      	b.n	80072d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68b8      	ldr	r0, [r7, #8]
 8007266:	f7ff febf 	bl	8006fe8 <BSP_SD_WriteBlocks_DMA>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d12f      	bne.n	80072d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007270:	f7fa ff54 	bl	800211c <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007276:	bf00      	nop
 8007278:	4b18      	ldr	r3, [pc, #96]	@ (80072dc <SD_write+0xa8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d108      	bne.n	8007292 <SD_write+0x5e>
 8007280:	f7fa ff4c 	bl	800211c <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800728e:	4293      	cmp	r3, r2
 8007290:	d9f2      	bls.n	8007278 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007292:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <SD_write+0xa8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e017      	b.n	80072d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80072a0:	4b0e      	ldr	r3, [pc, #56]	@ (80072dc <SD_write+0xa8>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80072a6:	f7fa ff39 	bl	800211c <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80072ac:	e007      	b.n	80072be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80072ae:	f7ff feb5 	bl	800701c <BSP_SD_GetCardState>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <SD_write+0x8a>
          {
            res = RES_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]
            break;
 80072bc:	e008      	b.n	80072d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80072be:	f7fa ff2d 	bl	800211c <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d9ee      	bls.n	80072ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000748 	.word	0x20000748

080072e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	@ 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	603a      	str	r2, [r7, #0]
 80072ea:	71fb      	strb	r3, [r7, #7]
 80072ec:	460b      	mov	r3, r1
 80072ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80072f6:	4b25      	ldr	r3, [pc, #148]	@ (800738c <SD_ioctl+0xac>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <SD_ioctl+0x28>
 8007304:	2303      	movs	r3, #3
 8007306:	e03c      	b.n	8007382 <SD_ioctl+0xa2>

  switch (cmd)
 8007308:	79bb      	ldrb	r3, [r7, #6]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d834      	bhi.n	8007378 <SD_ioctl+0x98>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <SD_ioctl+0x34>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007325 	.word	0x08007325
 8007318:	0800732d 	.word	0x0800732d
 800731c:	08007345 	.word	0x08007345
 8007320:	0800735f 	.word	0x0800735f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800732a:	e028      	b.n	800737e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800732c:	f107 030c 	add.w	r3, r7, #12
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fe83 	bl	800703c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007342:	e01c      	b.n	800737e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007344:	f107 030c 	add.w	r3, r7, #12
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fe77 	bl	800703c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	b29a      	uxth	r2, r3
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800735c:	e00f      	b.n	800737e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800735e:	f107 030c 	add.w	r3, r7, #12
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff fe6a 	bl	800703c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736a:	0a5a      	lsrs	r2, r3, #9
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007376:	e002      	b.n	800737e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007378:	2304      	movs	r3, #4
 800737a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800737e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007382:	4618      	mov	r0, r3
 8007384:	3730      	adds	r7, #48	@ 0x30
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20000009 	.word	0x20000009

08007390 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007394:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <BSP_SD_WriteCpltCallback+0x14>)
 8007396:	2201      	movs	r2, #1
 8007398:	601a      	str	r2, [r3, #0]
}
 800739a:	bf00      	nop
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	20000748 	.word	0x20000748

080073a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80073ac:	4b03      	ldr	r3, [pc, #12]	@ (80073bc <BSP_SD_ReadCpltCallback+0x14>)
 80073ae:	2201      	movs	r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
}
 80073b2:	bf00      	nop
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000074c 	.word	0x2000074c

080073c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	4a08      	ldr	r2, [pc, #32]	@ (80073f0 <disk_status+0x30>)
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	79fa      	ldrb	r2, [r7, #7]
 80073d8:	4905      	ldr	r1, [pc, #20]	@ (80073f0 <disk_status+0x30>)
 80073da:	440a      	add	r2, r1
 80073dc:	7a12      	ldrb	r2, [r2, #8]
 80073de:	4610      	mov	r0, r2
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20000778 	.word	0x20000778

080073f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	4a0d      	ldr	r2, [pc, #52]	@ (800743c <disk_initialize+0x48>)
 8007406:	5cd3      	ldrb	r3, [r2, r3]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d111      	bne.n	8007430 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	4a0b      	ldr	r2, [pc, #44]	@ (800743c <disk_initialize+0x48>)
 8007410:	2101      	movs	r1, #1
 8007412:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	4a09      	ldr	r2, [pc, #36]	@ (800743c <disk_initialize+0x48>)
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	79fa      	ldrb	r2, [r7, #7]
 8007422:	4906      	ldr	r1, [pc, #24]	@ (800743c <disk_initialize+0x48>)
 8007424:	440a      	add	r2, r1
 8007426:	7a12      	ldrb	r2, [r2, #8]
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000778 	.word	0x20000778

08007440 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4a0a      	ldr	r2, [pc, #40]	@ (800747c <disk_read+0x3c>)
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	689c      	ldr	r4, [r3, #8]
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4a07      	ldr	r2, [pc, #28]	@ (800747c <disk_read+0x3c>)
 8007460:	4413      	add	r3, r2
 8007462:	7a18      	ldrb	r0, [r3, #8]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68b9      	ldr	r1, [r7, #8]
 800746a:	47a0      	blx	r4
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007470:	7dfb      	ldrb	r3, [r7, #23]
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	bd90      	pop	{r4, r7, pc}
 800747a:	bf00      	nop
 800747c:	20000778 	.word	0x20000778

08007480 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	4a0a      	ldr	r2, [pc, #40]	@ (80074bc <disk_write+0x3c>)
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	68dc      	ldr	r4, [r3, #12]
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	4a07      	ldr	r2, [pc, #28]	@ (80074bc <disk_write+0x3c>)
 80074a0:	4413      	add	r3, r2
 80074a2:	7a18      	ldrb	r0, [r3, #8]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	47a0      	blx	r4
 80074ac:	4603      	mov	r3, r0
 80074ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000778 	.word	0x20000778

080074c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	603a      	str	r2, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
 80074cc:	460b      	mov	r3, r1
 80074ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	4a09      	ldr	r2, [pc, #36]	@ (80074f8 <disk_ioctl+0x38>)
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	79fa      	ldrb	r2, [r7, #7]
 80074de:	4906      	ldr	r1, [pc, #24]	@ (80074f8 <disk_ioctl+0x38>)
 80074e0:	440a      	add	r2, r1
 80074e2:	7a10      	ldrb	r0, [r2, #8]
 80074e4:	79b9      	ldrb	r1, [r7, #6]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4798      	blx	r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
  return res;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20000778 	.word	0x20000778

080074fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800750c:	89fb      	ldrh	r3, [r7, #14]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	b21a      	sxth	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b21b      	sxth	r3, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	b21b      	sxth	r3, r3
 800751c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800751e:	89fb      	ldrh	r3, [r7, #14]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3303      	adds	r3, #3
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	3202      	adds	r2, #2
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	3201      	adds	r2, #1
 8007552:	7812      	ldrb	r2, [r2, #0]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7812      	ldrb	r2, [r2, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
	return rv;
 8007564:	68fb      	ldr	r3, [r7, #12]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
 800757a:	460b      	mov	r3, r1
 800757c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	887a      	ldrh	r2, [r7, #2]
 8007586:	b2d2      	uxtb	r2, r2
 8007588:	701a      	strb	r2, [r3, #0]
 800758a:	887b      	ldrh	r3, [r7, #2]
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	887a      	ldrh	r2, [r7, #2]
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	607a      	str	r2, [r7, #4]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	701a      	strb	r2, [r3, #0]
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00d      	beq.n	8007636 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	1c53      	adds	r3, r2, #1
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1c59      	adds	r1, r3, #1
 8007624:	6179      	str	r1, [r7, #20]
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3b01      	subs	r3, #1
 800762e:	607b      	str	r3, [r7, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f1      	bne.n	800761a <mem_cpy+0x1a>
	}
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007642:	b480      	push	{r7}
 8007644:	b087      	sub	sp, #28
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	617a      	str	r2, [r7, #20]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3b01      	subs	r3, #1
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f3      	bne.n	8007652 <mem_set+0x10>
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	@ 0x24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	61fb      	str	r3, [r7, #28]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	61fa      	str	r2, [r7, #28]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	4619      	mov	r1, r3
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	61ba      	str	r2, [r7, #24]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	1acb      	subs	r3, r1, r3
 80076a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <mem_cmp+0x40>
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d0eb      	beq.n	8007690 <mem_cmp+0x18>

	return r;
 80076b8:	697b      	ldr	r3, [r7, #20]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3724      	adds	r7, #36	@ 0x24
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80076d0:	e002      	b.n	80076d8 <chk_chr+0x12>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3301      	adds	r3, #1
 80076d6:	607b      	str	r3, [r7, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <chk_chr+0x26>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d1f2      	bne.n	80076d2 <chk_chr+0xc>
	return *str;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	781b      	ldrb	r3, [r3, #0]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007706:	2300      	movs	r3, #0
 8007708:	60bb      	str	r3, [r7, #8]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	e029      	b.n	8007764 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007710:	4a27      	ldr	r2, [pc, #156]	@ (80077b0 <chk_lock+0xb4>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	4413      	add	r3, r2
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01d      	beq.n	800775a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800771e:	4a24      	ldr	r2, [pc, #144]	@ (80077b0 <chk_lock+0xb4>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	4413      	add	r3, r2
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d116      	bne.n	800775e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007730:	4a1f      	ldr	r2, [pc, #124]	@ (80077b0 <chk_lock+0xb4>)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	4413      	add	r3, r2
 8007738:	3304      	adds	r3, #4
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007740:	429a      	cmp	r2, r3
 8007742:	d10c      	bne.n	800775e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007744:	4a1a      	ldr	r2, [pc, #104]	@ (80077b0 <chk_lock+0xb4>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	4413      	add	r3, r2
 800774c:	3308      	adds	r3, #8
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007754:	429a      	cmp	r2, r3
 8007756:	d102      	bne.n	800775e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007758:	e007      	b.n	800776a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800775a:	2301      	movs	r3, #1
 800775c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d9d2      	bls.n	8007710 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d109      	bne.n	8007784 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <chk_lock+0x80>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d101      	bne.n	8007780 <chk_lock+0x84>
 800777c:	2300      	movs	r3, #0
 800777e:	e010      	b.n	80077a2 <chk_lock+0xa6>
 8007780:	2312      	movs	r3, #18
 8007782:	e00e      	b.n	80077a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <chk_lock+0xa0>
 800778a:	4a09      	ldr	r2, [pc, #36]	@ (80077b0 <chk_lock+0xb4>)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	4413      	add	r3, r2
 8007792:	330c      	adds	r3, #12
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800779a:	d101      	bne.n	80077a0 <chk_lock+0xa4>
 800779c:	2310      	movs	r3, #16
 800779e:	e000      	b.n	80077a2 <chk_lock+0xa6>
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000758 	.word	0x20000758

080077b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e002      	b.n	80077c6 <enq_lock+0x12>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3301      	adds	r3, #1
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d806      	bhi.n	80077da <enq_lock+0x26>
 80077cc:	4a09      	ldr	r2, [pc, #36]	@ (80077f4 <enq_lock+0x40>)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4413      	add	r3, r2
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f2      	bne.n	80077c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	370c      	adds	r7, #12
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	20000758 	.word	0x20000758

080077f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e01f      	b.n	8007848 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007808:	4a41      	ldr	r2, [pc, #260]	@ (8007910 <inc_lock+0x118>)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	4413      	add	r3, r2
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d113      	bne.n	8007842 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800781a:	4a3d      	ldr	r2, [pc, #244]	@ (8007910 <inc_lock+0x118>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	4413      	add	r3, r2
 8007822:	3304      	adds	r3, #4
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800782a:	429a      	cmp	r2, r3
 800782c:	d109      	bne.n	8007842 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800782e:	4a38      	ldr	r2, [pc, #224]	@ (8007910 <inc_lock+0x118>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	4413      	add	r3, r2
 8007836:	3308      	adds	r3, #8
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800783e:	429a      	cmp	r2, r3
 8007840:	d006      	beq.n	8007850 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3301      	adds	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d9dc      	bls.n	8007808 <inc_lock+0x10>
 800784e:	e000      	b.n	8007852 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007850:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d132      	bne.n	80078be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	e002      	b.n	8007864 <inc_lock+0x6c>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3301      	adds	r3, #1
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d806      	bhi.n	8007878 <inc_lock+0x80>
 800786a:	4a29      	ldr	r2, [pc, #164]	@ (8007910 <inc_lock+0x118>)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	4413      	add	r3, r2
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1f2      	bne.n	800785e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d101      	bne.n	8007882 <inc_lock+0x8a>
 800787e:	2300      	movs	r3, #0
 8007880:	e040      	b.n	8007904 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4922      	ldr	r1, [pc, #136]	@ (8007910 <inc_lock+0x118>)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	440b      	add	r3, r1
 800788e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	491e      	ldr	r1, [pc, #120]	@ (8007910 <inc_lock+0x118>)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	440b      	add	r3, r1
 800789c:	3304      	adds	r3, #4
 800789e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	491a      	ldr	r1, [pc, #104]	@ (8007910 <inc_lock+0x118>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	440b      	add	r3, r1
 80078ac:	3308      	adds	r3, #8
 80078ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80078b0:	4a17      	ldr	r2, [pc, #92]	@ (8007910 <inc_lock+0x118>)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	4413      	add	r3, r2
 80078b8:	330c      	adds	r3, #12
 80078ba:	2200      	movs	r2, #0
 80078bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d009      	beq.n	80078d8 <inc_lock+0xe0>
 80078c4:	4a12      	ldr	r2, [pc, #72]	@ (8007910 <inc_lock+0x118>)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	011b      	lsls	r3, r3, #4
 80078ca:	4413      	add	r3, r2
 80078cc:	330c      	adds	r3, #12
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <inc_lock+0xe0>
 80078d4:	2300      	movs	r3, #0
 80078d6:	e015      	b.n	8007904 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d108      	bne.n	80078f0 <inc_lock+0xf8>
 80078de:	4a0c      	ldr	r2, [pc, #48]	@ (8007910 <inc_lock+0x118>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	330c      	adds	r3, #12
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	e001      	b.n	80078f4 <inc_lock+0xfc>
 80078f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80078f4:	4906      	ldr	r1, [pc, #24]	@ (8007910 <inc_lock+0x118>)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	011b      	lsls	r3, r3, #4
 80078fa:	440b      	add	r3, r1
 80078fc:	330c      	adds	r3, #12
 80078fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3301      	adds	r3, #1
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20000758 	.word	0x20000758

08007914 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3b01      	subs	r3, #1
 8007920:	607b      	str	r3, [r7, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d825      	bhi.n	8007974 <dec_lock+0x60>
		n = Files[i].ctr;
 8007928:	4a17      	ldr	r2, [pc, #92]	@ (8007988 <dec_lock+0x74>)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	4413      	add	r3, r2
 8007930:	330c      	adds	r3, #12
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007936:	89fb      	ldrh	r3, [r7, #14]
 8007938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800793c:	d101      	bne.n	8007942 <dec_lock+0x2e>
 800793e:	2300      	movs	r3, #0
 8007940:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007942:	89fb      	ldrh	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <dec_lock+0x3a>
 8007948:	89fb      	ldrh	r3, [r7, #14]
 800794a:	3b01      	subs	r3, #1
 800794c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800794e:	4a0e      	ldr	r2, [pc, #56]	@ (8007988 <dec_lock+0x74>)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	4413      	add	r3, r2
 8007956:	330c      	adds	r3, #12
 8007958:	89fa      	ldrh	r2, [r7, #14]
 800795a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800795c:	89fb      	ldrh	r3, [r7, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <dec_lock+0x5a>
 8007962:	4a09      	ldr	r2, [pc, #36]	@ (8007988 <dec_lock+0x74>)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	4413      	add	r3, r2
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	737b      	strb	r3, [r7, #13]
 8007972:	e001      	b.n	8007978 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007974:	2302      	movs	r3, #2
 8007976:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007978:	7b7b      	ldrb	r3, [r7, #13]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000758 	.word	0x20000758

0800798c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007994:	2300      	movs	r3, #0
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e010      	b.n	80079bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800799a:	4a0d      	ldr	r2, [pc, #52]	@ (80079d0 <clear_lock+0x44>)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	4413      	add	r3, r2
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d105      	bne.n	80079b6 <clear_lock+0x2a>
 80079aa:	4a09      	ldr	r2, [pc, #36]	@ (80079d0 <clear_lock+0x44>)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	4413      	add	r3, r2
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d9eb      	bls.n	800799a <clear_lock+0xe>
	}
}
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	20000758 	.word	0x20000758

080079d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	78db      	ldrb	r3, [r3, #3]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d034      	beq.n	8007a52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7858      	ldrb	r0, [r3, #1]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80079f8:	2301      	movs	r3, #1
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	f7ff fd40 	bl	8007480 <disk_write>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d002      	beq.n	8007a0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]
 8007a0a:	e022      	b.n	8007a52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	1ad2      	subs	r2, r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d217      	bcs.n	8007a52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	789b      	ldrb	r3, [r3, #2]
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	e010      	b.n	8007a4c <sync_window+0x78>
					wsect += fs->fsize;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4413      	add	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	7858      	ldrb	r0, [r3, #1]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007a3e:	2301      	movs	r3, #1
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	f7ff fd1d 	bl	8007480 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d8eb      	bhi.n	8007a2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d01b      	beq.n	8007aac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff ffad 	bl	80079d4 <sync_window>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d113      	bne.n	8007aac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	7858      	ldrb	r0, [r3, #1]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007a8e:	2301      	movs	r3, #1
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	f7ff fcd5 	bl	8007440 <disk_read>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d004      	beq.n	8007aa6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff ff87 	bl	80079d4 <sync_window>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d158      	bne.n	8007b82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b03      	cmp	r3, #3
 8007ad6:	d148      	bne.n	8007b6a <sync_fs+0xb2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	791b      	ldrb	r3, [r3, #4]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d144      	bne.n	8007b6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3334      	adds	r3, #52	@ 0x34
 8007ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fda9 	bl	8007642 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3334      	adds	r3, #52	@ 0x34
 8007af4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007af8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff fd38 	bl	8007572 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	3334      	adds	r3, #52	@ 0x34
 8007b06:	4921      	ldr	r1, [pc, #132]	@ (8007b8c <sync_fs+0xd4>)
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fd4d 	bl	80075a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3334      	adds	r3, #52	@ 0x34
 8007b12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007b16:	491e      	ldr	r1, [pc, #120]	@ (8007b90 <sync_fs+0xd8>)
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fd45 	bl	80075a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3334      	adds	r3, #52	@ 0x34
 8007b22:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f7ff fd3b 	bl	80075a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3334      	adds	r3, #52	@ 0x34
 8007b36:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7ff fd31 	bl	80075a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7858      	ldrb	r0, [r3, #1]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f7ff fc8e 	bl	8007480 <disk_write>
			fs->fsi_flag = 0;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7ff fca4 	bl	80074c0 <disk_ioctl>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <sync_fs+0xca>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	41615252 	.word	0x41615252
 8007b90:	61417272 	.word	0x61417272

08007b94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3b02      	subs	r3, #2
 8007ba2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	3b02      	subs	r3, #2
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d301      	bcc.n	8007bb4 <clust2sect+0x20>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e008      	b.n	8007bc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	895b      	ldrh	r3, [r3, #10]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	fb03 f202 	mul.w	r2, r3, r2
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	4413      	add	r3, r2
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b086      	sub	sp, #24
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d904      	bls.n	8007bf2 <get_fat+0x20>
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	e08e      	b.n	8007d16 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d061      	beq.n	8007cca <get_fat+0xf8>
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	dc7b      	bgt.n	8007d02 <get_fat+0x130>
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d002      	beq.n	8007c14 <get_fat+0x42>
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d041      	beq.n	8007c96 <get_fat+0xc4>
 8007c12:	e076      	b.n	8007d02 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	085b      	lsrs	r3, r3, #1
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	0a5b      	lsrs	r3, r3, #9
 8007c2a:	4413      	add	r3, r2
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6938      	ldr	r0, [r7, #16]
 8007c30:	f7ff ff14 	bl	8007a5c <move_window>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d166      	bne.n	8007d08 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	60fa      	str	r2, [r7, #12]
 8007c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4413      	add	r3, r2
 8007c48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c4c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	0a5b      	lsrs	r3, r3, #9
 8007c56:	4413      	add	r3, r2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6938      	ldr	r0, [r7, #16]
 8007c5c:	f7ff fefe 	bl	8007a5c <move_window>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d152      	bne.n	8007d0c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d002      	beq.n	8007c8c <get_fat+0xba>
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	091b      	lsrs	r3, r3, #4
 8007c8a:	e002      	b.n	8007c92 <get_fat+0xc0>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c92:	617b      	str	r3, [r7, #20]
			break;
 8007c94:	e03f      	b.n	8007d16 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	4413      	add	r3, r2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6938      	ldr	r0, [r7, #16]
 8007ca4:	f7ff feda 	bl	8007a5c <move_window>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d130      	bne.n	8007d10 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007cbc:	4413      	add	r3, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fc1c 	bl	80074fc <ld_word>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	617b      	str	r3, [r7, #20]
			break;
 8007cc8:	e025      	b.n	8007d16 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	09db      	lsrs	r3, r3, #7
 8007cd2:	4413      	add	r3, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6938      	ldr	r0, [r7, #16]
 8007cd8:	f7ff fec0 	bl	8007a5c <move_window>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d118      	bne.n	8007d14 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007cf0:	4413      	add	r3, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff fc1a 	bl	800752c <ld_dword>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007cfe:	617b      	str	r3, [r7, #20]
			break;
 8007d00:	e009      	b.n	8007d16 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007d02:	2301      	movs	r3, #1
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e006      	b.n	8007d16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007d14:	bf00      	nop
		}
	}

	return val;
 8007d16:	697b      	ldr	r3, [r7, #20]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007d20:	b590      	push	{r4, r7, lr}
 8007d22:	b089      	sub	sp, #36	@ 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	f240 80d9 	bls.w	8007eea <put_fat+0x1ca>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	f080 80d3 	bcs.w	8007eea <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	f000 8096 	beq.w	8007e7a <put_fat+0x15a>
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	f300 80cb 	bgt.w	8007eea <put_fat+0x1ca>
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d002      	beq.n	8007d5e <put_fat+0x3e>
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d06e      	beq.n	8007e3a <put_fat+0x11a>
 8007d5c:	e0c5      	b.n	8007eea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	085b      	lsrs	r3, r3, #1
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4413      	add	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	0a5b      	lsrs	r3, r3, #9
 8007d74:	4413      	add	r3, r2
 8007d76:	4619      	mov	r1, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fe6f 	bl	8007a5c <move_window>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d82:	7ffb      	ldrb	r3, [r7, #31]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f040 80a9 	bne.w	8007edc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	1c59      	adds	r1, r3, #1
 8007d94:	61b9      	str	r1, [r7, #24]
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	4413      	add	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00d      	beq.n	8007dc4 <put_fat+0xa4>
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	b25b      	sxtb	r3, r3
 8007dae:	f003 030f 	and.w	r3, r3, #15
 8007db2:	b25a      	sxtb	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	b25b      	sxtb	r3, r3
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e001      	b.n	8007dc8 <put_fat+0xa8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	0a5b      	lsrs	r3, r3, #9
 8007dda:	4413      	add	r3, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fe3c 	bl	8007a5c <move_window>
 8007de4:	4603      	mov	r3, r0
 8007de6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007de8:	7ffb      	ldrb	r3, [r7, #31]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d178      	bne.n	8007ee0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfa:	4413      	add	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <put_fat+0xf0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	091b      	lsrs	r3, r3, #4
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	e00e      	b.n	8007e2e <put_fat+0x10e>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	b25b      	sxtb	r3, r3
 8007e16:	f023 030f 	bic.w	r3, r3, #15
 8007e1a:	b25a      	sxtb	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	b25b      	sxtb	r3, r3
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	b25b      	sxtb	r3, r3
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	70da      	strb	r2, [r3, #3]
			break;
 8007e38:	e057      	b.n	8007eea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	4413      	add	r3, r2
 8007e44:	4619      	mov	r1, r3
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff fe08 	bl	8007a5c <move_window>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e50:	7ffb      	ldrb	r3, [r7, #31]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d146      	bne.n	8007ee4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007e64:	4413      	add	r3, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	b292      	uxth	r2, r2
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff fb80 	bl	8007572 <st_word>
			fs->wflag = 1;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	70da      	strb	r2, [r3, #3]
			break;
 8007e78:	e037      	b.n	8007eea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	09db      	lsrs	r3, r3, #7
 8007e82:	4413      	add	r3, r2
 8007e84:	4619      	mov	r1, r3
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff fde8 	bl	8007a5c <move_window>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e90:	7ffb      	ldrb	r3, [r7, #31]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d128      	bne.n	8007ee8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007eaa:	4413      	add	r3, r2
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fb3d 	bl	800752c <ld_dword>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007eb8:	4323      	orrs	r3, r4
 8007eba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007eca:	4413      	add	r3, r2
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fb6a 	bl	80075a8 <st_dword>
			fs->wflag = 1;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	70da      	strb	r2, [r3, #3]
			break;
 8007eda:	e006      	b.n	8007eea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007edc:	bf00      	nop
 8007ede:	e004      	b.n	8007eea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ee0:	bf00      	nop
 8007ee2:	e002      	b.n	8007eea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ee4:	bf00      	nop
 8007ee6:	e000      	b.n	8007eea <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ee8:	bf00      	nop
		}
	}
	return res;
 8007eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3724      	adds	r7, #36	@ 0x24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd90      	pop	{r4, r7, pc}

08007ef4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d904      	bls.n	8007f1a <remove_chain+0x26>
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d301      	bcc.n	8007f1e <remove_chain+0x2a>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e04b      	b.n	8007fb6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	69b8      	ldr	r0, [r7, #24]
 8007f2c:	f7ff fef8 	bl	8007d20 <put_fat>
 8007f30:	4603      	mov	r3, r0
 8007f32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f34:	7ffb      	ldrb	r3, [r7, #31]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <remove_chain+0x4a>
 8007f3a:	7ffb      	ldrb	r3, [r7, #31]
 8007f3c:	e03b      	b.n	8007fb6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff fe46 	bl	8007bd2 <get_fat>
 8007f46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d031      	beq.n	8007fb2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <remove_chain+0x64>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e02e      	b.n	8007fb6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5e:	d101      	bne.n	8007f64 <remove_chain+0x70>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e028      	b.n	8007fb6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f64:	2200      	movs	r2, #0
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	69b8      	ldr	r0, [r7, #24]
 8007f6a:	f7ff fed9 	bl	8007d20 <put_fat>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f72:	7ffb      	ldrb	r3, [r7, #31]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <remove_chain+0x88>
 8007f78:	7ffb      	ldrb	r3, [r7, #31]
 8007f7a:	e01c      	b.n	8007fb6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	695a      	ldr	r2, [r3, #20]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	3b02      	subs	r3, #2
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d20b      	bcs.n	8007fa2 <remove_chain+0xae>
			fs->free_clst++;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	791b      	ldrb	r3, [r3, #4]
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d3c6      	bcc.n	8007f3e <remove_chain+0x4a>
 8007fb0:	e000      	b.n	8007fb4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007fb2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3720      	adds	r7, #32
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b088      	sub	sp, #32
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10d      	bne.n	8007ff0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d004      	beq.n	8007fea <create_chain+0x2c>
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d31b      	bcc.n	8008022 <create_chain+0x64>
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	e018      	b.n	8008022 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff fded 	bl	8007bd2 <get_fat>
 8007ff8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d801      	bhi.n	8008004 <create_chain+0x46>
 8008000:	2301      	movs	r3, #1
 8008002:	e070      	b.n	80080e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d101      	bne.n	8008010 <create_chain+0x52>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	e06a      	b.n	80080e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	429a      	cmp	r2, r3
 8008018:	d201      	bcs.n	800801e <create_chain+0x60>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	e063      	b.n	80080e6 <create_chain+0x128>
		scl = clst;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3301      	adds	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	429a      	cmp	r2, r3
 8008034:	d307      	bcc.n	8008046 <create_chain+0x88>
				ncl = 2;
 8008036:	2302      	movs	r3, #2
 8008038:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	429a      	cmp	r2, r3
 8008040:	d901      	bls.n	8008046 <create_chain+0x88>
 8008042:	2300      	movs	r3, #0
 8008044:	e04f      	b.n	80080e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008046:	69f9      	ldr	r1, [r7, #28]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fdc2 	bl	8007bd2 <get_fat>
 800804e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d003      	beq.n	8008064 <create_chain+0xa6>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008062:	d101      	bne.n	8008068 <create_chain+0xaa>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	e03e      	b.n	80080e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	d1da      	bne.n	8008026 <create_chain+0x68>
 8008070:	2300      	movs	r3, #0
 8008072:	e038      	b.n	80080e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008074:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008076:	f04f 32ff 	mov.w	r2, #4294967295
 800807a:	69f9      	ldr	r1, [r7, #28]
 800807c:	6938      	ldr	r0, [r7, #16]
 800807e:	f7ff fe4f 	bl	8007d20 <put_fat>
 8008082:	4603      	mov	r3, r0
 8008084:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d109      	bne.n	80080a0 <create_chain+0xe2>
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d006      	beq.n	80080a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f7ff fe42 	bl	8007d20 <put_fat>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d116      	bne.n	80080d4 <create_chain+0x116>
		fs->last_clst = ncl;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	695a      	ldr	r2, [r3, #20]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	3b02      	subs	r3, #2
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d804      	bhi.n	80080c4 <create_chain+0x106>
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	1e5a      	subs	r2, r3, #1
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	711a      	strb	r2, [r3, #4]
 80080d2:	e007      	b.n	80080e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d102      	bne.n	80080e0 <create_chain+0x122>
 80080da:	f04f 33ff 	mov.w	r3, #4294967295
 80080de:	e000      	b.n	80080e2 <create_chain+0x124>
 80080e0:	2301      	movs	r3, #1
 80080e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080e4:	69fb      	ldr	r3, [r7, #28]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b087      	sub	sp, #28
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008102:	3304      	adds	r3, #4
 8008104:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	0a5b      	lsrs	r3, r3, #9
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	8952      	ldrh	r2, [r2, #10]
 800810e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008112:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1d1a      	adds	r2, r3, #4
 8008118:	613a      	str	r2, [r7, #16]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <clmt_clust+0x3a>
 8008124:	2300      	movs	r3, #0
 8008126:	e010      	b.n	800814a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	429a      	cmp	r2, r3
 800812e:	d307      	bcc.n	8008140 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3304      	adds	r3, #4
 800813c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800813e:	e7e9      	b.n	8008114 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008140:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4413      	add	r3, r2
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800816c:	d204      	bcs.n	8008178 <dir_sdi+0x22>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f003 031f 	and.w	r3, r3, #31
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <dir_sdi+0x26>
		return FR_INT_ERR;
 8008178:	2302      	movs	r3, #2
 800817a:	e063      	b.n	8008244 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <dir_sdi+0x46>
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d902      	bls.n	800819c <dir_sdi+0x46>
		clst = fs->dirbase;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800819a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10c      	bne.n	80081bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	095b      	lsrs	r3, r3, #5
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	8912      	ldrh	r2, [r2, #8]
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d301      	bcc.n	80081b2 <dir_sdi+0x5c>
 80081ae:	2302      	movs	r3, #2
 80081b0:	e048      	b.n	8008244 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	61da      	str	r2, [r3, #28]
 80081ba:	e029      	b.n	8008210 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	025b      	lsls	r3, r3, #9
 80081c2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081c4:	e019      	b.n	80081fa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6979      	ldr	r1, [r7, #20]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff fd01 	bl	8007bd2 <get_fat>
 80081d0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d8:	d101      	bne.n	80081de <dir_sdi+0x88>
 80081da:	2301      	movs	r3, #1
 80081dc:	e032      	b.n	8008244 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d904      	bls.n	80081ee <dir_sdi+0x98>
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d301      	bcc.n	80081f2 <dir_sdi+0x9c>
 80081ee:	2302      	movs	r3, #2
 80081f0:	e028      	b.n	8008244 <dir_sdi+0xee>
			ofs -= csz;
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d2e1      	bcs.n	80081c6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008202:	6979      	ldr	r1, [r7, #20]
 8008204:	6938      	ldr	r0, [r7, #16]
 8008206:	f7ff fcc5 	bl	8007b94 <clust2sect>
 800820a:	4602      	mov	r2, r0
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <dir_sdi+0xcc>
 800821e:	2302      	movs	r3, #2
 8008220:	e010      	b.n	8008244 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	0a5b      	lsrs	r3, r3, #9
 800822a:	441a      	add	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800823c:	441a      	add	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	3320      	adds	r3, #32
 8008262:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <dir_next+0x28>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008272:	d301      	bcc.n	8008278 <dir_next+0x2c>
 8008274:	2304      	movs	r3, #4
 8008276:	e0aa      	b.n	80083ce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	2b00      	cmp	r3, #0
 8008280:	f040 8098 	bne.w	80083b4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10b      	bne.n	80082ae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	8912      	ldrh	r2, [r2, #8]
 800829e:	4293      	cmp	r3, r2
 80082a0:	f0c0 8088 	bcc.w	80083b4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	61da      	str	r2, [r3, #28]
 80082aa:	2304      	movs	r3, #4
 80082ac:	e08f      	b.n	80083ce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	0a5b      	lsrs	r3, r3, #9
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	8952      	ldrh	r2, [r2, #10]
 80082b6:	3a01      	subs	r2, #1
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d17a      	bne.n	80083b4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	4619      	mov	r1, r3
 80082c6:	4610      	mov	r0, r2
 80082c8:	f7ff fc83 	bl	8007bd2 <get_fat>
 80082cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d801      	bhi.n	80082d8 <dir_next+0x8c>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e07a      	b.n	80083ce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d101      	bne.n	80082e4 <dir_next+0x98>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e074      	b.n	80083ce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d358      	bcc.n	80083a0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d104      	bne.n	80082fe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	61da      	str	r2, [r3, #28]
 80082fa:	2304      	movs	r3, #4
 80082fc:	e067      	b.n	80083ce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f7ff fe59 	bl	8007fbe <create_chain>
 800830c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <dir_next+0xcc>
 8008314:	2307      	movs	r3, #7
 8008316:	e05a      	b.n	80083ce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d101      	bne.n	8008322 <dir_next+0xd6>
 800831e:	2302      	movs	r3, #2
 8008320:	e055      	b.n	80083ce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d101      	bne.n	800832e <dir_next+0xe2>
 800832a:	2301      	movs	r3, #1
 800832c:	e04f      	b.n	80083ce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f7ff fb50 	bl	80079d4 <sync_window>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <dir_next+0xf2>
 800833a:	2301      	movs	r3, #1
 800833c:	e047      	b.n	80083ce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	3334      	adds	r3, #52	@ 0x34
 8008342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008346:	2100      	movs	r1, #0
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff f97a 	bl	8007642 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	6979      	ldr	r1, [r7, #20]
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f7ff fc1d 	bl	8007b94 <clust2sect>
 800835a:	4602      	mov	r2, r0
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008360:	e012      	b.n	8008388 <dir_next+0x13c>
						fs->wflag = 1;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fb33 	bl	80079d4 <sync_window>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <dir_next+0x12c>
 8008374:	2301      	movs	r3, #1
 8008376:	e02a      	b.n	80083ce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	3301      	adds	r3, #1
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	631a      	str	r2, [r3, #48]	@ 0x30
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	895b      	ldrh	r3, [r3, #10]
 800838c:	461a      	mov	r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	4293      	cmp	r3, r2
 8008392:	d3e6      	bcc.n	8008362 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80083a6:	6979      	ldr	r1, [r7, #20]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fbf3 	bl	8007b94 <clust2sect>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	441a      	add	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b086      	sub	sp, #24
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff feb4 	bl	8008156 <dir_sdi>
 80083ee:	4603      	mov	r3, r0
 80083f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d12b      	bne.n	8008450 <dir_alloc+0x7a>
		n = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	4619      	mov	r1, r3
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fb2a 	bl	8007a5c <move_window>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d11d      	bne.n	800844e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2be5      	cmp	r3, #229	@ 0xe5
 800841a:	d004      	beq.n	8008426 <dir_alloc+0x50>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d107      	bne.n	8008436 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3301      	adds	r3, #1
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d102      	bne.n	800843a <dir_alloc+0x64>
 8008434:	e00c      	b.n	8008450 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800843a:	2101      	movs	r1, #1
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff ff05 	bl	800824c <dir_next>
 8008442:	4603      	mov	r3, r0
 8008444:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0d7      	beq.n	80083fc <dir_alloc+0x26>
 800844c:	e000      	b.n	8008450 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800844e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	2b04      	cmp	r3, #4
 8008454:	d101      	bne.n	800845a <dir_alloc+0x84>
 8008456:	2307      	movs	r3, #7
 8008458:	75fb      	strb	r3, [r7, #23]
	return res;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	331a      	adds	r3, #26
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff f842 	bl	80074fc <ld_word>
 8008478:	4603      	mov	r3, r0
 800847a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b03      	cmp	r3, #3
 8008482:	d109      	bne.n	8008498 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	3314      	adds	r3, #20
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff f837 	bl	80074fc <ld_word>
 800848e:	4603      	mov	r3, r0
 8008490:	041b      	lsls	r3, r3, #16
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	331a      	adds	r3, #26
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	b292      	uxth	r2, r2
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff f85a 	bl	8007572 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d109      	bne.n	80084da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f103 0214 	add.w	r2, r3, #20
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	4619      	mov	r1, r3
 80084d4:	4610      	mov	r0, r2
 80084d6:	f7ff f84c 	bl	8007572 <st_word>
	}
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	331a      	adds	r3, #26
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff f802 	bl	80074fc <ld_word>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d001      	beq.n	8008502 <cmp_lfn+0x1e>
 80084fe:	2300      	movs	r3, #0
 8008500:	e059      	b.n	80085b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800850a:	1e5a      	subs	r2, r3, #1
 800850c:	4613      	mov	r3, r2
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	4413      	add	r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008518:	2301      	movs	r3, #1
 800851a:	81fb      	strh	r3, [r7, #14]
 800851c:	2300      	movs	r3, #0
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	e033      	b.n	800858a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008522:	4a27      	ldr	r2, [pc, #156]	@ (80085c0 <cmp_lfn+0xdc>)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	4413      	add	r3, r2
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	4413      	add	r3, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe ffe3 	bl	80074fc <ld_word>
 8008536:	4603      	mov	r3, r0
 8008538:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800853a:	89fb      	ldrh	r3, [r7, #14]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01a      	beq.n	8008576 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2bfe      	cmp	r3, #254	@ 0xfe
 8008544:	d812      	bhi.n	800856c <cmp_lfn+0x88>
 8008546:	89bb      	ldrh	r3, [r7, #12]
 8008548:	4618      	mov	r0, r3
 800854a:	f002 fb3d 	bl	800abc8 <ff_wtoupper>
 800854e:	4603      	mov	r3, r0
 8008550:	461c      	mov	r4, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	617a      	str	r2, [r7, #20]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f002 fb31 	bl	800abc8 <ff_wtoupper>
 8008566:	4603      	mov	r3, r0
 8008568:	429c      	cmp	r4, r3
 800856a:	d001      	beq.n	8008570 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800856c:	2300      	movs	r3, #0
 800856e:	e022      	b.n	80085b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008570:	89bb      	ldrh	r3, [r7, #12]
 8008572:	81fb      	strh	r3, [r7, #14]
 8008574:	e006      	b.n	8008584 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008576:	89bb      	ldrh	r3, [r7, #12]
 8008578:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800857c:	4293      	cmp	r3, r2
 800857e:	d001      	beq.n	8008584 <cmp_lfn+0xa0>
 8008580:	2300      	movs	r3, #0
 8008582:	e018      	b.n	80085b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	3301      	adds	r3, #1
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b0c      	cmp	r3, #12
 800858e:	d9c8      	bls.n	8008522 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <cmp_lfn+0xd0>
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <cmp_lfn+0xd0>
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <cmp_lfn+0xd0>
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80085b4:	2301      	movs	r3, #1
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd90      	pop	{r4, r7, pc}
 80085be:	bf00      	nop
 80085c0:	0800bf74 	.word	0x0800bf74

080085c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	331a      	adds	r3, #26
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe ff92 	bl	80074fc <ld_word>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <pick_lfn+0x1e>
 80085de:	2300      	movs	r3, #0
 80085e0:	e04d      	b.n	800867e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ea:	1e5a      	subs	r2, r3, #1
 80085ec:	4613      	mov	r3, r2
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80085f8:	2301      	movs	r3, #1
 80085fa:	81fb      	strh	r3, [r7, #14]
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	e028      	b.n	8008654 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008602:	4a21      	ldr	r2, [pc, #132]	@ (8008688 <pick_lfn+0xc4>)
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	4413      	add	r3, r2
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	4413      	add	r3, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe ff73 	bl	80074fc <ld_word>
 8008616:	4603      	mov	r3, r0
 8008618:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800861a:	89fb      	ldrh	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00f      	beq.n	8008640 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2bfe      	cmp	r3, #254	@ 0xfe
 8008624:	d901      	bls.n	800862a <pick_lfn+0x66>
 8008626:	2300      	movs	r3, #0
 8008628:	e029      	b.n	800867e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800862a:	89bb      	ldrh	r3, [r7, #12]
 800862c:	81fb      	strh	r3, [r7, #14]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	617a      	str	r2, [r7, #20]
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	4413      	add	r3, r2
 800863a:	89fa      	ldrh	r2, [r7, #14]
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e006      	b.n	800864e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008640:	89bb      	ldrh	r3, [r7, #12]
 8008642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008646:	4293      	cmp	r3, r2
 8008648:	d001      	beq.n	800864e <pick_lfn+0x8a>
 800864a:	2300      	movs	r3, #0
 800864c:	e017      	b.n	800867e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	3301      	adds	r3, #1
 8008652:	613b      	str	r3, [r7, #16]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b0c      	cmp	r3, #12
 8008658:	d9d3      	bls.n	8008602 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	2bfe      	cmp	r3, #254	@ 0xfe
 800866a:	d901      	bls.n	8008670 <pick_lfn+0xac>
 800866c:	2300      	movs	r3, #0
 800866e:	e006      	b.n	800867e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	4413      	add	r3, r2
 8008678:	2200      	movs	r2, #0
 800867a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800867c:	2301      	movs	r3, #1
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	0800bf74 	.word	0x0800bf74

0800868c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	4611      	mov	r1, r2
 8008698:	461a      	mov	r2, r3
 800869a:	460b      	mov	r3, r1
 800869c:	71fb      	strb	r3, [r7, #7]
 800869e:	4613      	mov	r3, r2
 80086a0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	330d      	adds	r3, #13
 80086a6:	79ba      	ldrb	r2, [r7, #6]
 80086a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	330b      	adds	r3, #11
 80086ae:	220f      	movs	r2, #15
 80086b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	330c      	adds	r3, #12
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	331a      	adds	r3, #26
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe ff56 	bl	8007572 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	1e5a      	subs	r2, r3, #1
 80086ca:	4613      	mov	r3, r2
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	82fb      	strh	r3, [r7, #22]
 80086da:	2300      	movs	r3, #0
 80086dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80086de:	8afb      	ldrh	r3, [r7, #22]
 80086e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d007      	beq.n	80086f8 <put_lfn+0x6c>
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	61fa      	str	r2, [r7, #28]
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80086f8:	4a17      	ldr	r2, [pc, #92]	@ (8008758 <put_lfn+0xcc>)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	4413      	add	r3, r2
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	4413      	add	r3, r2
 8008706:	8afa      	ldrh	r2, [r7, #22]
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe ff31 	bl	8007572 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008710:	8afb      	ldrh	r3, [r7, #22]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <put_lfn+0x90>
 8008716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800871a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	3301      	adds	r3, #1
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d9da      	bls.n	80086de <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008728:	8afb      	ldrh	r3, [r7, #22]
 800872a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800872e:	4293      	cmp	r3, r2
 8008730:	d006      	beq.n	8008740 <put_lfn+0xb4>
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	4413      	add	r3, r2
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <put_lfn+0xbc>
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008746:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	79fa      	ldrb	r2, [r7, #7]
 800874c:	701a      	strb	r2, [r3, #0]
}
 800874e:	bf00      	nop
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	0800bf74 	.word	0x0800bf74

0800875c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	@ 0x30
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800876a:	220b      	movs	r2, #11
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7fe ff46 	bl	8007600 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b05      	cmp	r3, #5
 8008778:	d929      	bls.n	80087ce <gen_numname+0x72>
		sr = seq;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800877e:	e020      	b.n	80087c2 <gen_numname+0x66>
			wc = *lfn++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	1c9a      	adds	r2, r3, #2
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800878a:	2300      	movs	r3, #0
 800878c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800878e:	e015      	b.n	80087bc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	005a      	lsls	r2, r3, #1
 8008794:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	4413      	add	r3, r2
 800879c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800879e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80087a0:	085b      	lsrs	r3, r3, #1
 80087a2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <gen_numname+0x5a>
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	4b30      	ldr	r3, [pc, #192]	@ (8008874 <gen_numname+0x118>)
 80087b2:	4053      	eors	r3, r2
 80087b4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	3301      	adds	r3, #1
 80087ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d9e6      	bls.n	8008790 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1da      	bne.n	8008780 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80087ce:	2307      	movs	r3, #7
 80087d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	3330      	adds	r3, #48	@ 0x30
 80087de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80087e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087e6:	2b39      	cmp	r3, #57	@ 0x39
 80087e8:	d904      	bls.n	80087f4 <gen_numname+0x98>
 80087ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087ee:	3307      	adds	r3, #7
 80087f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80087f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f6:	1e5a      	subs	r2, r3, #1
 80087f8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80087fa:	3330      	adds	r3, #48	@ 0x30
 80087fc:	443b      	add	r3, r7
 80087fe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008802:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	091b      	lsrs	r3, r3, #4
 800880a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1df      	bne.n	80087d2 <gen_numname+0x76>
	ns[i] = '~';
 8008812:	f107 0214 	add.w	r2, r7, #20
 8008816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008818:	4413      	add	r3, r2
 800881a:	227e      	movs	r2, #126	@ 0x7e
 800881c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800881e:	2300      	movs	r3, #0
 8008820:	627b      	str	r3, [r7, #36]	@ 0x24
 8008822:	e002      	b.n	800882a <gen_numname+0xce>
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	3301      	adds	r3, #1
 8008828:	627b      	str	r3, [r7, #36]	@ 0x24
 800882a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882e:	429a      	cmp	r2, r3
 8008830:	d205      	bcs.n	800883e <gen_numname+0xe2>
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008836:	4413      	add	r3, r2
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b20      	cmp	r3, #32
 800883c:	d1f2      	bne.n	8008824 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008840:	2b07      	cmp	r3, #7
 8008842:	d807      	bhi.n	8008854 <gen_numname+0xf8>
 8008844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	62ba      	str	r2, [r7, #40]	@ 0x28
 800884a:	3330      	adds	r3, #48	@ 0x30
 800884c:	443b      	add	r3, r7
 800884e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008852:	e000      	b.n	8008856 <gen_numname+0xfa>
 8008854:	2120      	movs	r1, #32
 8008856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	627a      	str	r2, [r7, #36]	@ 0x24
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	460a      	mov	r2, r1
 8008862:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008866:	2b07      	cmp	r3, #7
 8008868:	d9e9      	bls.n	800883e <gen_numname+0xe2>
}
 800886a:	bf00      	nop
 800886c:	bf00      	nop
 800886e:	3730      	adds	r7, #48	@ 0x30
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	00011021 	.word	0x00011021

08008878 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008884:	230b      	movs	r3, #11
 8008886:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	b2da      	uxtb	r2, r3
 800888c:	0852      	lsrs	r2, r2, #1
 800888e:	01db      	lsls	r3, r3, #7
 8008890:	4313      	orrs	r3, r2
 8008892:	b2da      	uxtb	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1c59      	adds	r1, r3, #1
 8008898:	6079      	str	r1, [r7, #4]
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	4413      	add	r3, r2
 800889e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	60bb      	str	r3, [r7, #8]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1ed      	bne.n	8008888 <sum_sfn+0x10>
	return sum;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80088c4:	2304      	movs	r3, #4
 80088c6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80088ce:	23ff      	movs	r3, #255	@ 0xff
 80088d0:	757b      	strb	r3, [r7, #21]
 80088d2:	23ff      	movs	r3, #255	@ 0xff
 80088d4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80088d6:	e081      	b.n	80089dc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	4619      	mov	r1, r3
 80088de:	6938      	ldr	r0, [r7, #16]
 80088e0:	f7ff f8bc 	bl	8007a5c <move_window>
 80088e4:	4603      	mov	r3, r0
 80088e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d17c      	bne.n	80089e8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80088f6:	7dbb      	ldrb	r3, [r7, #22]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80088fc:	2304      	movs	r3, #4
 80088fe:	75fb      	strb	r3, [r7, #23]
 8008900:	e077      	b.n	80089f2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	330b      	adds	r3, #11
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800890e:	73fb      	strb	r3, [r7, #15]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7bfa      	ldrb	r2, [r7, #15]
 8008914:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008916:	7dbb      	ldrb	r3, [r7, #22]
 8008918:	2be5      	cmp	r3, #229	@ 0xe5
 800891a:	d00e      	beq.n	800893a <dir_read+0x80>
 800891c:	7dbb      	ldrb	r3, [r7, #22]
 800891e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008920:	d00b      	beq.n	800893a <dir_read+0x80>
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	f023 0320 	bic.w	r3, r3, #32
 8008928:	2b08      	cmp	r3, #8
 800892a:	bf0c      	ite	eq
 800892c:	2301      	moveq	r3, #1
 800892e:	2300      	movne	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	4293      	cmp	r3, r2
 8008938:	d002      	beq.n	8008940 <dir_read+0x86>
				ord = 0xFF;
 800893a:	23ff      	movs	r3, #255	@ 0xff
 800893c:	757b      	strb	r3, [r7, #21]
 800893e:	e044      	b.n	80089ca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	2b0f      	cmp	r3, #15
 8008944:	d12f      	bne.n	80089a6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008946:	7dbb      	ldrb	r3, [r7, #22]
 8008948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00d      	beq.n	800896c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	7b5b      	ldrb	r3, [r3, #13]
 8008956:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8008958:	7dbb      	ldrb	r3, [r7, #22]
 800895a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800895e:	75bb      	strb	r3, [r7, #22]
 8008960:	7dbb      	ldrb	r3, [r7, #22]
 8008962:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	695a      	ldr	r2, [r3, #20]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800896c:	7dba      	ldrb	r2, [r7, #22]
 800896e:	7d7b      	ldrb	r3, [r7, #21]
 8008970:	429a      	cmp	r2, r3
 8008972:	d115      	bne.n	80089a0 <dir_read+0xe6>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	330d      	adds	r3, #13
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	7d3a      	ldrb	r2, [r7, #20]
 800897e:	429a      	cmp	r2, r3
 8008980:	d10e      	bne.n	80089a0 <dir_read+0xe6>
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	4619      	mov	r1, r3
 800898c:	4610      	mov	r0, r2
 800898e:	f7ff fe19 	bl	80085c4 <pick_lfn>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <dir_read+0xe6>
 8008998:	7d7b      	ldrb	r3, [r7, #21]
 800899a:	3b01      	subs	r3, #1
 800899c:	b2db      	uxtb	r3, r3
 800899e:	e000      	b.n	80089a2 <dir_read+0xe8>
 80089a0:	23ff      	movs	r3, #255	@ 0xff
 80089a2:	757b      	strb	r3, [r7, #21]
 80089a4:	e011      	b.n	80089ca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80089a6:	7d7b      	ldrb	r3, [r7, #21]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d109      	bne.n	80089c0 <dir_read+0x106>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7ff ff61 	bl	8008878 <sum_sfn>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	7d3b      	ldrb	r3, [r7, #20]
 80089bc:	4293      	cmp	r3, r2
 80089be:	d015      	beq.n	80089ec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f04f 32ff 	mov.w	r2, #4294967295
 80089c6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80089c8:	e010      	b.n	80089ec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80089ca:	2100      	movs	r1, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f7ff fc3d 	bl	800824c <dir_next>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80089d6:	7dfb      	ldrb	r3, [r7, #23]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d109      	bne.n	80089f0 <dir_read+0x136>
	while (dp->sect) {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f47f af79 	bne.w	80088d8 <dir_read+0x1e>
 80089e6:	e004      	b.n	80089f2 <dir_read+0x138>
		if (res != FR_OK) break;
 80089e8:	bf00      	nop
 80089ea:	e002      	b.n	80089f2 <dir_read+0x138>
					break;
 80089ec:	bf00      	nop
 80089ee:	e000      	b.n	80089f2 <dir_read+0x138>
		if (res != FR_OK) break;
 80089f0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <dir_read+0x144>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	61da      	str	r2, [r3, #28]
	return res;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008a16:	2100      	movs	r1, #0
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fb9c 	bl	8008156 <dir_sdi>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <dir_find+0x24>
 8008a28:	7dfb      	ldrb	r3, [r7, #23]
 8008a2a:	e0a9      	b.n	8008b80 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a2c:	23ff      	movs	r3, #255	@ 0xff
 8008a2e:	753b      	strb	r3, [r7, #20]
 8008a30:	7d3b      	ldrb	r3, [r7, #20]
 8008a32:	757b      	strb	r3, [r7, #21]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f04f 32ff 	mov.w	r2, #4294967295
 8008a3a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	69db      	ldr	r3, [r3, #28]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6938      	ldr	r0, [r7, #16]
 8008a44:	f7ff f80a 	bl	8007a5c <move_window>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f040 8090 	bne.w	8008b74 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a5c:	7dbb      	ldrb	r3, [r7, #22]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <dir_find+0x60>
 8008a62:	2304      	movs	r3, #4
 8008a64:	75fb      	strb	r3, [r7, #23]
 8008a66:	e08a      	b.n	8008b7e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	330b      	adds	r3, #11
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a74:	73fb      	strb	r3, [r7, #15]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7bfa      	ldrb	r2, [r7, #15]
 8008a7a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008a7c:	7dbb      	ldrb	r3, [r7, #22]
 8008a7e:	2be5      	cmp	r3, #229	@ 0xe5
 8008a80:	d007      	beq.n	8008a92 <dir_find+0x8a>
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d009      	beq.n	8008aa0 <dir_find+0x98>
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d006      	beq.n	8008aa0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a92:	23ff      	movs	r3, #255	@ 0xff
 8008a94:	757b      	strb	r3, [r7, #21]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a9e:	e05e      	b.n	8008b5e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	2b0f      	cmp	r3, #15
 8008aa4:	d136      	bne.n	8008b14 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d154      	bne.n	8008b5e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008ab4:	7dbb      	ldrb	r3, [r7, #22]
 8008ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00d      	beq.n	8008ada <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	7b5b      	ldrb	r3, [r3, #13]
 8008ac4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008ac6:	7dbb      	ldrb	r3, [r7, #22]
 8008ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008acc:	75bb      	strb	r3, [r7, #22]
 8008ace:	7dbb      	ldrb	r3, [r7, #22]
 8008ad0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008ada:	7dba      	ldrb	r2, [r7, #22]
 8008adc:	7d7b      	ldrb	r3, [r7, #21]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d115      	bne.n	8008b0e <dir_find+0x106>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	330d      	adds	r3, #13
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	7d3a      	ldrb	r2, [r7, #20]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d10e      	bne.n	8008b0e <dir_find+0x106>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f7ff fcf2 	bl	80084e4 <cmp_lfn>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <dir_find+0x106>
 8008b06:	7d7b      	ldrb	r3, [r7, #21]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	e000      	b.n	8008b10 <dir_find+0x108>
 8008b0e:	23ff      	movs	r3, #255	@ 0xff
 8008b10:	757b      	strb	r3, [r7, #21]
 8008b12:	e024      	b.n	8008b5e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b14:	7d7b      	ldrb	r3, [r7, #21]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <dir_find+0x126>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff feaa 	bl	8008878 <sum_sfn>
 8008b24:	4603      	mov	r3, r0
 8008b26:	461a      	mov	r2, r3
 8008b28:	7d3b      	ldrb	r3, [r7, #20]
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d024      	beq.n	8008b78 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d10a      	bne.n	8008b52 <dir_find+0x14a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a18      	ldr	r0, [r3, #32]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3324      	adds	r3, #36	@ 0x24
 8008b44:	220b      	movs	r2, #11
 8008b46:	4619      	mov	r1, r3
 8008b48:	f7fe fd96 	bl	8007678 <mem_cmp>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d014      	beq.n	8008b7c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b52:	23ff      	movs	r3, #255	@ 0xff
 8008b54:	757b      	strb	r3, [r7, #21]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff fb73 	bl	800824c <dir_next>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f43f af65 	beq.w	8008a3c <dir_find+0x34>
 8008b72:	e004      	b.n	8008b7e <dir_find+0x176>
		if (res != FR_OK) break;
 8008b74:	bf00      	nop
 8008b76:	e002      	b.n	8008b7e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b78:	bf00      	nop
 8008b7a:	e000      	b.n	8008b7e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b7c:	bf00      	nop

	return res;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3718      	adds	r7, #24
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	@ 0x30
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008b9c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <dir_register+0x20>
 8008ba4:	2306      	movs	r3, #6
 8008ba6:	e0e0      	b.n	8008d6a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008ba8:	2300      	movs	r3, #0
 8008baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bac:	e002      	b.n	8008bb4 <dir_register+0x2c>
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	4413      	add	r3, r2
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1f4      	bne.n	8008bae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	220c      	movs	r2, #12
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fd15 	bl	8007600 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d032      	beq.n	8008c46 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2240      	movs	r2, #64	@ 0x40
 8008be4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008be8:	2301      	movs	r3, #1
 8008bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bec:	e016      	b.n	8008c1c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	f107 010c 	add.w	r1, r7, #12
 8008bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfe:	f7ff fdad 	bl	800875c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7ff ff00 	bl	8008a08 <dir_find>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	3301      	adds	r3, #1
 8008c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1e:	2b63      	cmp	r3, #99	@ 0x63
 8008c20:	d9e5      	bls.n	8008bee <dir_register+0x66>
 8008c22:	e000      	b.n	8008c26 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008c24:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c28:	2b64      	cmp	r3, #100	@ 0x64
 8008c2a:	d101      	bne.n	8008c30 <dir_register+0xa8>
 8008c2c:	2307      	movs	r3, #7
 8008c2e:	e09c      	b.n	8008d6a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	d002      	beq.n	8008c3e <dir_register+0xb6>
 8008c38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c3c:	e095      	b.n	8008d6a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008c3e:	7dfa      	ldrb	r2, [r7, #23]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <dir_register+0xd8>
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	330c      	adds	r3, #12
 8008c54:	4a47      	ldr	r2, [pc, #284]	@ (8008d74 <dir_register+0x1ec>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	089b      	lsrs	r3, r3, #2
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	e000      	b.n	8008c62 <dir_register+0xda>
 8008c60:	2301      	movs	r3, #1
 8008c62:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008c64:	6a39      	ldr	r1, [r7, #32]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fbb5 	bl	80083d6 <dir_alloc>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d148      	bne.n	8008d0c <dir_register+0x184>
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	623b      	str	r3, [r7, #32]
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d042      	beq.n	8008d0c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	015b      	lsls	r3, r3, #5
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fa5f 	bl	8008156 <dir_sdi>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d132      	bne.n	8008d0c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	3324      	adds	r3, #36	@ 0x24
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fde4 	bl	8008878 <sum_sfn>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	69f8      	ldr	r0, [r7, #28]
 8008cbc:	f7fe fece 	bl	8007a5c <move_window>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d11d      	bne.n	8008d0a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	68d8      	ldr	r0, [r3, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a19      	ldr	r1, [r3, #32]
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	7efb      	ldrb	r3, [r7, #27]
 8008cdc:	f7ff fcd6 	bl	800868c <put_lfn>
				fs->wflag = 1;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff faaf 	bl	800824c <dir_next>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d107      	bne.n	8008d0c <dir_register+0x184>
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	623b      	str	r3, [r7, #32]
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1d5      	bne.n	8008cb4 <dir_register+0x12c>
 8008d08:	e000      	b.n	8008d0c <dir_register+0x184>
				if (res != FR_OK) break;
 8008d0a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d128      	bne.n	8008d66 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	69f8      	ldr	r0, [r7, #28]
 8008d1c:	f7fe fe9e 	bl	8007a5c <move_window>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d11b      	bne.n	8008d66 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	2220      	movs	r2, #32
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fc83 	bl	8007642 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a18      	ldr	r0, [r3, #32]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3324      	adds	r3, #36	@ 0x24
 8008d44:	220b      	movs	r2, #11
 8008d46:	4619      	mov	r1, r3
 8008d48:	f7fe fc5a 	bl	8007600 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	330c      	adds	r3, #12
 8008d58:	f002 0218 	and.w	r2, r2, #24
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2201      	movs	r2, #1
 8008d64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008d66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3730      	adds	r7, #48	@ 0x30
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	4ec4ec4f 	.word	0x4ec4ec4f

08008d78 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d94:	d007      	beq.n	8008da6 <dir_remove+0x2e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff f9da 	bl	8008156 <dir_sdi>
 8008da2:	4603      	mov	r3, r0
 8008da4:	e000      	b.n	8008da8 <dir_remove+0x30>
 8008da6:	2300      	movs	r3, #0
 8008da8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d128      	bne.n	8008e02 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6938      	ldr	r0, [r7, #16]
 8008db8:	f7fe fe50 	bl	8007a5c <move_window>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d115      	bne.n	8008df2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	22e5      	movs	r2, #229	@ 0xe5
 8008dcc:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d90b      	bls.n	8008df6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff fa33 	bl	800824c <dir_next>
 8008de6:	4603      	mov	r3, r0
 8008de8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d0df      	beq.n	8008db0 <dir_remove+0x38>
 8008df0:	e002      	b.n	8008df8 <dir_remove+0x80>
			if (res != FR_OK) break;
 8008df2:	bf00      	nop
 8008df4:	e000      	b.n	8008df8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008df6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8008df8:	7dfb      	ldrb	r3, [r7, #23]
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d101      	bne.n	8008e02 <dir_remove+0x8a>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80ca 	beq.w	8008fc0 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d032      	beq.n	8008e9c <get_fileinfo+0x90>
			i = j = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008e3e:	e01b      	b.n	8008e78 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8008e40:	89fb      	ldrh	r3, [r7, #14]
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 fe83 	bl	800ab50 <ff_convert>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8008e4e:	89fb      	ldrh	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <get_fileinfo+0x4e>
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
 8008e58:	e01a      	b.n	8008e90 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	2bfe      	cmp	r3, #254	@ 0xfe
 8008e5e:	d902      	bls.n	8008e66 <get_fileinfo+0x5a>
 8008e60:	2300      	movs	r3, #0
 8008e62:	61fb      	str	r3, [r7, #28]
 8008e64:	e014      	b.n	8008e90 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	61fa      	str	r2, [r7, #28]
 8008e6c:	89fa      	ldrh	r2, [r7, #14]
 8008e6e:	b2d1      	uxtb	r1, r2
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	4413      	add	r3, r2
 8008e74:	460a      	mov	r2, r1
 8008e76:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	1c59      	adds	r1, r3, #1
 8008e80:	61b9      	str	r1, [r7, #24]
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4413      	add	r3, r2
 8008e86:	881b      	ldrh	r3, [r3, #0]
 8008e88:	81fb      	strh	r3, [r7, #14]
 8008e8a:	89fb      	ldrh	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1d7      	bne.n	8008e40 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008e90:	683a      	ldr	r2, [r7, #0]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	3316      	adds	r3, #22
 8008e98:	2200      	movs	r2, #0
 8008e9a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61bb      	str	r3, [r7, #24]
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	3316      	adds	r3, #22
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008eb0:	e04d      	b.n	8008f4e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1a      	ldr	r2, [r3, #32]
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	1c59      	adds	r1, r3, #1
 8008eba:	61f9      	str	r1, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	2b20      	cmp	r3, #32
 8008ec6:	d041      	beq.n	8008f4c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	2b05      	cmp	r3, #5
 8008ecc:	d101      	bne.n	8008ed2 <get_fileinfo+0xc6>
 8008ece:	23e5      	movs	r3, #229	@ 0xe5
 8008ed0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	2b09      	cmp	r3, #9
 8008ed6:	d10f      	bne.n	8008ef8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8008ed8:	89bb      	ldrh	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d105      	bne.n	8008eea <get_fileinfo+0xde>
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	3316      	adds	r3, #22
 8008ee6:	222e      	movs	r2, #46	@ 0x2e
 8008ee8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	61ba      	str	r2, [r7, #24]
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	222e      	movs	r2, #46	@ 0x2e
 8008ef6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008ef8:	683a      	ldr	r2, [r7, #0]
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	4413      	add	r3, r2
 8008efe:	3309      	adds	r3, #9
 8008f00:	7dfa      	ldrb	r2, [r7, #23]
 8008f02:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008f04:	89bb      	ldrh	r3, [r7, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d11c      	bne.n	8008f44 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b40      	cmp	r3, #64	@ 0x40
 8008f0e:	d913      	bls.n	8008f38 <get_fileinfo+0x12c>
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	2b5a      	cmp	r3, #90	@ 0x5a
 8008f14:	d810      	bhi.n	8008f38 <get_fileinfo+0x12c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b08      	cmp	r3, #8
 8008f24:	d901      	bls.n	8008f2a <get_fileinfo+0x11e>
 8008f26:	2310      	movs	r3, #16
 8008f28:	e000      	b.n	8008f2c <get_fileinfo+0x120>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	3320      	adds	r3, #32
 8008f36:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3316      	adds	r3, #22
 8008f40:	7dfa      	ldrb	r2, [r7, #23]
 8008f42:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	3301      	adds	r3, #1
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	e000      	b.n	8008f4e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008f4c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	2b0a      	cmp	r3, #10
 8008f52:	d9ae      	bls.n	8008eb2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008f54:	89bb      	ldrh	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10d      	bne.n	8008f76 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	4413      	add	r3, r2
 8008f60:	3316      	adds	r3, #22
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d101      	bne.n	8008f76 <get_fileinfo+0x16a>
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3309      	adds	r3, #9
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	7ada      	ldrb	r2, [r3, #11]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	331c      	adds	r3, #28
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe faca 	bl	800752c <ld_dword>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	3316      	adds	r3, #22
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fac1 	bl	800752c <ld_dword>
 8008faa:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	80da      	strh	r2, [r3, #6]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	809a      	strh	r2, [r3, #4]
 8008fbe:	e000      	b.n	8008fc2 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008fc0:	bf00      	nop
}
 8008fc2:	3720      	adds	r7, #32
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	@ 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	613b      	str	r3, [r7, #16]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	60fb      	str	r3, [r7, #12]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	61ba      	str	r2, [r7, #24]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008ff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ff8:	2b1f      	cmp	r3, #31
 8008ffa:	d940      	bls.n	800907e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008ffc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ffe:	2b2f      	cmp	r3, #47	@ 0x2f
 8009000:	d006      	beq.n	8009010 <create_name+0x48>
 8009002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009004:	2b5c      	cmp	r3, #92	@ 0x5c
 8009006:	d110      	bne.n	800902a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009008:	e002      	b.n	8009010 <create_name+0x48>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	3301      	adds	r3, #1
 800900e:	61bb      	str	r3, [r7, #24]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	4413      	add	r3, r2
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b2f      	cmp	r3, #47	@ 0x2f
 800901a:	d0f6      	beq.n	800900a <create_name+0x42>
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	4413      	add	r3, r2
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b5c      	cmp	r3, #92	@ 0x5c
 8009026:	d0f0      	beq.n	800900a <create_name+0x42>
			break;
 8009028:	e02a      	b.n	8009080 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2bfe      	cmp	r3, #254	@ 0xfe
 800902e:	d901      	bls.n	8009034 <create_name+0x6c>
 8009030:	2306      	movs	r3, #6
 8009032:	e17d      	b.n	8009330 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009034:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009036:	b2db      	uxtb	r3, r3
 8009038:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800903a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800903c:	2101      	movs	r1, #1
 800903e:	4618      	mov	r0, r3
 8009040:	f001 fd86 	bl	800ab50 <ff_convert>
 8009044:	4603      	mov	r3, r0
 8009046:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <create_name+0x8a>
 800904e:	2306      	movs	r3, #6
 8009050:	e16e      	b.n	8009330 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009054:	2b7f      	cmp	r3, #127	@ 0x7f
 8009056:	d809      	bhi.n	800906c <create_name+0xa4>
 8009058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800905a:	4619      	mov	r1, r3
 800905c:	488d      	ldr	r0, [pc, #564]	@ (8009294 <create_name+0x2cc>)
 800905e:	f7fe fb32 	bl	80076c6 <chk_chr>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <create_name+0xa4>
 8009068:	2306      	movs	r3, #6
 800906a:	e161      	b.n	8009330 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	617a      	str	r2, [r7, #20]
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800907a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800907c:	e7b4      	b.n	8008fe8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800907e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	441a      	add	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800908a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800908c:	2b1f      	cmp	r3, #31
 800908e:	d801      	bhi.n	8009094 <create_name+0xcc>
 8009090:	2304      	movs	r3, #4
 8009092:	e000      	b.n	8009096 <create_name+0xce>
 8009094:	2300      	movs	r3, #0
 8009096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800909a:	e011      	b.n	80090c0 <create_name+0xf8>
		w = lfn[di - 1];
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80090a2:	4413      	add	r3, r2
 80090a4:	005b      	lsls	r3, r3, #1
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80090ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	d002      	beq.n	80090ba <create_name+0xf2>
 80090b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80090b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b8:	d106      	bne.n	80090c8 <create_name+0x100>
		di--;
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	3b01      	subs	r3, #1
 80090be:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1ea      	bne.n	800909c <create_name+0xd4>
 80090c6:	e000      	b.n	80090ca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80090c8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	2200      	movs	r2, #0
 80090d4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d101      	bne.n	80090e0 <create_name+0x118>
 80090dc:	2306      	movs	r3, #6
 80090de:	e127      	b.n	8009330 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3324      	adds	r3, #36	@ 0x24
 80090e4:	220b      	movs	r2, #11
 80090e6:	2120      	movs	r1, #32
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe faaa 	bl	8007642 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80090ee:	2300      	movs	r3, #0
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	e002      	b.n	80090fa <create_name+0x132>
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	3301      	adds	r3, #1
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	4413      	add	r3, r2
 8009102:	881b      	ldrh	r3, [r3, #0]
 8009104:	2b20      	cmp	r3, #32
 8009106:	d0f5      	beq.n	80090f4 <create_name+0x12c>
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	2b2e      	cmp	r3, #46	@ 0x2e
 8009114:	d0ee      	beq.n	80090f4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d009      	beq.n	8009130 <create_name+0x168>
 800911c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009120:	f043 0303 	orr.w	r3, r3, #3
 8009124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009128:	e002      	b.n	8009130 <create_name+0x168>
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3b01      	subs	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d009      	beq.n	800914a <create_name+0x182>
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800913c:	4413      	add	r3, r2
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	2b2e      	cmp	r3, #46	@ 0x2e
 8009148:	d1ef      	bne.n	800912a <create_name+0x162>

	i = b = 0; ni = 8;
 800914a:	2300      	movs	r3, #0
 800914c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009150:	2300      	movs	r3, #0
 8009152:	623b      	str	r3, [r7, #32]
 8009154:	2308      	movs	r3, #8
 8009156:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	61ba      	str	r2, [r7, #24]
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009168:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 8090 	beq.w	8009290 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009172:	2b20      	cmp	r3, #32
 8009174:	d006      	beq.n	8009184 <create_name+0x1bc>
 8009176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009178:	2b2e      	cmp	r3, #46	@ 0x2e
 800917a:	d10a      	bne.n	8009192 <create_name+0x1ca>
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	429a      	cmp	r2, r3
 8009182:	d006      	beq.n	8009192 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009188:	f043 0303 	orr.w	r3, r3, #3
 800918c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009190:	e07d      	b.n	800928e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009192:	6a3a      	ldr	r2, [r7, #32]
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	429a      	cmp	r2, r3
 8009198:	d203      	bcs.n	80091a2 <create_name+0x1da>
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d123      	bne.n	80091ea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	2b0b      	cmp	r3, #11
 80091a6:	d106      	bne.n	80091b6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80091a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091ac:	f043 0303 	orr.w	r3, r3, #3
 80091b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80091b4:	e075      	b.n	80092a2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d005      	beq.n	80091ca <create_name+0x202>
 80091be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091c2:	f043 0303 	orr.w	r3, r3, #3
 80091c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d866      	bhi.n	80092a0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	2308      	movs	r3, #8
 80091d8:	623b      	str	r3, [r7, #32]
 80091da:	230b      	movs	r3, #11
 80091dc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80091de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80091e8:	e051      	b.n	800928e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80091ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80091ee:	d914      	bls.n	800921a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80091f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80091f2:	2100      	movs	r1, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f001 fcab 	bl	800ab50 <ff_convert>
 80091fa:	4603      	mov	r3, r0
 80091fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80091fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <create_name+0x246>
 8009204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009206:	3b80      	subs	r3, #128	@ 0x80
 8009208:	4a23      	ldr	r2, [pc, #140]	@ (8009298 <create_name+0x2d0>)
 800920a:	5cd3      	ldrb	r3, [r2, r3]
 800920c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800920e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009212:	f043 0302 	orr.w	r3, r3, #2
 8009216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800921a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	d007      	beq.n	8009230 <create_name+0x268>
 8009220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009222:	4619      	mov	r1, r3
 8009224:	481d      	ldr	r0, [pc, #116]	@ (800929c <create_name+0x2d4>)
 8009226:	f7fe fa4e 	bl	80076c6 <chk_chr>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009230:	235f      	movs	r3, #95	@ 0x5f
 8009232:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009238:	f043 0303 	orr.w	r3, r3, #3
 800923c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009240:	e01b      	b.n	800927a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009244:	2b40      	cmp	r3, #64	@ 0x40
 8009246:	d909      	bls.n	800925c <create_name+0x294>
 8009248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800924a:	2b5a      	cmp	r3, #90	@ 0x5a
 800924c:	d806      	bhi.n	800925c <create_name+0x294>
					b |= 2;
 800924e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009252:	f043 0302 	orr.w	r3, r3, #2
 8009256:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800925a:	e00e      	b.n	800927a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800925c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800925e:	2b60      	cmp	r3, #96	@ 0x60
 8009260:	d90b      	bls.n	800927a <create_name+0x2b2>
 8009262:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009264:	2b7a      	cmp	r3, #122	@ 0x7a
 8009266:	d808      	bhi.n	800927a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800926c:	f043 0301 	orr.w	r3, r3, #1
 8009270:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009276:	3b20      	subs	r3, #32
 8009278:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	623a      	str	r2, [r7, #32]
 8009280:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009282:	b2d1      	uxtb	r1, r2
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	460a      	mov	r2, r1
 800928a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800928e:	e763      	b.n	8009158 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009290:	bf00      	nop
 8009292:	e006      	b.n	80092a2 <create_name+0x2da>
 8009294:	0800be38 	.word	0x0800be38
 8009298:	0800bef4 	.word	0x0800bef4
 800929c:	0800be44 	.word	0x0800be44
			if (si > di) break;			/* No extension */
 80092a0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80092a8:	2be5      	cmp	r3, #229	@ 0xe5
 80092aa:	d103      	bne.n	80092b4 <create_name+0x2ec>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2205      	movs	r2, #5
 80092b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	2b08      	cmp	r3, #8
 80092b8:	d104      	bne.n	80092c4 <create_name+0x2fc>
 80092ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80092c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092c8:	f003 030c 	and.w	r3, r3, #12
 80092cc:	2b0c      	cmp	r3, #12
 80092ce:	d005      	beq.n	80092dc <create_name+0x314>
 80092d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d105      	bne.n	80092e8 <create_name+0x320>
 80092dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092e0:	f043 0302 	orr.w	r3, r3, #2
 80092e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80092e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d117      	bne.n	8009324 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80092f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d105      	bne.n	800930c <create_name+0x344>
 8009300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009304:	f043 0310 	orr.w	r3, r3, #16
 8009308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800930c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009310:	f003 030c 	and.w	r3, r3, #12
 8009314:	2b04      	cmp	r3, #4
 8009316:	d105      	bne.n	8009324 <create_name+0x35c>
 8009318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800931c:	f043 0308 	orr.w	r3, r3, #8
 8009320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800932a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800932e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009330:	4618      	mov	r0, r3
 8009332:	3728      	adds	r7, #40	@ 0x28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800934c:	e002      	b.n	8009354 <follow_path+0x1c>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	3301      	adds	r3, #1
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b2f      	cmp	r3, #47	@ 0x2f
 800935a:	d0f8      	beq.n	800934e <follow_path+0x16>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b5c      	cmp	r3, #92	@ 0x5c
 8009362:	d0f4      	beq.n	800934e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2200      	movs	r2, #0
 8009368:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b1f      	cmp	r3, #31
 8009370:	d80a      	bhi.n	8009388 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2280      	movs	r2, #128	@ 0x80
 8009376:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800937a:	2100      	movs	r1, #0
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7fe feea 	bl	8008156 <dir_sdi>
 8009382:	4603      	mov	r3, r0
 8009384:	75fb      	strb	r3, [r7, #23]
 8009386:	e043      	b.n	8009410 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009388:	463b      	mov	r3, r7
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff fe1b 	bl	8008fc8 <create_name>
 8009392:	4603      	mov	r3, r0
 8009394:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d134      	bne.n	8009406 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7ff fb33 	bl	8008a08 <dir_find>
 80093a2:	4603      	mov	r3, r0
 80093a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80093ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00a      	beq.n	80093ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093b4:	7dfb      	ldrb	r3, [r7, #23]
 80093b6:	2b04      	cmp	r3, #4
 80093b8:	d127      	bne.n	800940a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093ba:	7afb      	ldrb	r3, [r7, #11]
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d122      	bne.n	800940a <follow_path+0xd2>
 80093c4:	2305      	movs	r3, #5
 80093c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093c8:	e01f      	b.n	800940a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093ca:	7afb      	ldrb	r3, [r7, #11]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d11c      	bne.n	800940e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	799b      	ldrb	r3, [r3, #6]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80093e0:	2305      	movs	r3, #5
 80093e2:	75fb      	strb	r3, [r7, #23]
 80093e4:	e014      	b.n	8009410 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f4:	4413      	add	r3, r2
 80093f6:	4619      	mov	r1, r3
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff f833 	bl	8008464 <ld_clust>
 80093fe:	4602      	mov	r2, r0
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009404:	e7c0      	b.n	8009388 <follow_path+0x50>
			if (res != FR_OK) break;
 8009406:	bf00      	nop
 8009408:	e002      	b.n	8009410 <follow_path+0xd8>
				break;
 800940a:	bf00      	nop
 800940c:	e000      	b.n	8009410 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800940e:	bf00      	nop
			}
		}
	}

	return res;
 8009410:	7dfb      	ldrb	r3, [r7, #23]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800941a:	b480      	push	{r7}
 800941c:	b087      	sub	sp, #28
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009422:	f04f 33ff 	mov.w	r3, #4294967295
 8009426:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d031      	beq.n	8009494 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	e002      	b.n	800943e <get_ldnumber+0x24>
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	3301      	adds	r3, #1
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b1f      	cmp	r3, #31
 8009444:	d903      	bls.n	800944e <get_ldnumber+0x34>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b3a      	cmp	r3, #58	@ 0x3a
 800944c:	d1f4      	bne.n	8009438 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	2b3a      	cmp	r3, #58	@ 0x3a
 8009454:	d11c      	bne.n	8009490 <get_ldnumber+0x76>
			tp = *path;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	1c5a      	adds	r2, r3, #1
 8009460:	60fa      	str	r2, [r7, #12]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	3b30      	subs	r3, #48	@ 0x30
 8009466:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b09      	cmp	r3, #9
 800946c:	d80e      	bhi.n	800948c <get_ldnumber+0x72>
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	429a      	cmp	r2, r3
 8009474:	d10a      	bne.n	800948c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d107      	bne.n	800948c <get_ldnumber+0x72>
					vol = (int)i;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	3301      	adds	r3, #1
 8009484:	617b      	str	r3, [r7, #20]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	697a      	ldr	r2, [r7, #20]
 800948a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	e002      	b.n	8009496 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009490:	2300      	movs	r3, #0
 8009492:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009494:	693b      	ldr	r3, [r7, #16]
}
 8009496:	4618      	mov	r0, r3
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
	...

080094a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	70da      	strb	r2, [r3, #3]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fe facc 	bl	8007a5c <move_window>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <check_fs+0x2a>
 80094ca:	2304      	movs	r3, #4
 80094cc:	e038      	b.n	8009540 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3334      	adds	r3, #52	@ 0x34
 80094d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe f810 	bl	80074fc <ld_word>
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d001      	beq.n	80094ec <check_fs+0x48>
 80094e8:	2303      	movs	r3, #3
 80094ea:	e029      	b.n	8009540 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094f2:	2be9      	cmp	r3, #233	@ 0xe9
 80094f4:	d009      	beq.n	800950a <check_fs+0x66>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094fc:	2beb      	cmp	r3, #235	@ 0xeb
 80094fe:	d11e      	bne.n	800953e <check_fs+0x9a>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009506:	2b90      	cmp	r3, #144	@ 0x90
 8009508:	d119      	bne.n	800953e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	3334      	adds	r3, #52	@ 0x34
 800950e:	3336      	adds	r3, #54	@ 0x36
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe f80b 	bl	800752c <ld_dword>
 8009516:	4603      	mov	r3, r0
 8009518:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800951c:	4a0a      	ldr	r2, [pc, #40]	@ (8009548 <check_fs+0xa4>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d101      	bne.n	8009526 <check_fs+0x82>
 8009522:	2300      	movs	r3, #0
 8009524:	e00c      	b.n	8009540 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3334      	adds	r3, #52	@ 0x34
 800952a:	3352      	adds	r3, #82	@ 0x52
 800952c:	4618      	mov	r0, r3
 800952e:	f7fd fffd 	bl	800752c <ld_dword>
 8009532:	4603      	mov	r3, r0
 8009534:	4a05      	ldr	r2, [pc, #20]	@ (800954c <check_fs+0xa8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d101      	bne.n	800953e <check_fs+0x9a>
 800953a:	2300      	movs	r3, #0
 800953c:	e000      	b.n	8009540 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800953e:	2302      	movs	r3, #2
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	00544146 	.word	0x00544146
 800954c:	33544146 	.word	0x33544146

08009550 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b096      	sub	sp, #88	@ 0x58
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff ff58 	bl	800941a <get_ldnumber>
 800956a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800956c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800956e:	2b00      	cmp	r3, #0
 8009570:	da01      	bge.n	8009576 <find_volume+0x26>
 8009572:	230b      	movs	r3, #11
 8009574:	e22d      	b.n	80099d2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009576:	4aa1      	ldr	r2, [pc, #644]	@ (80097fc <find_volume+0x2ac>)
 8009578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800957a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800957e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <find_volume+0x3a>
 8009586:	230c      	movs	r3, #12
 8009588:	e223      	b.n	80099d2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800958e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d01a      	beq.n	80095d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80095a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a2:	785b      	ldrb	r3, [r3, #1]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fd ff0b 	bl	80073c0 <disk_status>
 80095aa:	4603      	mov	r3, r0
 80095ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80095b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d10c      	bne.n	80095d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80095bc:	79fb      	ldrb	r3, [r7, #7]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <find_volume+0x82>
 80095c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095c6:	f003 0304 	and.w	r3, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80095ce:	230a      	movs	r3, #10
 80095d0:	e1ff      	b.n	80099d2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80095d2:	2300      	movs	r3, #0
 80095d4:	e1fd      	b.n	80099d2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80095d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80095dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80095e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fd ff03 	bl	80073f4 <disk_initialize>
 80095ee:	4603      	mov	r3, r0
 80095f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80095f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009600:	2303      	movs	r3, #3
 8009602:	e1e6      	b.n	80099d2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d007      	beq.n	800961a <find_volume+0xca>
 800960a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009616:	230a      	movs	r3, #10
 8009618:	e1db      	b.n	80099d2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800961e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009620:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009622:	f7ff ff3f 	bl	80094a4 <check_fs>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800962c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009630:	2b02      	cmp	r3, #2
 8009632:	d149      	bne.n	80096c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009634:	2300      	movs	r3, #0
 8009636:	643b      	str	r3, [r7, #64]	@ 0x40
 8009638:	e01e      	b.n	8009678 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8009640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009648:	4413      	add	r3, r2
 800964a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	3304      	adds	r3, #4
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d006      	beq.n	8009664 <find_volume+0x114>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	3308      	adds	r3, #8
 800965a:	4618      	mov	r0, r3
 800965c:	f7fd ff66 	bl	800752c <ld_dword>
 8009660:	4602      	mov	r2, r0
 8009662:	e000      	b.n	8009666 <find_volume+0x116>
 8009664:	2200      	movs	r2, #0
 8009666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	3358      	adds	r3, #88	@ 0x58
 800966c:	443b      	add	r3, r7
 800966e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009674:	3301      	adds	r3, #1
 8009676:	643b      	str	r3, [r7, #64]	@ 0x40
 8009678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800967a:	2b03      	cmp	r3, #3
 800967c:	d9dd      	bls.n	800963a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800967e:	2300      	movs	r3, #0
 8009680:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <find_volume+0x13e>
 8009688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800968a:	3b01      	subs	r3, #1
 800968c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800968e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	3358      	adds	r3, #88	@ 0x58
 8009694:	443b      	add	r3, r7
 8009696:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800969a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800969c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <find_volume+0x15e>
 80096a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096a6:	f7ff fefd 	bl	80094a4 <check_fs>
 80096aa:	4603      	mov	r3, r0
 80096ac:	e000      	b.n	80096b0 <find_volume+0x160>
 80096ae:	2303      	movs	r3, #3
 80096b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80096b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d905      	bls.n	80096c8 <find_volume+0x178>
 80096bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096be:	3301      	adds	r3, #1
 80096c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d9e2      	bls.n	800968e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80096c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d101      	bne.n	80096d4 <find_volume+0x184>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e17e      	b.n	80099d2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80096d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d901      	bls.n	80096e0 <find_volume+0x190>
 80096dc:	230d      	movs	r3, #13
 80096de:	e178      	b.n	80099d2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80096e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e2:	3334      	adds	r3, #52	@ 0x34
 80096e4:	330b      	adds	r3, #11
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fd ff08 	bl	80074fc <ld_word>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096f2:	d001      	beq.n	80096f8 <find_volume+0x1a8>
 80096f4:	230d      	movs	r3, #13
 80096f6:	e16c      	b.n	80099d2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	3334      	adds	r3, #52	@ 0x34
 80096fc:	3316      	adds	r3, #22
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fd fefc 	bl	80074fc <ld_word>
 8009704:	4603      	mov	r3, r0
 8009706:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <find_volume+0x1cc>
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	3334      	adds	r3, #52	@ 0x34
 8009712:	3324      	adds	r3, #36	@ 0x24
 8009714:	4618      	mov	r0, r3
 8009716:	f7fd ff09 	bl	800752c <ld_dword>
 800971a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009720:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	789b      	ldrb	r3, [r3, #2]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d005      	beq.n	8009740 <find_volume+0x1f0>
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	789b      	ldrb	r3, [r3, #2]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d001      	beq.n	8009740 <find_volume+0x1f0>
 800973c:	230d      	movs	r3, #13
 800973e:	e148      	b.n	80099d2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009742:	789b      	ldrb	r3, [r3, #2]
 8009744:	461a      	mov	r2, r3
 8009746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009748:	fb02 f303 	mul.w	r3, r2, r3
 800974c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009754:	461a      	mov	r2, r3
 8009756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009758:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	895b      	ldrh	r3, [r3, #10]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d008      	beq.n	8009774 <find_volume+0x224>
 8009762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009764:	895b      	ldrh	r3, [r3, #10]
 8009766:	461a      	mov	r2, r3
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	895b      	ldrh	r3, [r3, #10]
 800976c:	3b01      	subs	r3, #1
 800976e:	4013      	ands	r3, r2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <find_volume+0x228>
 8009774:	230d      	movs	r3, #13
 8009776:	e12c      	b.n	80099d2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800977a:	3334      	adds	r3, #52	@ 0x34
 800977c:	3311      	adds	r3, #17
 800977e:	4618      	mov	r0, r3
 8009780:	f7fd febc 	bl	80074fc <ld_word>
 8009784:	4603      	mov	r3, r0
 8009786:	461a      	mov	r2, r3
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	891b      	ldrh	r3, [r3, #8]
 8009790:	f003 030f 	and.w	r3, r3, #15
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <find_volume+0x24e>
 800979a:	230d      	movs	r3, #13
 800979c:	e119      	b.n	80099d2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	3334      	adds	r3, #52	@ 0x34
 80097a2:	3313      	adds	r3, #19
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fd fea9 	bl	80074fc <ld_word>
 80097aa:	4603      	mov	r3, r0
 80097ac:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <find_volume+0x272>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b6:	3334      	adds	r3, #52	@ 0x34
 80097b8:	3320      	adds	r3, #32
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd feb6 	bl	800752c <ld_dword>
 80097c0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c4:	3334      	adds	r3, #52	@ 0x34
 80097c6:	330e      	adds	r3, #14
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fd fe97 	bl	80074fc <ld_word>
 80097ce:	4603      	mov	r3, r0
 80097d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <find_volume+0x28c>
 80097d8:	230d      	movs	r3, #13
 80097da:	e0fa      	b.n	80099d2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80097de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097e0:	4413      	add	r3, r2
 80097e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097e4:	8912      	ldrh	r2, [r2, #8]
 80097e6:	0912      	lsrs	r2, r2, #4
 80097e8:	b292      	uxth	r2, r2
 80097ea:	4413      	add	r3, r2
 80097ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d204      	bcs.n	8009800 <find_volume+0x2b0>
 80097f6:	230d      	movs	r3, #13
 80097f8:	e0eb      	b.n	80099d2 <find_volume+0x482>
 80097fa:	bf00      	nop
 80097fc:	20000750 	.word	0x20000750
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009808:	8952      	ldrh	r2, [r2, #10]
 800980a:	fbb3 f3f2 	udiv	r3, r3, r2
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <find_volume+0x2ca>
 8009816:	230d      	movs	r3, #13
 8009818:	e0db      	b.n	80099d2 <find_volume+0x482>
		fmt = FS_FAT32;
 800981a:	2303      	movs	r3, #3
 800981c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009822:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009826:	4293      	cmp	r3, r2
 8009828:	d802      	bhi.n	8009830 <find_volume+0x2e0>
 800982a:	2302      	movs	r3, #2
 800982c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009832:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009836:	4293      	cmp	r3, r2
 8009838:	d802      	bhi.n	8009840 <find_volume+0x2f0>
 800983a:	2301      	movs	r3, #1
 800983c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009842:	1c9a      	adds	r2, r3, #2
 8009844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009846:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800984c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800984e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009852:	441a      	add	r2, r3
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009858:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800985a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985c:	441a      	add	r2, r3
 800985e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009860:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8009862:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009866:	2b03      	cmp	r3, #3
 8009868:	d11e      	bne.n	80098a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800986a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986c:	3334      	adds	r3, #52	@ 0x34
 800986e:	332a      	adds	r3, #42	@ 0x2a
 8009870:	4618      	mov	r0, r3
 8009872:	f7fd fe43 	bl	80074fc <ld_word>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <find_volume+0x330>
 800987c:	230d      	movs	r3, #13
 800987e:	e0a8      	b.n	80099d2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009882:	891b      	ldrh	r3, [r3, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d001      	beq.n	800988c <find_volume+0x33c>
 8009888:	230d      	movs	r3, #13
 800988a:	e0a2      	b.n	80099d2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800988c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988e:	3334      	adds	r3, #52	@ 0x34
 8009890:	332c      	adds	r3, #44	@ 0x2c
 8009892:	4618      	mov	r0, r3
 8009894:	f7fd fe4a 	bl	800752c <ld_dword>
 8009898:	4602      	mov	r2, r0
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80098a6:	e01f      	b.n	80098e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	891b      	ldrh	r3, [r3, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <find_volume+0x364>
 80098b0:	230d      	movs	r3, #13
 80098b2:	e08e      	b.n	80099d2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80098b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ba:	441a      	add	r2, r3
 80098bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098be:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80098c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d103      	bne.n	80098d0 <find_volume+0x380>
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	e00a      	b.n	80098e6 <find_volume+0x396>
 80098d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098d2:	699a      	ldr	r2, [r3, #24]
 80098d4:	4613      	mov	r3, r2
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	4413      	add	r3, r2
 80098da:	085a      	lsrs	r2, r3, #1
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80098e6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80098e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80098f2:	0a5b      	lsrs	r3, r3, #9
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d201      	bcs.n	80098fc <find_volume+0x3ac>
 80098f8:	230d      	movs	r3, #13
 80098fa:	e06a      	b.n	80099d2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80098fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	615a      	str	r2, [r3, #20]
 8009904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009906:	695a      	ldr	r2, [r3, #20]
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	2280      	movs	r2, #128	@ 0x80
 8009910:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009912:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009916:	2b03      	cmp	r3, #3
 8009918:	d149      	bne.n	80099ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800991a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991c:	3334      	adds	r3, #52	@ 0x34
 800991e:	3330      	adds	r3, #48	@ 0x30
 8009920:	4618      	mov	r0, r3
 8009922:	f7fd fdeb 	bl	80074fc <ld_word>
 8009926:	4603      	mov	r3, r0
 8009928:	2b01      	cmp	r3, #1
 800992a:	d140      	bne.n	80099ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800992c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800992e:	3301      	adds	r3, #1
 8009930:	4619      	mov	r1, r3
 8009932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009934:	f7fe f892 	bl	8007a5c <move_window>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d137      	bne.n	80099ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800993e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009940:	2200      	movs	r2, #0
 8009942:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009946:	3334      	adds	r3, #52	@ 0x34
 8009948:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800994c:	4618      	mov	r0, r3
 800994e:	f7fd fdd5 	bl	80074fc <ld_word>
 8009952:	4603      	mov	r3, r0
 8009954:	461a      	mov	r2, r3
 8009956:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800995a:	429a      	cmp	r2, r3
 800995c:	d127      	bne.n	80099ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800995e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009960:	3334      	adds	r3, #52	@ 0x34
 8009962:	4618      	mov	r0, r3
 8009964:	f7fd fde2 	bl	800752c <ld_dword>
 8009968:	4603      	mov	r3, r0
 800996a:	4a1c      	ldr	r2, [pc, #112]	@ (80099dc <find_volume+0x48c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d11e      	bne.n	80099ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009972:	3334      	adds	r3, #52	@ 0x34
 8009974:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009978:	4618      	mov	r0, r3
 800997a:	f7fd fdd7 	bl	800752c <ld_dword>
 800997e:	4603      	mov	r3, r0
 8009980:	4a17      	ldr	r2, [pc, #92]	@ (80099e0 <find_volume+0x490>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d113      	bne.n	80099ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009988:	3334      	adds	r3, #52	@ 0x34
 800998a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800998e:	4618      	mov	r0, r3
 8009990:	f7fd fdcc 	bl	800752c <ld_dword>
 8009994:	4602      	mov	r2, r0
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800999a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999c:	3334      	adds	r3, #52	@ 0x34
 800999e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fd fdc2 	bl	800752c <ld_dword>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80099ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80099b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80099b6:	4b0b      	ldr	r3, [pc, #44]	@ (80099e4 <find_volume+0x494>)
 80099b8:	881b      	ldrh	r3, [r3, #0]
 80099ba:	3301      	adds	r3, #1
 80099bc:	b29a      	uxth	r2, r3
 80099be:	4b09      	ldr	r3, [pc, #36]	@ (80099e4 <find_volume+0x494>)
 80099c0:	801a      	strh	r2, [r3, #0]
 80099c2:	4b08      	ldr	r3, [pc, #32]	@ (80099e4 <find_volume+0x494>)
 80099c4:	881a      	ldrh	r2, [r3, #0]
 80099c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80099ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099cc:	f7fd ffde 	bl	800798c <clear_lock>
#endif
	return FR_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3758      	adds	r7, #88	@ 0x58
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	41615252 	.word	0x41615252
 80099e0:	61417272 	.word	0x61417272
 80099e4:	20000754 	.word	0x20000754

080099e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80099f2:	2309      	movs	r3, #9
 80099f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01c      	beq.n	8009a36 <validate+0x4e>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d018      	beq.n	8009a36 <validate+0x4e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d013      	beq.n	8009a36 <validate+0x4e>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	889a      	ldrh	r2, [r3, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	88db      	ldrh	r3, [r3, #6]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d10c      	bne.n	8009a36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fd fccc 	bl	80073c0 <disk_status>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <validate+0x4e>
			res = FR_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d102      	bne.n	8009a42 <validate+0x5a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	e000      	b.n	8009a44 <validate+0x5c>
 8009a42:	2300      	movs	r3, #0
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	6013      	str	r3, [r2, #0]
	return res;
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4613      	mov	r3, r2
 8009a60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009a66:	f107 0310 	add.w	r3, r7, #16
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fcd5 	bl	800941a <get_ldnumber>
 8009a70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	da01      	bge.n	8009a7c <f_mount+0x28>
 8009a78:	230b      	movs	r3, #11
 8009a7a:	e02b      	b.n	8009ad4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a7c:	4a17      	ldr	r2, [pc, #92]	@ (8009adc <f_mount+0x88>)
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009a8c:	69b8      	ldr	r0, [r7, #24]
 8009a8e:	f7fd ff7d 	bl	800798c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	490d      	ldr	r1, [pc, #52]	@ (8009adc <f_mount+0x88>)
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <f_mount+0x66>
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d001      	beq.n	8009abe <f_mount+0x6a>
 8009aba:	2300      	movs	r3, #0
 8009abc:	e00a      	b.n	8009ad4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009abe:	f107 010c 	add.w	r1, r7, #12
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff fd41 	bl	8009550 <find_volume>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3720      	adds	r7, #32
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20000750 	.word	0x20000750

08009ae0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009aec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009af0:	6018      	str	r0, [r3, #0]
 8009af2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009af6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8009afa:	6019      	str	r1, [r3, #0]
 8009afc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b00:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009b04:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b06:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b0a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <f_open+0x38>
 8009b14:	2309      	movs	r3, #9
 8009b16:	e291      	b.n	800a03c <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b18:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b1c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009b20:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009b24:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009b28:	7812      	ldrb	r2, [r2, #0]
 8009b2a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009b2e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009b30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b34:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009b38:	781a      	ldrb	r2, [r3, #0]
 8009b3a:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7ff fd04 	bl	8009550 <find_volume>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8009b4e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f040 8265 	bne.w	800a022 <f_open+0x542>
		dj.obj.fs = fs;
 8009b58:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009b5c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8009b60:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009b64:	f107 0214 	add.w	r2, r7, #20
 8009b68:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009b6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009b6e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fbdc 	bl	8009338 <follow_path>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009b86:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d11c      	bne.n	8009bc8 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009b8e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8009b92:	b25b      	sxtb	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da03      	bge.n	8009ba0 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8009b98:	2306      	movs	r3, #6
 8009b9a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009b9e:	e013      	b.n	8009bc8 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ba0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ba4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	bf8c      	ite	hi
 8009bae:	2301      	movhi	r3, #1
 8009bb0:	2300      	movls	r3, #0
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009bba:	4611      	mov	r1, r2
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fd fd9d 	bl	80076fc <chk_lock>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009bc8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009bcc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	f003 031c 	and.w	r3, r3, #28
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 80a7 	beq.w	8009d2a <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8009bdc:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01f      	beq.n	8009c24 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009be4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d10e      	bne.n	8009c0a <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009bec:	f7fd fde2 	bl	80077b4 <enq_lock>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d006      	beq.n	8009c04 <f_open+0x124>
 8009bf6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7fe ffc4 	bl	8008b88 <dir_register>
 8009c00:	4603      	mov	r3, r0
 8009c02:	e000      	b.n	8009c06 <f_open+0x126>
 8009c04:	2312      	movs	r3, #18
 8009c06:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c0a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009c0e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009c12:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009c16:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009c1a:	7812      	ldrb	r2, [r2, #0]
 8009c1c:	f042 0208 	orr.w	r2, r2, #8
 8009c20:	701a      	strb	r2, [r3, #0]
 8009c22:	e015      	b.n	8009c50 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c24:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009c28:	f003 0311 	and.w	r3, r3, #17
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <f_open+0x158>
					res = FR_DENIED;
 8009c30:	2307      	movs	r3, #7
 8009c32:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009c36:	e00b      	b.n	8009c50 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009c3c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <f_open+0x170>
 8009c4a:	2308      	movs	r3, #8
 8009c4c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c50:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f040 8088 	bne.w	8009d6a <f_open+0x28a>
 8009c5a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009c5e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 0308 	and.w	r3, r3, #8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d07e      	beq.n	8009d6a <f_open+0x28a>
				dw = GET_FATTIME();
 8009c6c:	f7fd f982 	bl	8006f74 <get_fattime>
 8009c70:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c74:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009c78:	330e      	adds	r3, #14
 8009c7a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fd fc92 	bl	80075a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c84:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009c88:	3316      	adds	r3, #22
 8009c8a:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fd fc8a 	bl	80075a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c94:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009c98:	330b      	adds	r3, #11
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c9e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009ca2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe fbdb 	bl	8008464 <ld_clust>
 8009cae:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009cb2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009cb6:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe fbf0 	bl	80084a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009cc2:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009cc6:	331c      	adds	r3, #28
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fd fc6c 	bl	80075a8 <st_dword>
					fs->wflag = 1;
 8009cd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009cd8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d044      	beq.n	8009d6a <f_open+0x28a>
						dw = fs->winsect;
 8009ce0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce6:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8009cea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe f8fd 	bl	8007ef4 <remove_chain>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8009d00:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d130      	bne.n	8009d6a <f_open+0x28a>
							res = move_window(fs, dw);
 8009d08:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009d0c:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd fea3 	bl	8007a5c <move_window>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009d20:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8009d24:	3a01      	subs	r2, #1
 8009d26:	611a      	str	r2, [r3, #16]
 8009d28:	e01f      	b.n	8009d6a <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d2a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d11b      	bne.n	8009d6a <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d32:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009d36:	f003 0310 	and.w	r3, r3, #16
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <f_open+0x266>
					res = FR_NO_FILE;
 8009d3e:	2304      	movs	r3, #4
 8009d40:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009d44:	e011      	b.n	8009d6a <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009d4a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d008      	beq.n	8009d6a <f_open+0x28a>
 8009d58:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d002      	beq.n	8009d6a <f_open+0x28a>
						res = FR_DENIED;
 8009d64:	2307      	movs	r3, #7
 8009d66:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d6a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d148      	bne.n	8009e04 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009d76:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00b      	beq.n	8009d9c <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8009d84:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009d88:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009d8c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009d90:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009d94:	7812      	ldrb	r2, [r2, #0]
 8009d96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d9a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009da2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009da6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009dae:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009db2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009db6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009dbe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009dc2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	bf8c      	ite	hi
 8009dcc:	2301      	movhi	r3, #1
 8009dce:	2300      	movls	r3, #0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fd fd0c 	bl	80077f8 <inc_lock>
 8009de0:	4602      	mov	r2, r0
 8009de2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009de6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009dee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009df2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <f_open+0x324>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e04:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 810a 	bne.w	800a022 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009e12:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009e16:	4611      	mov	r1, r2
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe fb23 	bl	8008464 <ld_clust>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e24:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e2c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8009e30:	331c      	adds	r3, #28
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fd fb7a 	bl	800752c <ld_dword>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e3e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e4a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2200      	movs	r2, #0
 8009e52:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e54:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009e58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e5c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e64:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009e68:	88da      	ldrh	r2, [r3, #6]
 8009e6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e6e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e7a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009e84:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009e88:	7812      	ldrb	r2, [r2, #0]
 8009e8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e8c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e90:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e9a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009e9e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009ea8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009eac:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009eb6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009eba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3330      	adds	r3, #48	@ 0x30
 8009ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fd fbba 	bl	8007642 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009ece:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ed2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 80a0 	beq.w	800a022 <f_open+0x542>
 8009ee2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ee6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 8097 	beq.w	800a022 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ef4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ef8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009f04:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f0c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009f10:	895b      	ldrh	r3, [r3, #10]
 8009f12:	025b      	lsls	r3, r3, #9
 8009f14:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f18:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009f1c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f28:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009f2c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009f38:	e021      	b.n	8009f7e <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 8009f3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009f3e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fd fe42 	bl	8007bd2 <get_fat>
 8009f4e:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8009f52:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d802      	bhi.n	8009f60 <f_open+0x480>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f60:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f68:	d102      	bne.n	8009f70 <f_open+0x490>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f70:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009f74:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009f7e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d105      	bne.n	8009f92 <f_open+0x4b2>
 8009f86:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8009f8a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d8d3      	bhi.n	8009f3a <f_open+0x45a>
				}
				fp->clust = clst;
 8009f92:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009f96:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009fa0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009fa2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d13b      	bne.n	800a022 <f_open+0x542>
 8009faa:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d035      	beq.n	800a022 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009fb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009fba:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fd fde8 	bl	8007b94 <clust2sect>
 8009fc4:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 8009fc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d103      	bne.n	8009fd8 <f_open+0x4f8>
						res = FR_INT_ERR;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009fd6:	e024      	b.n	800a022 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009fd8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009fdc:	0a5a      	lsrs	r2, r3, #9
 8009fde:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009fe2:	441a      	add	r2, r3
 8009fe4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009fe8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ff0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009ff4:	7858      	ldrb	r0, [r3, #1]
 8009ff6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009ffa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a004:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800a008:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	2301      	movs	r3, #1
 800a012:	f7fd fa15 	bl	8007440 <disk_read>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <f_open+0x542>
 800a01c:	2301      	movs	r3, #1
 800a01e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a022:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800a026:	2b00      	cmp	r3, #0
 800a028:	d006      	beq.n	800a038 <f_open+0x558>
 800a02a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800a02e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a038:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b08e      	sub	sp, #56	@ 0x38
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	60f8      	str	r0, [r7, #12]
 800a04e:	60b9      	str	r1, [r7, #8]
 800a050:	607a      	str	r2, [r7, #4]
 800a052:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f107 0214 	add.w	r2, r7, #20
 800a064:	4611      	mov	r1, r2
 800a066:	4618      	mov	r0, r3
 800a068:	f7ff fcbe 	bl	80099e8 <validate>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a076:	2b00      	cmp	r3, #0
 800a078:	d107      	bne.n	800a08a <f_read+0x44>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	7d5b      	ldrb	r3, [r3, #21]
 800a07e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a082:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <f_read+0x4a>
 800a08a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a08e:	e115      	b.n	800a2bc <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	7d1b      	ldrb	r3, [r3, #20]
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <f_read+0x5a>
 800a09c:	2307      	movs	r3, #7
 800a09e:	e10d      	b.n	800a2bc <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	68da      	ldr	r2, [r3, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	f240 80fe 	bls.w	800a2b2 <f_read+0x26c>
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a0ba:	e0fa      	b.n	800a2b2 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f040 80c6 	bne.w	800a256 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	0a5b      	lsrs	r3, r3, #9
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	8952      	ldrh	r2, [r2, #10]
 800a0d4:	3a01      	subs	r2, #1
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d12f      	bne.n	800a140 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d103      	bne.n	800a0f0 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ee:	e013      	b.n	800a118 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d007      	beq.n	800a108 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f7fd fff5 	bl	80080ee <clmt_clust>
 800a104:	6338      	str	r0, [r7, #48]	@ 0x30
 800a106:	e007      	b.n	800a118 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	4619      	mov	r1, r3
 800a110:	4610      	mov	r0, r2
 800a112:	f7fd fd5e 	bl	8007bd2 <get_fat>
 800a116:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d804      	bhi.n	800a128 <f_read+0xe2>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2202      	movs	r2, #2
 800a122:	755a      	strb	r2, [r3, #21]
 800a124:	2302      	movs	r3, #2
 800a126:	e0c9      	b.n	800a2bc <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12e:	d104      	bne.n	800a13a <f_read+0xf4>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	755a      	strb	r2, [r3, #21]
 800a136:	2301      	movs	r3, #1
 800a138:	e0c0      	b.n	800a2bc <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a13e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fd fd23 	bl	8007b94 <clust2sect>
 800a14e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d104      	bne.n	800a160 <f_read+0x11a>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2202      	movs	r2, #2
 800a15a:	755a      	strb	r2, [r3, #21]
 800a15c:	2302      	movs	r3, #2
 800a15e:	e0ad      	b.n	800a2bc <f_read+0x276>
			sect += csect;
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	0a5b      	lsrs	r3, r3, #9
 800a16c:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	2b00      	cmp	r3, #0
 800a172:	d039      	beq.n	800a1e8 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a174:	69fa      	ldr	r2, [r7, #28]
 800a176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a178:	4413      	add	r3, r2
 800a17a:	697a      	ldr	r2, [r7, #20]
 800a17c:	8952      	ldrh	r2, [r2, #10]
 800a17e:	4293      	cmp	r3, r2
 800a180:	d905      	bls.n	800a18e <f_read+0x148>
					cc = fs->csize - csect;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	895b      	ldrh	r3, [r3, #10]
 800a186:	461a      	mov	r2, r3
 800a188:	69fb      	ldr	r3, [r7, #28]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	7858      	ldrb	r0, [r3, #1]
 800a192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a198:	f7fd f952 	bl	8007440 <disk_read>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d004      	beq.n	800a1ac <f_read+0x166>
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	755a      	strb	r2, [r3, #21]
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e087      	b.n	800a2bc <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	7d1b      	ldrb	r3, [r3, #20]
 800a1b0:	b25b      	sxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da14      	bge.n	800a1e0 <f_read+0x19a>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6a1a      	ldr	r2, [r3, #32]
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d90d      	bls.n	800a1e0 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	025b      	lsls	r3, r3, #9
 800a1ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1d0:	18d0      	adds	r0, r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3330      	adds	r3, #48	@ 0x30
 800a1d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f7fd fa10 	bl	8007600 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e2:	025b      	lsls	r3, r3, #9
 800a1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a1e6:	e050      	b.n	800a28a <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	69ba      	ldr	r2, [r7, #24]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d02e      	beq.n	800a250 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	7d1b      	ldrb	r3, [r3, #20]
 800a1f6:	b25b      	sxtb	r3, r3
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	da18      	bge.n	800a22e <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	7858      	ldrb	r0, [r3, #1]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1a      	ldr	r2, [r3, #32]
 800a20a:	2301      	movs	r3, #1
 800a20c:	f7fd f938 	bl	8007480 <disk_write>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d004      	beq.n	800a220 <f_read+0x1da>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	755a      	strb	r2, [r3, #21]
 800a21c:	2301      	movs	r3, #1
 800a21e:	e04d      	b.n	800a2bc <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	7d1b      	ldrb	r3, [r3, #20]
 800a224:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	7858      	ldrb	r0, [r3, #1]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a238:	2301      	movs	r3, #1
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	f7fd f900 	bl	8007440 <disk_read>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d004      	beq.n	800a250 <f_read+0x20a>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	755a      	strb	r2, [r3, #21]
 800a24c:	2301      	movs	r3, #1
 800a24e:	e035      	b.n	800a2bc <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a262:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d901      	bls.n	800a270 <f_read+0x22a>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27e:	4413      	add	r3, r2
 800a280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a282:	4619      	mov	r1, r3
 800a284:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a286:	f7fd f9bb 	bl	8007600 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a28a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28e:	4413      	add	r3, r2
 800a290:	627b      	str	r3, [r7, #36]	@ 0x24
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	699a      	ldr	r2, [r3, #24]
 800a296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a298:	441a      	add	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	619a      	str	r2, [r3, #24]
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a4:	441a      	add	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f47f af01 	bne.w	800a0bc <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3738      	adds	r7, #56	@ 0x38
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f107 0208 	add.w	r2, r7, #8
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff fb87 	bl	80099e8 <validate>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d168      	bne.n	800a3b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	7d1b      	ldrb	r3, [r3, #20]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d062      	beq.n	800a3b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7d1b      	ldrb	r3, [r3, #20]
 800a2f4:	b25b      	sxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	da15      	bge.n	800a326 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	7858      	ldrb	r0, [r3, #1]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a1a      	ldr	r2, [r3, #32]
 800a308:	2301      	movs	r3, #1
 800a30a:	f7fd f8b9 	bl	8007480 <disk_write>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <f_sync+0x54>
 800a314:	2301      	movs	r3, #1
 800a316:	e04f      	b.n	800a3b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	7d1b      	ldrb	r3, [r3, #20]
 800a31c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a320:	b2da      	uxtb	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a326:	f7fc fe25 	bl	8006f74 <get_fattime>
 800a32a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fd fb91 	bl	8007a5c <move_window>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d138      	bne.n	800a3b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	330b      	adds	r3, #11
 800a34e:	781a      	ldrb	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	330b      	adds	r3, #11
 800a354:	f042 0220 	orr.w	r2, r2, #32
 800a358:	b2d2      	uxtb	r2, r2
 800a35a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	461a      	mov	r2, r3
 800a366:	68f9      	ldr	r1, [r7, #12]
 800a368:	f7fe f89b 	bl	80084a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f103 021c 	add.w	r2, r3, #28
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	4619      	mov	r1, r3
 800a378:	4610      	mov	r0, r2
 800a37a:	f7fd f915 	bl	80075a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3316      	adds	r3, #22
 800a382:	6939      	ldr	r1, [r7, #16]
 800a384:	4618      	mov	r0, r3
 800a386:	f7fd f90f 	bl	80075a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3312      	adds	r3, #18
 800a38e:	2100      	movs	r1, #0
 800a390:	4618      	mov	r0, r3
 800a392:	f7fd f8ee 	bl	8007572 <st_word>
					fs->wflag = 1;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2201      	movs	r2, #1
 800a39a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd fb8a 	bl	8007ab8 <sync_fs>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7d1b      	ldrb	r3, [r3, #20]
 800a3ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b084      	sub	sp, #16
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff ff7b 	bl	800a2c4 <f_sync>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d118      	bne.n	800a40a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f107 0208 	add.w	r2, r7, #8
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff fb01 	bl	80099e8 <validate>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10c      	bne.n	800a40a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fd fa8d 	bl	8007914 <dec_lock>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d102      	bne.n	800a40a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a420:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a424:	6018      	str	r0, [r3, #0]
 800a426:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a42a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800a42e:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800a430:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a434:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <f_opendir+0x2e>
 800a43e:	2309      	movs	r3, #9
 800a440:	e0a0      	b.n	800a584 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 800a442:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a446:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 800a450:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800a454:	463b      	mov	r3, r7
 800a456:	2200      	movs	r2, #0
 800a458:	4618      	mov	r0, r3
 800a45a:	f7ff f879 	bl	8009550 <find_volume>
 800a45e:	4603      	mov	r3, r0
 800a460:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 800a464:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f040 8081 	bne.w	800a570 <f_opendir+0x15c>
		obj->fs = fs;
 800a46e:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800a472:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a476:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800a478:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a47c:	f107 020c 	add.w	r2, r7, #12
 800a480:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800a482:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a486:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a490:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a494:	4611      	mov	r1, r2
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	f7fe ff4e 	bl	8009338 <follow_path>
 800a49c:	4603      	mov	r3, r0
 800a49e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 800a4a2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d15b      	bne.n	800a562 <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800a4aa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a4ae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a4b8:	b25b      	sxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	db1a      	blt.n	800a4f4 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800a4be:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a4c2:	799b      	ldrb	r3, [r3, #6]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800a4cc:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800a4d0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a4d4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f7fd ffc0 	bl	8008464 <ld_clust>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a4ea:	609a      	str	r2, [r3, #8]
 800a4ec:	e002      	b.n	800a4f4 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800a4ee:	2305      	movs	r3, #5
 800a4f0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 800a4f4:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d132      	bne.n	800a562 <f_opendir+0x14e>
				obj->id = fs->id;
 800a4fc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a500:	88da      	ldrh	r2, [r3, #6]
 800a502:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a506:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800a508:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a50c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a510:	2100      	movs	r1, #0
 800a512:	6818      	ldr	r0, [r3, #0]
 800a514:	f7fd fe1f 	bl	8008156 <dir_sdi>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800a51e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a522:	2b00      	cmp	r3, #0
 800a524:	d11d      	bne.n	800a562 <f_opendir+0x14e>
					if (obj->sclust) {
 800a526:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d014      	beq.n	800a55a <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800a530:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800a534:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800a538:	2100      	movs	r1, #0
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	f7fd f95c 	bl	80077f8 <inc_lock>
 800a540:	4602      	mov	r2, r0
 800a542:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a546:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800a548:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d107      	bne.n	800a562 <f_opendir+0x14e>
 800a552:	2312      	movs	r3, #18
 800a554:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800a558:	e003      	b.n	800a562 <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800a55a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a55e:	2200      	movs	r2, #0
 800a560:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800a562:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a566:	2b04      	cmp	r3, #4
 800a568:	d102      	bne.n	800a570 <f_opendir+0x15c>
 800a56a:	2305      	movs	r3, #5
 800a56c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800a570:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800a574:	2b00      	cmp	r3, #0
 800a576:	d003      	beq.n	800a580 <f_opendir+0x16c>
 800a578:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800a57c:	2200      	movs	r2, #0
 800a57e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a580:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 800a584:	4618      	mov	r0, r3
 800a586:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f107 0208 	add.w	r2, r7, #8
 800a59c:	4611      	mov	r1, r2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fa22 	bl	80099e8 <validate>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d110      	bne.n	800a5d0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fd f9aa 	bl	8007914 <dec_lock>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5e6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a5ea:	6018      	str	r0, [r3, #0]
 800a5ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5f0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a5f4:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800a5f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a5fa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff f9ee 	bl	80099e8 <validate>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 800a612:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a616:	2b00      	cmp	r3, #0
 800a618:	d14b      	bne.n	800a6b2 <f_readdir+0xd8>
		if (!fno) {
 800a61a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a61e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10b      	bne.n	800a640 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800a628:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a62c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a630:	2100      	movs	r1, #0
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	f7fd fd8f 	bl	8008156 <dir_sdi>
 800a638:	4603      	mov	r3, r0
 800a63a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800a63e:	e038      	b.n	800a6b2 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800a640:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800a644:	f107 0208 	add.w	r2, r7, #8
 800a648:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800a64a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a64e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a652:	2100      	movs	r1, #0
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	f7fe f930 	bl	80088ba <dir_read>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800a660:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a664:	2b04      	cmp	r3, #4
 800a666:	d102      	bne.n	800a66e <f_readdir+0x94>
 800a668:	2300      	movs	r3, #0
 800a66a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800a66e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a672:	2b00      	cmp	r3, #0
 800a674:	d11d      	bne.n	800a6b2 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 800a676:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a67a:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800a67e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a682:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a686:	6811      	ldr	r1, [r2, #0]
 800a688:	6818      	ldr	r0, [r3, #0]
 800a68a:	f7fe fbbf 	bl	8008e0c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800a68e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a692:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800a696:	2100      	movs	r1, #0
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	f7fd fdd7 	bl	800824c <dir_next>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800a6a4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d102      	bne.n	800a6b2 <f_readdir+0xd8>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800a6b2:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800a6cc:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800a6d0:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a6d8:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800a6dc:	1d3b      	adds	r3, r7, #4
 800a6de:	2202      	movs	r2, #2
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe ff35 	bl	8009550 <find_volume>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
	dj.obj.fs = fs;
 800a6ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a6f0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
	if (res == FR_OK) {
 800a6f4:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f040 80a1 	bne.w	800a840 <f_unlink+0x180>
		INIT_NAMBUF(fs);
 800a6fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a702:	f107 020c 	add.w	r2, r7, #12
 800a706:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 800a708:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 800a70c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fe0d 	bl	8009338 <follow_path>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800a724:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d108      	bne.n	800a73e <f_unlink+0x7e>
 800a72c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800a730:	2102      	movs	r1, #2
 800a732:	4618      	mov	r0, r3
 800a734:	f7fc ffe2 	bl	80076fc <chk_lock>
 800a738:	4603      	mov	r3, r0
 800a73a:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800a73e:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d17c      	bne.n	800a840 <f_unlink+0x180>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800a746:	f897 3273 	ldrb.w	r3, [r7, #627]	@ 0x273
 800a74a:	b25b      	sxtb	r3, r3
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da03      	bge.n	800a758 <f_unlink+0x98>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800a750:	2306      	movs	r3, #6
 800a752:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
 800a756:	e008      	b.n	800a76a <f_unlink+0xaa>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800a758:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <f_unlink+0xaa>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800a764:	2307      	movs	r3, #7
 800a766:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
				}
			}
			if (res == FR_OK) {
 800a76a:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d13b      	bne.n	800a7ea <f_unlink+0x12a>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800a772:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a776:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fd fe71 	bl	8008464 <ld_clust>
 800a782:	f8c7 0278 	str.w	r0, [r7, #632]	@ 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800a786:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 800a78a:	f003 0310 	and.w	r3, r3, #16
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d02b      	beq.n	800a7ea <f_unlink+0x12a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800a792:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a796:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
						sdj.obj.sclust = dclst;
 800a79a:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800a79e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800a7a2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fd fcd4 	bl	8008156 <dir_sdi>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
						if (res == FR_OK) {
 800a7b4:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d116      	bne.n	800a7ea <f_unlink+0x12a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800a7bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe f879 	bl	80088ba <dir_read>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800a7ce:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <f_unlink+0x11c>
 800a7d6:	2307      	movs	r3, #7
 800a7d8:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800a7dc:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	d102      	bne.n	800a7ea <f_unlink+0x12a>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 800a7ea:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d126      	bne.n	800a840 <f_unlink+0x180>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800a7f2:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe fabe 	bl	8008d78 <dir_remove>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800a802:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10e      	bne.n	800a828 <f_unlink+0x168>
 800a80a:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <f_unlink+0x168>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800a812:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800a816:	2200      	movs	r2, #0
 800a818:	f8d7 1278 	ldr.w	r1, [r7, #632]	@ 0x278
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fd fb69 	bl	8007ef4 <remove_chain>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800a828:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d107      	bne.n	800a840 <f_unlink+0x180>
 800a830:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800a834:	4618      	mov	r0, r3
 800a836:	f7fd f93f 	bl	8007ab8 <sync_fs>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a840:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
}
 800a844:	4618      	mov	r0, r3
 800a846:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800a84e:	b590      	push	{r4, r7, lr}
 800a850:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 800a854:	af00      	add	r7, sp, #0
 800a856:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800a85a:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800a85e:	6018      	str	r0, [r3, #0]
 800a860:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800a864:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800a868:	6019      	str	r1, [r3, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800a86a:	463b      	mov	r3, r7
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fe fdd4 	bl	800941a <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800a872:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800a876:	1d3b      	adds	r3, r7, #4
 800a878:	2202      	movs	r2, #2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fe fe68 	bl	8009550 <find_volume>
 800a880:	4603      	mov	r3, r0
 800a882:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
	if (res == FR_OK) {
 800a886:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f040 80fc 	bne.w	800aa88 <f_rename+0x23a>
		djo.obj.fs = fs;
 800a890:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800a894:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
		INIT_NAMBUF(fs);
 800a898:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800a89c:	f107 0208 	add.w	r2, r7, #8
 800a8a0:	60da      	str	r2, [r3, #12]
		res = follow_path(&djo, path_old);		/* Check old object */
 800a8a2:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800a8a6:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe fd40 	bl	8009338 <follow_path>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800a8be:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d108      	bne.n	800a8d8 <f_rename+0x8a>
 800a8c6:	f897 3287 	ldrb.w	r3, [r7, #647]	@ 0x287
 800a8ca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <f_rename+0x8a>
 800a8d2:	2306      	movs	r3, #6
 800a8d4:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800a8d8:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <f_rename+0xa4>
			res = chk_lock(&djo, 2);
 800a8e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800a8e4:	2102      	movs	r1, #2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fc ff08 	bl	80076fc <chk_lock>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800a8f2:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f040 80c6 	bne.w	800aa88 <f_rename+0x23a>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800a8fc:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 800a900:	f103 010b 	add.w	r1, r3, #11
 800a904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a908:	2215      	movs	r2, #21
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fc fe78 	bl	8007600 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800a910:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 800a914:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800a918:	2234      	movs	r2, #52	@ 0x34
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fc fe70 	bl	8007600 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800a920:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 800a924:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800a92e:	4611      	mov	r1, r2
 800a930:	4618      	mov	r0, r3
 800a932:	f7fe fd01 	bl	8009338 <follow_path>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800a93c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a940:	2b00      	cmp	r3, #0
 800a942:	d110      	bne.n	800a966 <f_rename+0x118>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800a944:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800a948:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d107      	bne.n	800a960 <f_rename+0x112>
 800a950:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800a954:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800a958:	429a      	cmp	r2, r3
 800a95a:	d101      	bne.n	800a960 <f_rename+0x112>
 800a95c:	2304      	movs	r3, #4
 800a95e:	e000      	b.n	800a962 <f_rename+0x114>
 800a960:	2308      	movs	r3, #8
 800a962:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800a966:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d174      	bne.n	800aa58 <f_rename+0x20a>
					res = dir_register(&djn);			/* Register the new entry */
 800a96e:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 800a972:	4618      	mov	r0, r3
 800a974:	f7fe f908 	bl	8008b88 <dir_register>
 800a978:	4603      	mov	r3, r0
 800a97a:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
					if (res == FR_OK) {
 800a97e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800a982:	2b00      	cmp	r3, #0
 800a984:	d168      	bne.n	800aa58 <f_rename+0x20a>
						dir = djn.dir;					/* Copy information about object except name */
 800a986:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800a98a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
						mem_cpy(dir + 13, buf + 2, 19);
 800a98e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800a992:	f103 000d 	add.w	r0, r3, #13
 800a996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800a99a:	3302      	adds	r3, #2
 800a99c:	2213      	movs	r2, #19
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f7fc fe2e 	bl	8007600 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800a9a4:	f897 2208 	ldrb.w	r2, [r7, #520]	@ 0x208
 800a9a8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800a9ac:	330b      	adds	r3, #11
 800a9ae:	f042 0220 	orr.w	r2, r2, #32
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800a9b6:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800a9be:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800a9c2:	330b      	adds	r3, #11
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	f003 0310 	and.w	r3, r3, #16
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d044      	beq.n	800aa58 <f_rename+0x20a>
 800a9ce:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800a9d2:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d03e      	beq.n	800aa58 <f_rename+0x20a>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800a9da:	f8d7 4220 	ldr.w	r4, [r7, #544]	@ 0x220
 800a9de:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800a9e2:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fd fd3c 	bl	8008464 <ld_clust>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7fd f8cf 	bl	8007b94 <clust2sect>
 800a9f6:	f8c7 028c 	str.w	r0, [r7, #652]	@ 0x28c
							if (!dw) {
 800a9fa:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d103      	bne.n	800aa0a <f_rename+0x1bc>
								res = FR_INT_ERR;
 800aa02:	2302      	movs	r3, #2
 800aa04:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 800aa08:	e026      	b.n	800aa58 <f_rename+0x20a>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800aa0a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800aa0e:	f8d7 128c 	ldr.w	r1, [r7, #652]	@ 0x28c
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fd f822 	bl	8007a5c <move_window>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800aa1e:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800aa22:	3334      	adds	r3, #52	@ 0x34
 800aa24:	3320      	adds	r3, #32
 800aa26:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
								if (res == FR_OK && dir[1] == '.') {
 800aa2a:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d112      	bne.n	800aa58 <f_rename+0x20a>
 800aa32:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 800aa36:	3301      	adds	r3, #1
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa3c:	d10c      	bne.n	800aa58 <f_rename+0x20a>
									st_clust(fs, dir, djn.obj.sclust);
 800aa3e:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800aa42:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800aa46:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fd fd29 	bl	80084a2 <st_clust>
									fs->wflag = 1;
 800aa50:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800aa54:	2201      	movs	r2, #1
 800aa56:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800aa58:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d113      	bne.n	800aa88 <f_rename+0x23a>
				res = dir_remove(&djo);		/* Remove old entry */
 800aa60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe f987 	bl	8008d78 <dir_remove>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
				if (res == FR_OK) {
 800aa70:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d107      	bne.n	800aa88 <f_rename+0x23a>
					res = sync_fs(fs);
 800aa78:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fd f81b 	bl	8007ab8 <sync_fs>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800aa88:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd90      	pop	{r4, r7, pc}
	...

0800aa98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aaae:	4b1f      	ldr	r3, [pc, #124]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aab0:	7a5b      	ldrb	r3, [r3, #9]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d131      	bne.n	800ab1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aab8:	4b1c      	ldr	r3, [pc, #112]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aaba:	7a5b      	ldrb	r3, [r3, #9]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	461a      	mov	r2, r3
 800aac0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aac2:	2100      	movs	r1, #0
 800aac4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aac6:	4b19      	ldr	r3, [pc, #100]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aac8:	7a5b      	ldrb	r3, [r3, #9]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	4a17      	ldr	r2, [pc, #92]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	4413      	add	r3, r2
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aad6:	4b15      	ldr	r3, [pc, #84]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aad8:	7a5b      	ldrb	r3, [r3, #9]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	461a      	mov	r2, r3
 800aade:	4b13      	ldr	r3, [pc, #76]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aae0:	4413      	add	r3, r2
 800aae2:	79fa      	ldrb	r2, [r7, #7]
 800aae4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aae6:	4b11      	ldr	r3, [pc, #68]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aae8:	7a5b      	ldrb	r3, [r3, #9]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	b2d1      	uxtb	r1, r2
 800aaf0:	4a0e      	ldr	r2, [pc, #56]	@ (800ab2c <FATFS_LinkDriverEx+0x94>)
 800aaf2:	7251      	strb	r1, [r2, #9]
 800aaf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aaf6:	7dbb      	ldrb	r3, [r7, #22]
 800aaf8:	3330      	adds	r3, #48	@ 0x30
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	3301      	adds	r3, #1
 800ab04:	223a      	movs	r2, #58	@ 0x3a
 800ab06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3302      	adds	r3, #2
 800ab0c:	222f      	movs	r2, #47	@ 0x2f
 800ab0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	3303      	adds	r3, #3
 800ab14:	2200      	movs	r2, #0
 800ab16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	20000778 	.word	0x20000778

0800ab30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff ffaa 	bl	800aa98 <FATFS_LinkDriverEx>
 800ab44:	4603      	mov	r3, r0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ab5c:	88fb      	ldrh	r3, [r7, #6]
 800ab5e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab60:	d802      	bhi.n	800ab68 <ff_convert+0x18>
		c = chr;
 800ab62:	88fb      	ldrh	r3, [r7, #6]
 800ab64:	81fb      	strh	r3, [r7, #14]
 800ab66:	e025      	b.n	800abb4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00b      	beq.n	800ab86 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ab6e:	88fb      	ldrh	r3, [r7, #6]
 800ab70:	2bff      	cmp	r3, #255	@ 0xff
 800ab72:	d805      	bhi.n	800ab80 <ff_convert+0x30>
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	3b80      	subs	r3, #128	@ 0x80
 800ab78:	4a12      	ldr	r2, [pc, #72]	@ (800abc4 <ff_convert+0x74>)
 800ab7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab7e:	e000      	b.n	800ab82 <ff_convert+0x32>
 800ab80:	2300      	movs	r3, #0
 800ab82:	81fb      	strh	r3, [r7, #14]
 800ab84:	e016      	b.n	800abb4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ab86:	2300      	movs	r3, #0
 800ab88:	81fb      	strh	r3, [r7, #14]
 800ab8a:	e009      	b.n	800aba0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ab8c:	89fb      	ldrh	r3, [r7, #14]
 800ab8e:	4a0d      	ldr	r2, [pc, #52]	@ (800abc4 <ff_convert+0x74>)
 800ab90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab94:	88fa      	ldrh	r2, [r7, #6]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d006      	beq.n	800aba8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ab9a:	89fb      	ldrh	r3, [r7, #14]
 800ab9c:	3301      	adds	r3, #1
 800ab9e:	81fb      	strh	r3, [r7, #14]
 800aba0:	89fb      	ldrh	r3, [r7, #14]
 800aba2:	2b7f      	cmp	r3, #127	@ 0x7f
 800aba4:	d9f2      	bls.n	800ab8c <ff_convert+0x3c>
 800aba6:	e000      	b.n	800abaa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aba8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800abaa:	89fb      	ldrh	r3, [r7, #14]
 800abac:	3380      	adds	r3, #128	@ 0x80
 800abae:	b29b      	uxth	r3, r3
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800abb4:	89fb      	ldrh	r3, [r7, #14]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	0800bf84 	.word	0x0800bf84

0800abc8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800abd2:	88fb      	ldrh	r3, [r7, #6]
 800abd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abd8:	d201      	bcs.n	800abde <ff_wtoupper+0x16>
 800abda:	4b3e      	ldr	r3, [pc, #248]	@ (800acd4 <ff_wtoupper+0x10c>)
 800abdc:	e000      	b.n	800abe0 <ff_wtoupper+0x18>
 800abde:	4b3e      	ldr	r3, [pc, #248]	@ (800acd8 <ff_wtoupper+0x110>)
 800abe0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	1c9a      	adds	r2, r3, #2
 800abe6:	617a      	str	r2, [r7, #20]
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800abec:	8a7b      	ldrh	r3, [r7, #18]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d068      	beq.n	800acc4 <ff_wtoupper+0xfc>
 800abf2:	88fa      	ldrh	r2, [r7, #6]
 800abf4:	8a7b      	ldrh	r3, [r7, #18]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d364      	bcc.n	800acc4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	1c9a      	adds	r2, r3, #2
 800abfe:	617a      	str	r2, [r7, #20]
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	823b      	strh	r3, [r7, #16]
 800ac04:	8a3b      	ldrh	r3, [r7, #16]
 800ac06:	0a1b      	lsrs	r3, r3, #8
 800ac08:	81fb      	strh	r3, [r7, #14]
 800ac0a:	8a3b      	ldrh	r3, [r7, #16]
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ac10:	88fa      	ldrh	r2, [r7, #6]
 800ac12:	8a79      	ldrh	r1, [r7, #18]
 800ac14:	8a3b      	ldrh	r3, [r7, #16]
 800ac16:	440b      	add	r3, r1
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	da49      	bge.n	800acb0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ac1c:	89fb      	ldrh	r3, [r7, #14]
 800ac1e:	2b08      	cmp	r3, #8
 800ac20:	d84f      	bhi.n	800acc2 <ff_wtoupper+0xfa>
 800ac22:	a201      	add	r2, pc, #4	@ (adr r2, 800ac28 <ff_wtoupper+0x60>)
 800ac24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac28:	0800ac4d 	.word	0x0800ac4d
 800ac2c:	0800ac5f 	.word	0x0800ac5f
 800ac30:	0800ac75 	.word	0x0800ac75
 800ac34:	0800ac7d 	.word	0x0800ac7d
 800ac38:	0800ac85 	.word	0x0800ac85
 800ac3c:	0800ac8d 	.word	0x0800ac8d
 800ac40:	0800ac95 	.word	0x0800ac95
 800ac44:	0800ac9d 	.word	0x0800ac9d
 800ac48:	0800aca5 	.word	0x0800aca5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	8a7b      	ldrh	r3, [r7, #18]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	4413      	add	r3, r2
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	80fb      	strh	r3, [r7, #6]
 800ac5c:	e027      	b.n	800acae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ac5e:	88fa      	ldrh	r2, [r7, #6]
 800ac60:	8a7b      	ldrh	r3, [r7, #18]
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	88fa      	ldrh	r2, [r7, #6]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	80fb      	strh	r3, [r7, #6]
 800ac72:	e01c      	b.n	800acae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ac74:	88fb      	ldrh	r3, [r7, #6]
 800ac76:	3b10      	subs	r3, #16
 800ac78:	80fb      	strh	r3, [r7, #6]
 800ac7a:	e018      	b.n	800acae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	3b20      	subs	r3, #32
 800ac80:	80fb      	strh	r3, [r7, #6]
 800ac82:	e014      	b.n	800acae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ac84:	88fb      	ldrh	r3, [r7, #6]
 800ac86:	3b30      	subs	r3, #48	@ 0x30
 800ac88:	80fb      	strh	r3, [r7, #6]
 800ac8a:	e010      	b.n	800acae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ac8c:	88fb      	ldrh	r3, [r7, #6]
 800ac8e:	3b1a      	subs	r3, #26
 800ac90:	80fb      	strh	r3, [r7, #6]
 800ac92:	e00c      	b.n	800acae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	3308      	adds	r3, #8
 800ac98:	80fb      	strh	r3, [r7, #6]
 800ac9a:	e008      	b.n	800acae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	3b50      	subs	r3, #80	@ 0x50
 800aca0:	80fb      	strh	r3, [r7, #6]
 800aca2:	e004      	b.n	800acae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800aca4:	88fb      	ldrh	r3, [r7, #6]
 800aca6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800acaa:	80fb      	strh	r3, [r7, #6]
 800acac:	bf00      	nop
			}
			break;
 800acae:	e008      	b.n	800acc2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800acb0:	89fb      	ldrh	r3, [r7, #14]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d195      	bne.n	800abe2 <ff_wtoupper+0x1a>
 800acb6:	8a3b      	ldrh	r3, [r7, #16]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	4413      	add	r3, r2
 800acbe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800acc0:	e78f      	b.n	800abe2 <ff_wtoupper+0x1a>
			break;
 800acc2:	bf00      	nop
	}

	return chr;
 800acc4:	88fb      	ldrh	r3, [r7, #6]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	0800c084 	.word	0x0800c084
 800acd8:	0800c278 	.word	0x0800c278

0800acdc <__sflush_r>:
 800acdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace4:	0716      	lsls	r6, r2, #28
 800ace6:	4605      	mov	r5, r0
 800ace8:	460c      	mov	r4, r1
 800acea:	d454      	bmi.n	800ad96 <__sflush_r+0xba>
 800acec:	684b      	ldr	r3, [r1, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dc02      	bgt.n	800acf8 <__sflush_r+0x1c>
 800acf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd48      	ble.n	800ad8a <__sflush_r+0xae>
 800acf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800acfa:	2e00      	cmp	r6, #0
 800acfc:	d045      	beq.n	800ad8a <__sflush_r+0xae>
 800acfe:	2300      	movs	r3, #0
 800ad00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad04:	682f      	ldr	r7, [r5, #0]
 800ad06:	6a21      	ldr	r1, [r4, #32]
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	d030      	beq.n	800ad6e <__sflush_r+0x92>
 800ad0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	0759      	lsls	r1, r3, #29
 800ad12:	d505      	bpl.n	800ad20 <__sflush_r+0x44>
 800ad14:	6863      	ldr	r3, [r4, #4]
 800ad16:	1ad2      	subs	r2, r2, r3
 800ad18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad1a:	b10b      	cbz	r3, 800ad20 <__sflush_r+0x44>
 800ad1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	2300      	movs	r3, #0
 800ad22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad24:	6a21      	ldr	r1, [r4, #32]
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b0      	blx	r6
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	d106      	bne.n	800ad3e <__sflush_r+0x62>
 800ad30:	6829      	ldr	r1, [r5, #0]
 800ad32:	291d      	cmp	r1, #29
 800ad34:	d82b      	bhi.n	800ad8e <__sflush_r+0xb2>
 800ad36:	4a2a      	ldr	r2, [pc, #168]	@ (800ade0 <__sflush_r+0x104>)
 800ad38:	410a      	asrs	r2, r1
 800ad3a:	07d6      	lsls	r6, r2, #31
 800ad3c:	d427      	bmi.n	800ad8e <__sflush_r+0xb2>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	6062      	str	r2, [r4, #4]
 800ad42:	04d9      	lsls	r1, r3, #19
 800ad44:	6922      	ldr	r2, [r4, #16]
 800ad46:	6022      	str	r2, [r4, #0]
 800ad48:	d504      	bpl.n	800ad54 <__sflush_r+0x78>
 800ad4a:	1c42      	adds	r2, r0, #1
 800ad4c:	d101      	bne.n	800ad52 <__sflush_r+0x76>
 800ad4e:	682b      	ldr	r3, [r5, #0]
 800ad50:	b903      	cbnz	r3, 800ad54 <__sflush_r+0x78>
 800ad52:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad56:	602f      	str	r7, [r5, #0]
 800ad58:	b1b9      	cbz	r1, 800ad8a <__sflush_r+0xae>
 800ad5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad5e:	4299      	cmp	r1, r3
 800ad60:	d002      	beq.n	800ad68 <__sflush_r+0x8c>
 800ad62:	4628      	mov	r0, r5
 800ad64:	f000 fb08 	bl	800b378 <_free_r>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad6c:	e00d      	b.n	800ad8a <__sflush_r+0xae>
 800ad6e:	2301      	movs	r3, #1
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b0      	blx	r6
 800ad74:	4602      	mov	r2, r0
 800ad76:	1c50      	adds	r0, r2, #1
 800ad78:	d1c9      	bne.n	800ad0e <__sflush_r+0x32>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d0c6      	beq.n	800ad0e <__sflush_r+0x32>
 800ad80:	2b1d      	cmp	r3, #29
 800ad82:	d001      	beq.n	800ad88 <__sflush_r+0xac>
 800ad84:	2b16      	cmp	r3, #22
 800ad86:	d11e      	bne.n	800adc6 <__sflush_r+0xea>
 800ad88:	602f      	str	r7, [r5, #0]
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	e022      	b.n	800add4 <__sflush_r+0xf8>
 800ad8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad92:	b21b      	sxth	r3, r3
 800ad94:	e01b      	b.n	800adce <__sflush_r+0xf2>
 800ad96:	690f      	ldr	r7, [r1, #16]
 800ad98:	2f00      	cmp	r7, #0
 800ad9a:	d0f6      	beq.n	800ad8a <__sflush_r+0xae>
 800ad9c:	0793      	lsls	r3, r2, #30
 800ad9e:	680e      	ldr	r6, [r1, #0]
 800ada0:	bf08      	it	eq
 800ada2:	694b      	ldreq	r3, [r1, #20]
 800ada4:	600f      	str	r7, [r1, #0]
 800ada6:	bf18      	it	ne
 800ada8:	2300      	movne	r3, #0
 800adaa:	eba6 0807 	sub.w	r8, r6, r7
 800adae:	608b      	str	r3, [r1, #8]
 800adb0:	f1b8 0f00 	cmp.w	r8, #0
 800adb4:	dde9      	ble.n	800ad8a <__sflush_r+0xae>
 800adb6:	6a21      	ldr	r1, [r4, #32]
 800adb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800adba:	4643      	mov	r3, r8
 800adbc:	463a      	mov	r2, r7
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b0      	blx	r6
 800adc2:	2800      	cmp	r0, #0
 800adc4:	dc08      	bgt.n	800add8 <__sflush_r+0xfc>
 800adc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	f04f 30ff 	mov.w	r0, #4294967295
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	4407      	add	r7, r0
 800adda:	eba8 0800 	sub.w	r8, r8, r0
 800adde:	e7e7      	b.n	800adb0 <__sflush_r+0xd4>
 800ade0:	dfbffffe 	.word	0xdfbffffe

0800ade4 <_fflush_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	690b      	ldr	r3, [r1, #16]
 800ade8:	4605      	mov	r5, r0
 800adea:	460c      	mov	r4, r1
 800adec:	b913      	cbnz	r3, 800adf4 <_fflush_r+0x10>
 800adee:	2500      	movs	r5, #0
 800adf0:	4628      	mov	r0, r5
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	b118      	cbz	r0, 800adfe <_fflush_r+0x1a>
 800adf6:	6a03      	ldr	r3, [r0, #32]
 800adf8:	b90b      	cbnz	r3, 800adfe <_fflush_r+0x1a>
 800adfa:	f000 f8bb 	bl	800af74 <__sinit>
 800adfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f3      	beq.n	800adee <_fflush_r+0xa>
 800ae06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae08:	07d0      	lsls	r0, r2, #31
 800ae0a:	d404      	bmi.n	800ae16 <_fflush_r+0x32>
 800ae0c:	0599      	lsls	r1, r3, #22
 800ae0e:	d402      	bmi.n	800ae16 <_fflush_r+0x32>
 800ae10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae12:	f000 faae 	bl	800b372 <__retarget_lock_acquire_recursive>
 800ae16:	4628      	mov	r0, r5
 800ae18:	4621      	mov	r1, r4
 800ae1a:	f7ff ff5f 	bl	800acdc <__sflush_r>
 800ae1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae20:	07da      	lsls	r2, r3, #31
 800ae22:	4605      	mov	r5, r0
 800ae24:	d4e4      	bmi.n	800adf0 <_fflush_r+0xc>
 800ae26:	89a3      	ldrh	r3, [r4, #12]
 800ae28:	059b      	lsls	r3, r3, #22
 800ae2a:	d4e1      	bmi.n	800adf0 <_fflush_r+0xc>
 800ae2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae2e:	f000 faa1 	bl	800b374 <__retarget_lock_release_recursive>
 800ae32:	e7dd      	b.n	800adf0 <_fflush_r+0xc>

0800ae34 <fflush>:
 800ae34:	4601      	mov	r1, r0
 800ae36:	b920      	cbnz	r0, 800ae42 <fflush+0xe>
 800ae38:	4a04      	ldr	r2, [pc, #16]	@ (800ae4c <fflush+0x18>)
 800ae3a:	4905      	ldr	r1, [pc, #20]	@ (800ae50 <fflush+0x1c>)
 800ae3c:	4805      	ldr	r0, [pc, #20]	@ (800ae54 <fflush+0x20>)
 800ae3e:	f000 b8b1 	b.w	800afa4 <_fwalk_sglue>
 800ae42:	4b05      	ldr	r3, [pc, #20]	@ (800ae58 <fflush+0x24>)
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f7ff bfcd 	b.w	800ade4 <_fflush_r>
 800ae4a:	bf00      	nop
 800ae4c:	2000000c 	.word	0x2000000c
 800ae50:	0800ade5 	.word	0x0800ade5
 800ae54:	2000001c 	.word	0x2000001c
 800ae58:	20000018 	.word	0x20000018

0800ae5c <std>:
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	b510      	push	{r4, lr}
 800ae60:	4604      	mov	r4, r0
 800ae62:	e9c0 3300 	strd	r3, r3, [r0]
 800ae66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae6a:	6083      	str	r3, [r0, #8]
 800ae6c:	8181      	strh	r1, [r0, #12]
 800ae6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae70:	81c2      	strh	r2, [r0, #14]
 800ae72:	6183      	str	r3, [r0, #24]
 800ae74:	4619      	mov	r1, r3
 800ae76:	2208      	movs	r2, #8
 800ae78:	305c      	adds	r0, #92	@ 0x5c
 800ae7a:	f000 fa01 	bl	800b280 <memset>
 800ae7e:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb4 <std+0x58>)
 800ae80:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae82:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb8 <std+0x5c>)
 800ae84:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae86:	4b0d      	ldr	r3, [pc, #52]	@ (800aebc <std+0x60>)
 800ae88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae8a:	4b0d      	ldr	r3, [pc, #52]	@ (800aec0 <std+0x64>)
 800ae8c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae8e:	4b0d      	ldr	r3, [pc, #52]	@ (800aec4 <std+0x68>)
 800ae90:	6224      	str	r4, [r4, #32]
 800ae92:	429c      	cmp	r4, r3
 800ae94:	d006      	beq.n	800aea4 <std+0x48>
 800ae96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae9a:	4294      	cmp	r4, r2
 800ae9c:	d002      	beq.n	800aea4 <std+0x48>
 800ae9e:	33d0      	adds	r3, #208	@ 0xd0
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d105      	bne.n	800aeb0 <std+0x54>
 800aea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeac:	f000 ba60 	b.w	800b370 <__retarget_lock_init_recursive>
 800aeb0:	bd10      	pop	{r4, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800b0d1 	.word	0x0800b0d1
 800aeb8:	0800b0f3 	.word	0x0800b0f3
 800aebc:	0800b12b 	.word	0x0800b12b
 800aec0:	0800b14f 	.word	0x0800b14f
 800aec4:	20000784 	.word	0x20000784

0800aec8 <stdio_exit_handler>:
 800aec8:	4a02      	ldr	r2, [pc, #8]	@ (800aed4 <stdio_exit_handler+0xc>)
 800aeca:	4903      	ldr	r1, [pc, #12]	@ (800aed8 <stdio_exit_handler+0x10>)
 800aecc:	4803      	ldr	r0, [pc, #12]	@ (800aedc <stdio_exit_handler+0x14>)
 800aece:	f000 b869 	b.w	800afa4 <_fwalk_sglue>
 800aed2:	bf00      	nop
 800aed4:	2000000c 	.word	0x2000000c
 800aed8:	0800ade5 	.word	0x0800ade5
 800aedc:	2000001c 	.word	0x2000001c

0800aee0 <cleanup_stdio>:
 800aee0:	6841      	ldr	r1, [r0, #4]
 800aee2:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <cleanup_stdio+0x34>)
 800aee4:	4299      	cmp	r1, r3
 800aee6:	b510      	push	{r4, lr}
 800aee8:	4604      	mov	r4, r0
 800aeea:	d001      	beq.n	800aef0 <cleanup_stdio+0x10>
 800aeec:	f7ff ff7a 	bl	800ade4 <_fflush_r>
 800aef0:	68a1      	ldr	r1, [r4, #8]
 800aef2:	4b09      	ldr	r3, [pc, #36]	@ (800af18 <cleanup_stdio+0x38>)
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d002      	beq.n	800aefe <cleanup_stdio+0x1e>
 800aef8:	4620      	mov	r0, r4
 800aefa:	f7ff ff73 	bl	800ade4 <_fflush_r>
 800aefe:	68e1      	ldr	r1, [r4, #12]
 800af00:	4b06      	ldr	r3, [pc, #24]	@ (800af1c <cleanup_stdio+0x3c>)
 800af02:	4299      	cmp	r1, r3
 800af04:	d004      	beq.n	800af10 <cleanup_stdio+0x30>
 800af06:	4620      	mov	r0, r4
 800af08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af0c:	f7ff bf6a 	b.w	800ade4 <_fflush_r>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	bf00      	nop
 800af14:	20000784 	.word	0x20000784
 800af18:	200007ec 	.word	0x200007ec
 800af1c:	20000854 	.word	0x20000854

0800af20 <global_stdio_init.part.0>:
 800af20:	b510      	push	{r4, lr}
 800af22:	4b0b      	ldr	r3, [pc, #44]	@ (800af50 <global_stdio_init.part.0+0x30>)
 800af24:	4c0b      	ldr	r4, [pc, #44]	@ (800af54 <global_stdio_init.part.0+0x34>)
 800af26:	4a0c      	ldr	r2, [pc, #48]	@ (800af58 <global_stdio_init.part.0+0x38>)
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	4620      	mov	r0, r4
 800af2c:	2200      	movs	r2, #0
 800af2e:	2104      	movs	r1, #4
 800af30:	f7ff ff94 	bl	800ae5c <std>
 800af34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af38:	2201      	movs	r2, #1
 800af3a:	2109      	movs	r1, #9
 800af3c:	f7ff ff8e 	bl	800ae5c <std>
 800af40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af44:	2202      	movs	r2, #2
 800af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af4a:	2112      	movs	r1, #18
 800af4c:	f7ff bf86 	b.w	800ae5c <std>
 800af50:	200008bc 	.word	0x200008bc
 800af54:	20000784 	.word	0x20000784
 800af58:	0800aec9 	.word	0x0800aec9

0800af5c <__sfp_lock_acquire>:
 800af5c:	4801      	ldr	r0, [pc, #4]	@ (800af64 <__sfp_lock_acquire+0x8>)
 800af5e:	f000 ba08 	b.w	800b372 <__retarget_lock_acquire_recursive>
 800af62:	bf00      	nop
 800af64:	200008c5 	.word	0x200008c5

0800af68 <__sfp_lock_release>:
 800af68:	4801      	ldr	r0, [pc, #4]	@ (800af70 <__sfp_lock_release+0x8>)
 800af6a:	f000 ba03 	b.w	800b374 <__retarget_lock_release_recursive>
 800af6e:	bf00      	nop
 800af70:	200008c5 	.word	0x200008c5

0800af74 <__sinit>:
 800af74:	b510      	push	{r4, lr}
 800af76:	4604      	mov	r4, r0
 800af78:	f7ff fff0 	bl	800af5c <__sfp_lock_acquire>
 800af7c:	6a23      	ldr	r3, [r4, #32]
 800af7e:	b11b      	cbz	r3, 800af88 <__sinit+0x14>
 800af80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af84:	f7ff bff0 	b.w	800af68 <__sfp_lock_release>
 800af88:	4b04      	ldr	r3, [pc, #16]	@ (800af9c <__sinit+0x28>)
 800af8a:	6223      	str	r3, [r4, #32]
 800af8c:	4b04      	ldr	r3, [pc, #16]	@ (800afa0 <__sinit+0x2c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1f5      	bne.n	800af80 <__sinit+0xc>
 800af94:	f7ff ffc4 	bl	800af20 <global_stdio_init.part.0>
 800af98:	e7f2      	b.n	800af80 <__sinit+0xc>
 800af9a:	bf00      	nop
 800af9c:	0800aee1 	.word	0x0800aee1
 800afa0:	200008bc 	.word	0x200008bc

0800afa4 <_fwalk_sglue>:
 800afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	4607      	mov	r7, r0
 800afaa:	4688      	mov	r8, r1
 800afac:	4614      	mov	r4, r2
 800afae:	2600      	movs	r6, #0
 800afb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afb4:	f1b9 0901 	subs.w	r9, r9, #1
 800afb8:	d505      	bpl.n	800afc6 <_fwalk_sglue+0x22>
 800afba:	6824      	ldr	r4, [r4, #0]
 800afbc:	2c00      	cmp	r4, #0
 800afbe:	d1f7      	bne.n	800afb0 <_fwalk_sglue+0xc>
 800afc0:	4630      	mov	r0, r6
 800afc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afc6:	89ab      	ldrh	r3, [r5, #12]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d907      	bls.n	800afdc <_fwalk_sglue+0x38>
 800afcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afd0:	3301      	adds	r3, #1
 800afd2:	d003      	beq.n	800afdc <_fwalk_sglue+0x38>
 800afd4:	4629      	mov	r1, r5
 800afd6:	4638      	mov	r0, r7
 800afd8:	47c0      	blx	r8
 800afda:	4306      	orrs	r6, r0
 800afdc:	3568      	adds	r5, #104	@ 0x68
 800afde:	e7e9      	b.n	800afb4 <_fwalk_sglue+0x10>

0800afe0 <iprintf>:
 800afe0:	b40f      	push	{r0, r1, r2, r3}
 800afe2:	b507      	push	{r0, r1, r2, lr}
 800afe4:	4906      	ldr	r1, [pc, #24]	@ (800b000 <iprintf+0x20>)
 800afe6:	ab04      	add	r3, sp, #16
 800afe8:	6808      	ldr	r0, [r1, #0]
 800afea:	f853 2b04 	ldr.w	r2, [r3], #4
 800afee:	6881      	ldr	r1, [r0, #8]
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f000 fae3 	bl	800b5bc <_vfiprintf_r>
 800aff6:	b003      	add	sp, #12
 800aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800affc:	b004      	add	sp, #16
 800affe:	4770      	bx	lr
 800b000:	20000018 	.word	0x20000018

0800b004 <putchar>:
 800b004:	4b02      	ldr	r3, [pc, #8]	@ (800b010 <putchar+0xc>)
 800b006:	4601      	mov	r1, r0
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	6882      	ldr	r2, [r0, #8]
 800b00c:	f000 bdde 	b.w	800bbcc <_putc_r>
 800b010:	20000018 	.word	0x20000018

0800b014 <_puts_r>:
 800b014:	6a03      	ldr	r3, [r0, #32]
 800b016:	b570      	push	{r4, r5, r6, lr}
 800b018:	6884      	ldr	r4, [r0, #8]
 800b01a:	4605      	mov	r5, r0
 800b01c:	460e      	mov	r6, r1
 800b01e:	b90b      	cbnz	r3, 800b024 <_puts_r+0x10>
 800b020:	f7ff ffa8 	bl	800af74 <__sinit>
 800b024:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b026:	07db      	lsls	r3, r3, #31
 800b028:	d405      	bmi.n	800b036 <_puts_r+0x22>
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	0598      	lsls	r0, r3, #22
 800b02e:	d402      	bmi.n	800b036 <_puts_r+0x22>
 800b030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b032:	f000 f99e 	bl	800b372 <__retarget_lock_acquire_recursive>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	0719      	lsls	r1, r3, #28
 800b03a:	d502      	bpl.n	800b042 <_puts_r+0x2e>
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d135      	bne.n	800b0ae <_puts_r+0x9a>
 800b042:	4621      	mov	r1, r4
 800b044:	4628      	mov	r0, r5
 800b046:	f000 f8c5 	bl	800b1d4 <__swsetup_r>
 800b04a:	b380      	cbz	r0, 800b0ae <_puts_r+0x9a>
 800b04c:	f04f 35ff 	mov.w	r5, #4294967295
 800b050:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b052:	07da      	lsls	r2, r3, #31
 800b054:	d405      	bmi.n	800b062 <_puts_r+0x4e>
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	059b      	lsls	r3, r3, #22
 800b05a:	d402      	bmi.n	800b062 <_puts_r+0x4e>
 800b05c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b05e:	f000 f989 	bl	800b374 <__retarget_lock_release_recursive>
 800b062:	4628      	mov	r0, r5
 800b064:	bd70      	pop	{r4, r5, r6, pc}
 800b066:	2b00      	cmp	r3, #0
 800b068:	da04      	bge.n	800b074 <_puts_r+0x60>
 800b06a:	69a2      	ldr	r2, [r4, #24]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	dc17      	bgt.n	800b0a0 <_puts_r+0x8c>
 800b070:	290a      	cmp	r1, #10
 800b072:	d015      	beq.n	800b0a0 <_puts_r+0x8c>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	6022      	str	r2, [r4, #0]
 800b07a:	7019      	strb	r1, [r3, #0]
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b082:	3b01      	subs	r3, #1
 800b084:	60a3      	str	r3, [r4, #8]
 800b086:	2900      	cmp	r1, #0
 800b088:	d1ed      	bne.n	800b066 <_puts_r+0x52>
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	da11      	bge.n	800b0b2 <_puts_r+0x9e>
 800b08e:	4622      	mov	r2, r4
 800b090:	210a      	movs	r1, #10
 800b092:	4628      	mov	r0, r5
 800b094:	f000 f85f 	bl	800b156 <__swbuf_r>
 800b098:	3001      	adds	r0, #1
 800b09a:	d0d7      	beq.n	800b04c <_puts_r+0x38>
 800b09c:	250a      	movs	r5, #10
 800b09e:	e7d7      	b.n	800b050 <_puts_r+0x3c>
 800b0a0:	4622      	mov	r2, r4
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	f000 f857 	bl	800b156 <__swbuf_r>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d1e7      	bne.n	800b07c <_puts_r+0x68>
 800b0ac:	e7ce      	b.n	800b04c <_puts_r+0x38>
 800b0ae:	3e01      	subs	r6, #1
 800b0b0:	e7e4      	b.n	800b07c <_puts_r+0x68>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	6022      	str	r2, [r4, #0]
 800b0b8:	220a      	movs	r2, #10
 800b0ba:	701a      	strb	r2, [r3, #0]
 800b0bc:	e7ee      	b.n	800b09c <_puts_r+0x88>
	...

0800b0c0 <puts>:
 800b0c0:	4b02      	ldr	r3, [pc, #8]	@ (800b0cc <puts+0xc>)
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	6818      	ldr	r0, [r3, #0]
 800b0c6:	f7ff bfa5 	b.w	800b014 <_puts_r>
 800b0ca:	bf00      	nop
 800b0cc:	20000018 	.word	0x20000018

0800b0d0 <__sread>:
 800b0d0:	b510      	push	{r4, lr}
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d8:	f000 f8fc 	bl	800b2d4 <_read_r>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	bfab      	itete	ge
 800b0e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0e4:	181b      	addge	r3, r3, r0
 800b0e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0ea:	bfac      	ite	ge
 800b0ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0ee:	81a3      	strhlt	r3, [r4, #12]
 800b0f0:	bd10      	pop	{r4, pc}

0800b0f2 <__swrite>:
 800b0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f6:	461f      	mov	r7, r3
 800b0f8:	898b      	ldrh	r3, [r1, #12]
 800b0fa:	05db      	lsls	r3, r3, #23
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	460c      	mov	r4, r1
 800b100:	4616      	mov	r6, r2
 800b102:	d505      	bpl.n	800b110 <__swrite+0x1e>
 800b104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b108:	2302      	movs	r3, #2
 800b10a:	2200      	movs	r2, #0
 800b10c:	f000 f8d0 	bl	800b2b0 <_lseek_r>
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	4632      	mov	r2, r6
 800b11e:	463b      	mov	r3, r7
 800b120:	4628      	mov	r0, r5
 800b122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b126:	f000 b8e7 	b.w	800b2f8 <_write_r>

0800b12a <__sseek>:
 800b12a:	b510      	push	{r4, lr}
 800b12c:	460c      	mov	r4, r1
 800b12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b132:	f000 f8bd 	bl	800b2b0 <_lseek_r>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	bf15      	itete	ne
 800b13c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b13e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b146:	81a3      	strheq	r3, [r4, #12]
 800b148:	bf18      	it	ne
 800b14a:	81a3      	strhne	r3, [r4, #12]
 800b14c:	bd10      	pop	{r4, pc}

0800b14e <__sclose>:
 800b14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b152:	f000 b89d 	b.w	800b290 <_close_r>

0800b156 <__swbuf_r>:
 800b156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b158:	460e      	mov	r6, r1
 800b15a:	4614      	mov	r4, r2
 800b15c:	4605      	mov	r5, r0
 800b15e:	b118      	cbz	r0, 800b168 <__swbuf_r+0x12>
 800b160:	6a03      	ldr	r3, [r0, #32]
 800b162:	b90b      	cbnz	r3, 800b168 <__swbuf_r+0x12>
 800b164:	f7ff ff06 	bl	800af74 <__sinit>
 800b168:	69a3      	ldr	r3, [r4, #24]
 800b16a:	60a3      	str	r3, [r4, #8]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	071a      	lsls	r2, r3, #28
 800b170:	d501      	bpl.n	800b176 <__swbuf_r+0x20>
 800b172:	6923      	ldr	r3, [r4, #16]
 800b174:	b943      	cbnz	r3, 800b188 <__swbuf_r+0x32>
 800b176:	4621      	mov	r1, r4
 800b178:	4628      	mov	r0, r5
 800b17a:	f000 f82b 	bl	800b1d4 <__swsetup_r>
 800b17e:	b118      	cbz	r0, 800b188 <__swbuf_r+0x32>
 800b180:	f04f 37ff 	mov.w	r7, #4294967295
 800b184:	4638      	mov	r0, r7
 800b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b188:	6823      	ldr	r3, [r4, #0]
 800b18a:	6922      	ldr	r2, [r4, #16]
 800b18c:	1a98      	subs	r0, r3, r2
 800b18e:	6963      	ldr	r3, [r4, #20]
 800b190:	b2f6      	uxtb	r6, r6
 800b192:	4283      	cmp	r3, r0
 800b194:	4637      	mov	r7, r6
 800b196:	dc05      	bgt.n	800b1a4 <__swbuf_r+0x4e>
 800b198:	4621      	mov	r1, r4
 800b19a:	4628      	mov	r0, r5
 800b19c:	f7ff fe22 	bl	800ade4 <_fflush_r>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1ed      	bne.n	800b180 <__swbuf_r+0x2a>
 800b1a4:	68a3      	ldr	r3, [r4, #8]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	6823      	ldr	r3, [r4, #0]
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	6022      	str	r2, [r4, #0]
 800b1b0:	701e      	strb	r6, [r3, #0]
 800b1b2:	6962      	ldr	r2, [r4, #20]
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d004      	beq.n	800b1c4 <__swbuf_r+0x6e>
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	07db      	lsls	r3, r3, #31
 800b1be:	d5e1      	bpl.n	800b184 <__swbuf_r+0x2e>
 800b1c0:	2e0a      	cmp	r6, #10
 800b1c2:	d1df      	bne.n	800b184 <__swbuf_r+0x2e>
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f7ff fe0c 	bl	800ade4 <_fflush_r>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d0d9      	beq.n	800b184 <__swbuf_r+0x2e>
 800b1d0:	e7d6      	b.n	800b180 <__swbuf_r+0x2a>
	...

0800b1d4 <__swsetup_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4b29      	ldr	r3, [pc, #164]	@ (800b27c <__swsetup_r+0xa8>)
 800b1d8:	4605      	mov	r5, r0
 800b1da:	6818      	ldr	r0, [r3, #0]
 800b1dc:	460c      	mov	r4, r1
 800b1de:	b118      	cbz	r0, 800b1e8 <__swsetup_r+0x14>
 800b1e0:	6a03      	ldr	r3, [r0, #32]
 800b1e2:	b90b      	cbnz	r3, 800b1e8 <__swsetup_r+0x14>
 800b1e4:	f7ff fec6 	bl	800af74 <__sinit>
 800b1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ec:	0719      	lsls	r1, r3, #28
 800b1ee:	d422      	bmi.n	800b236 <__swsetup_r+0x62>
 800b1f0:	06da      	lsls	r2, r3, #27
 800b1f2:	d407      	bmi.n	800b204 <__swsetup_r+0x30>
 800b1f4:	2209      	movs	r2, #9
 800b1f6:	602a      	str	r2, [r5, #0]
 800b1f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b202:	e033      	b.n	800b26c <__swsetup_r+0x98>
 800b204:	0758      	lsls	r0, r3, #29
 800b206:	d512      	bpl.n	800b22e <__swsetup_r+0x5a>
 800b208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b20a:	b141      	cbz	r1, 800b21e <__swsetup_r+0x4a>
 800b20c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b210:	4299      	cmp	r1, r3
 800b212:	d002      	beq.n	800b21a <__swsetup_r+0x46>
 800b214:	4628      	mov	r0, r5
 800b216:	f000 f8af 	bl	800b378 <_free_r>
 800b21a:	2300      	movs	r3, #0
 800b21c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	2300      	movs	r3, #0
 800b228:	6063      	str	r3, [r4, #4]
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f043 0308 	orr.w	r3, r3, #8
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	b94b      	cbnz	r3, 800b24e <__swsetup_r+0x7a>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b244:	d003      	beq.n	800b24e <__swsetup_r+0x7a>
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 fc83 	bl	800bb54 <__smakebuf_r>
 800b24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b252:	f013 0201 	ands.w	r2, r3, #1
 800b256:	d00a      	beq.n	800b26e <__swsetup_r+0x9a>
 800b258:	2200      	movs	r2, #0
 800b25a:	60a2      	str	r2, [r4, #8]
 800b25c:	6962      	ldr	r2, [r4, #20]
 800b25e:	4252      	negs	r2, r2
 800b260:	61a2      	str	r2, [r4, #24]
 800b262:	6922      	ldr	r2, [r4, #16]
 800b264:	b942      	cbnz	r2, 800b278 <__swsetup_r+0xa4>
 800b266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b26a:	d1c5      	bne.n	800b1f8 <__swsetup_r+0x24>
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	0799      	lsls	r1, r3, #30
 800b270:	bf58      	it	pl
 800b272:	6962      	ldrpl	r2, [r4, #20]
 800b274:	60a2      	str	r2, [r4, #8]
 800b276:	e7f4      	b.n	800b262 <__swsetup_r+0x8e>
 800b278:	2000      	movs	r0, #0
 800b27a:	e7f7      	b.n	800b26c <__swsetup_r+0x98>
 800b27c:	20000018 	.word	0x20000018

0800b280 <memset>:
 800b280:	4402      	add	r2, r0
 800b282:	4603      	mov	r3, r0
 800b284:	4293      	cmp	r3, r2
 800b286:	d100      	bne.n	800b28a <memset+0xa>
 800b288:	4770      	bx	lr
 800b28a:	f803 1b01 	strb.w	r1, [r3], #1
 800b28e:	e7f9      	b.n	800b284 <memset+0x4>

0800b290 <_close_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4d06      	ldr	r5, [pc, #24]	@ (800b2ac <_close_r+0x1c>)
 800b294:	2300      	movs	r3, #0
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	602b      	str	r3, [r5, #0]
 800b29c:	f7f6 fe47 	bl	8001f2e <_close>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_close_r+0x1a>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_close_r+0x1a>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	200008c0 	.word	0x200008c0

0800b2b0 <_lseek_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	@ (800b2d0 <_lseek_r+0x20>)
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	4608      	mov	r0, r1
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	602a      	str	r2, [r5, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f7f6 fe5c 	bl	8001f7c <_lseek>
 800b2c4:	1c43      	adds	r3, r0, #1
 800b2c6:	d102      	bne.n	800b2ce <_lseek_r+0x1e>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b103      	cbz	r3, 800b2ce <_lseek_r+0x1e>
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	200008c0 	.word	0x200008c0

0800b2d4 <_read_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d07      	ldr	r5, [pc, #28]	@ (800b2f4 <_read_r+0x20>)
 800b2d8:	4604      	mov	r4, r0
 800b2da:	4608      	mov	r0, r1
 800b2dc:	4611      	mov	r1, r2
 800b2de:	2200      	movs	r2, #0
 800b2e0:	602a      	str	r2, [r5, #0]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f7f6 fdea 	bl	8001ebc <_read>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_read_r+0x1e>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_read_r+0x1e>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	200008c0 	.word	0x200008c0

0800b2f8 <_write_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d07      	ldr	r5, [pc, #28]	@ (800b318 <_write_r+0x20>)
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	4608      	mov	r0, r1
 800b300:	4611      	mov	r1, r2
 800b302:	2200      	movs	r2, #0
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	f7f6 fdf5 	bl	8001ef6 <_write>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d102      	bne.n	800b316 <_write_r+0x1e>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	b103      	cbz	r3, 800b316 <_write_r+0x1e>
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	200008c0 	.word	0x200008c0

0800b31c <__errno>:
 800b31c:	4b01      	ldr	r3, [pc, #4]	@ (800b324 <__errno+0x8>)
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	20000018 	.word	0x20000018

0800b328 <__libc_init_array>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	4d0d      	ldr	r5, [pc, #52]	@ (800b360 <__libc_init_array+0x38>)
 800b32c:	4c0d      	ldr	r4, [pc, #52]	@ (800b364 <__libc_init_array+0x3c>)
 800b32e:	1b64      	subs	r4, r4, r5
 800b330:	10a4      	asrs	r4, r4, #2
 800b332:	2600      	movs	r6, #0
 800b334:	42a6      	cmp	r6, r4
 800b336:	d109      	bne.n	800b34c <__libc_init_array+0x24>
 800b338:	4d0b      	ldr	r5, [pc, #44]	@ (800b368 <__libc_init_array+0x40>)
 800b33a:	4c0c      	ldr	r4, [pc, #48]	@ (800b36c <__libc_init_array+0x44>)
 800b33c:	f000 fcac 	bl	800bc98 <_init>
 800b340:	1b64      	subs	r4, r4, r5
 800b342:	10a4      	asrs	r4, r4, #2
 800b344:	2600      	movs	r6, #0
 800b346:	42a6      	cmp	r6, r4
 800b348:	d105      	bne.n	800b356 <__libc_init_array+0x2e>
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b350:	4798      	blx	r3
 800b352:	3601      	adds	r6, #1
 800b354:	e7ee      	b.n	800b334 <__libc_init_array+0xc>
 800b356:	f855 3b04 	ldr.w	r3, [r5], #4
 800b35a:	4798      	blx	r3
 800b35c:	3601      	adds	r6, #1
 800b35e:	e7f2      	b.n	800b346 <__libc_init_array+0x1e>
 800b360:	0800c370 	.word	0x0800c370
 800b364:	0800c370 	.word	0x0800c370
 800b368:	0800c370 	.word	0x0800c370
 800b36c:	0800c374 	.word	0x0800c374

0800b370 <__retarget_lock_init_recursive>:
 800b370:	4770      	bx	lr

0800b372 <__retarget_lock_acquire_recursive>:
 800b372:	4770      	bx	lr

0800b374 <__retarget_lock_release_recursive>:
 800b374:	4770      	bx	lr
	...

0800b378 <_free_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4605      	mov	r5, r0
 800b37c:	2900      	cmp	r1, #0
 800b37e:	d041      	beq.n	800b404 <_free_r+0x8c>
 800b380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b384:	1f0c      	subs	r4, r1, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfb8      	it	lt
 800b38a:	18e4      	addlt	r4, r4, r3
 800b38c:	f000 f8e0 	bl	800b550 <__malloc_lock>
 800b390:	4a1d      	ldr	r2, [pc, #116]	@ (800b408 <_free_r+0x90>)
 800b392:	6813      	ldr	r3, [r2, #0]
 800b394:	b933      	cbnz	r3, 800b3a4 <_free_r+0x2c>
 800b396:	6063      	str	r3, [r4, #4]
 800b398:	6014      	str	r4, [r2, #0]
 800b39a:	4628      	mov	r0, r5
 800b39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3a0:	f000 b8dc 	b.w	800b55c <__malloc_unlock>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d908      	bls.n	800b3ba <_free_r+0x42>
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	1821      	adds	r1, r4, r0
 800b3ac:	428b      	cmp	r3, r1
 800b3ae:	bf01      	itttt	eq
 800b3b0:	6819      	ldreq	r1, [r3, #0]
 800b3b2:	685b      	ldreq	r3, [r3, #4]
 800b3b4:	1809      	addeq	r1, r1, r0
 800b3b6:	6021      	streq	r1, [r4, #0]
 800b3b8:	e7ed      	b.n	800b396 <_free_r+0x1e>
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	b10b      	cbz	r3, 800b3c4 <_free_r+0x4c>
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	d9fa      	bls.n	800b3ba <_free_r+0x42>
 800b3c4:	6811      	ldr	r1, [r2, #0]
 800b3c6:	1850      	adds	r0, r2, r1
 800b3c8:	42a0      	cmp	r0, r4
 800b3ca:	d10b      	bne.n	800b3e4 <_free_r+0x6c>
 800b3cc:	6820      	ldr	r0, [r4, #0]
 800b3ce:	4401      	add	r1, r0
 800b3d0:	1850      	adds	r0, r2, r1
 800b3d2:	4283      	cmp	r3, r0
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	d1e0      	bne.n	800b39a <_free_r+0x22>
 800b3d8:	6818      	ldr	r0, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	6053      	str	r3, [r2, #4]
 800b3de:	4408      	add	r0, r1
 800b3e0:	6010      	str	r0, [r2, #0]
 800b3e2:	e7da      	b.n	800b39a <_free_r+0x22>
 800b3e4:	d902      	bls.n	800b3ec <_free_r+0x74>
 800b3e6:	230c      	movs	r3, #12
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	e7d6      	b.n	800b39a <_free_r+0x22>
 800b3ec:	6820      	ldr	r0, [r4, #0]
 800b3ee:	1821      	adds	r1, r4, r0
 800b3f0:	428b      	cmp	r3, r1
 800b3f2:	bf04      	itt	eq
 800b3f4:	6819      	ldreq	r1, [r3, #0]
 800b3f6:	685b      	ldreq	r3, [r3, #4]
 800b3f8:	6063      	str	r3, [r4, #4]
 800b3fa:	bf04      	itt	eq
 800b3fc:	1809      	addeq	r1, r1, r0
 800b3fe:	6021      	streq	r1, [r4, #0]
 800b400:	6054      	str	r4, [r2, #4]
 800b402:	e7ca      	b.n	800b39a <_free_r+0x22>
 800b404:	bd38      	pop	{r3, r4, r5, pc}
 800b406:	bf00      	nop
 800b408:	200008cc 	.word	0x200008cc

0800b40c <sbrk_aligned>:
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	4e0f      	ldr	r6, [pc, #60]	@ (800b44c <sbrk_aligned+0x40>)
 800b410:	460c      	mov	r4, r1
 800b412:	6831      	ldr	r1, [r6, #0]
 800b414:	4605      	mov	r5, r0
 800b416:	b911      	cbnz	r1, 800b41e <sbrk_aligned+0x12>
 800b418:	f000 fc2e 	bl	800bc78 <_sbrk_r>
 800b41c:	6030      	str	r0, [r6, #0]
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	f000 fc29 	bl	800bc78 <_sbrk_r>
 800b426:	1c43      	adds	r3, r0, #1
 800b428:	d103      	bne.n	800b432 <sbrk_aligned+0x26>
 800b42a:	f04f 34ff 	mov.w	r4, #4294967295
 800b42e:	4620      	mov	r0, r4
 800b430:	bd70      	pop	{r4, r5, r6, pc}
 800b432:	1cc4      	adds	r4, r0, #3
 800b434:	f024 0403 	bic.w	r4, r4, #3
 800b438:	42a0      	cmp	r0, r4
 800b43a:	d0f8      	beq.n	800b42e <sbrk_aligned+0x22>
 800b43c:	1a21      	subs	r1, r4, r0
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 fc1a 	bl	800bc78 <_sbrk_r>
 800b444:	3001      	adds	r0, #1
 800b446:	d1f2      	bne.n	800b42e <sbrk_aligned+0x22>
 800b448:	e7ef      	b.n	800b42a <sbrk_aligned+0x1e>
 800b44a:	bf00      	nop
 800b44c:	200008c8 	.word	0x200008c8

0800b450 <_malloc_r>:
 800b450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b454:	1ccd      	adds	r5, r1, #3
 800b456:	f025 0503 	bic.w	r5, r5, #3
 800b45a:	3508      	adds	r5, #8
 800b45c:	2d0c      	cmp	r5, #12
 800b45e:	bf38      	it	cc
 800b460:	250c      	movcc	r5, #12
 800b462:	2d00      	cmp	r5, #0
 800b464:	4606      	mov	r6, r0
 800b466:	db01      	blt.n	800b46c <_malloc_r+0x1c>
 800b468:	42a9      	cmp	r1, r5
 800b46a:	d904      	bls.n	800b476 <_malloc_r+0x26>
 800b46c:	230c      	movs	r3, #12
 800b46e:	6033      	str	r3, [r6, #0]
 800b470:	2000      	movs	r0, #0
 800b472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b54c <_malloc_r+0xfc>
 800b47a:	f000 f869 	bl	800b550 <__malloc_lock>
 800b47e:	f8d8 3000 	ldr.w	r3, [r8]
 800b482:	461c      	mov	r4, r3
 800b484:	bb44      	cbnz	r4, 800b4d8 <_malloc_r+0x88>
 800b486:	4629      	mov	r1, r5
 800b488:	4630      	mov	r0, r6
 800b48a:	f7ff ffbf 	bl	800b40c <sbrk_aligned>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	4604      	mov	r4, r0
 800b492:	d158      	bne.n	800b546 <_malloc_r+0xf6>
 800b494:	f8d8 4000 	ldr.w	r4, [r8]
 800b498:	4627      	mov	r7, r4
 800b49a:	2f00      	cmp	r7, #0
 800b49c:	d143      	bne.n	800b526 <_malloc_r+0xd6>
 800b49e:	2c00      	cmp	r4, #0
 800b4a0:	d04b      	beq.n	800b53a <_malloc_r+0xea>
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	eb04 0903 	add.w	r9, r4, r3
 800b4ac:	f000 fbe4 	bl	800bc78 <_sbrk_r>
 800b4b0:	4581      	cmp	r9, r0
 800b4b2:	d142      	bne.n	800b53a <_malloc_r+0xea>
 800b4b4:	6821      	ldr	r1, [r4, #0]
 800b4b6:	1a6d      	subs	r5, r5, r1
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ffa6 	bl	800b40c <sbrk_aligned>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	d03a      	beq.n	800b53a <_malloc_r+0xea>
 800b4c4:	6823      	ldr	r3, [r4, #0]
 800b4c6:	442b      	add	r3, r5
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ce:	685a      	ldr	r2, [r3, #4]
 800b4d0:	bb62      	cbnz	r2, 800b52c <_malloc_r+0xdc>
 800b4d2:	f8c8 7000 	str.w	r7, [r8]
 800b4d6:	e00f      	b.n	800b4f8 <_malloc_r+0xa8>
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	1b52      	subs	r2, r2, r5
 800b4dc:	d420      	bmi.n	800b520 <_malloc_r+0xd0>
 800b4de:	2a0b      	cmp	r2, #11
 800b4e0:	d917      	bls.n	800b512 <_malloc_r+0xc2>
 800b4e2:	1961      	adds	r1, r4, r5
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	6025      	str	r5, [r4, #0]
 800b4e8:	bf18      	it	ne
 800b4ea:	6059      	strne	r1, [r3, #4]
 800b4ec:	6863      	ldr	r3, [r4, #4]
 800b4ee:	bf08      	it	eq
 800b4f0:	f8c8 1000 	streq.w	r1, [r8]
 800b4f4:	5162      	str	r2, [r4, r5]
 800b4f6:	604b      	str	r3, [r1, #4]
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f000 f82f 	bl	800b55c <__malloc_unlock>
 800b4fe:	f104 000b 	add.w	r0, r4, #11
 800b502:	1d23      	adds	r3, r4, #4
 800b504:	f020 0007 	bic.w	r0, r0, #7
 800b508:	1ac2      	subs	r2, r0, r3
 800b50a:	bf1c      	itt	ne
 800b50c:	1a1b      	subne	r3, r3, r0
 800b50e:	50a3      	strne	r3, [r4, r2]
 800b510:	e7af      	b.n	800b472 <_malloc_r+0x22>
 800b512:	6862      	ldr	r2, [r4, #4]
 800b514:	42a3      	cmp	r3, r4
 800b516:	bf0c      	ite	eq
 800b518:	f8c8 2000 	streq.w	r2, [r8]
 800b51c:	605a      	strne	r2, [r3, #4]
 800b51e:	e7eb      	b.n	800b4f8 <_malloc_r+0xa8>
 800b520:	4623      	mov	r3, r4
 800b522:	6864      	ldr	r4, [r4, #4]
 800b524:	e7ae      	b.n	800b484 <_malloc_r+0x34>
 800b526:	463c      	mov	r4, r7
 800b528:	687f      	ldr	r7, [r7, #4]
 800b52a:	e7b6      	b.n	800b49a <_malloc_r+0x4a>
 800b52c:	461a      	mov	r2, r3
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	42a3      	cmp	r3, r4
 800b532:	d1fb      	bne.n	800b52c <_malloc_r+0xdc>
 800b534:	2300      	movs	r3, #0
 800b536:	6053      	str	r3, [r2, #4]
 800b538:	e7de      	b.n	800b4f8 <_malloc_r+0xa8>
 800b53a:	230c      	movs	r3, #12
 800b53c:	6033      	str	r3, [r6, #0]
 800b53e:	4630      	mov	r0, r6
 800b540:	f000 f80c 	bl	800b55c <__malloc_unlock>
 800b544:	e794      	b.n	800b470 <_malloc_r+0x20>
 800b546:	6005      	str	r5, [r0, #0]
 800b548:	e7d6      	b.n	800b4f8 <_malloc_r+0xa8>
 800b54a:	bf00      	nop
 800b54c:	200008cc 	.word	0x200008cc

0800b550 <__malloc_lock>:
 800b550:	4801      	ldr	r0, [pc, #4]	@ (800b558 <__malloc_lock+0x8>)
 800b552:	f7ff bf0e 	b.w	800b372 <__retarget_lock_acquire_recursive>
 800b556:	bf00      	nop
 800b558:	200008c4 	.word	0x200008c4

0800b55c <__malloc_unlock>:
 800b55c:	4801      	ldr	r0, [pc, #4]	@ (800b564 <__malloc_unlock+0x8>)
 800b55e:	f7ff bf09 	b.w	800b374 <__retarget_lock_release_recursive>
 800b562:	bf00      	nop
 800b564:	200008c4 	.word	0x200008c4

0800b568 <__sfputc_r>:
 800b568:	6893      	ldr	r3, [r2, #8]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	b410      	push	{r4}
 800b570:	6093      	str	r3, [r2, #8]
 800b572:	da08      	bge.n	800b586 <__sfputc_r+0x1e>
 800b574:	6994      	ldr	r4, [r2, #24]
 800b576:	42a3      	cmp	r3, r4
 800b578:	db01      	blt.n	800b57e <__sfputc_r+0x16>
 800b57a:	290a      	cmp	r1, #10
 800b57c:	d103      	bne.n	800b586 <__sfputc_r+0x1e>
 800b57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b582:	f7ff bde8 	b.w	800b156 <__swbuf_r>
 800b586:	6813      	ldr	r3, [r2, #0]
 800b588:	1c58      	adds	r0, r3, #1
 800b58a:	6010      	str	r0, [r2, #0]
 800b58c:	7019      	strb	r1, [r3, #0]
 800b58e:	4608      	mov	r0, r1
 800b590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <__sfputs_r>:
 800b596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	4614      	mov	r4, r2
 800b59e:	18d5      	adds	r5, r2, r3
 800b5a0:	42ac      	cmp	r4, r5
 800b5a2:	d101      	bne.n	800b5a8 <__sfputs_r+0x12>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e007      	b.n	800b5b8 <__sfputs_r+0x22>
 800b5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ac:	463a      	mov	r2, r7
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f7ff ffda 	bl	800b568 <__sfputc_r>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d1f3      	bne.n	800b5a0 <__sfputs_r+0xa>
 800b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5bc <_vfiprintf_r>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	b09d      	sub	sp, #116	@ 0x74
 800b5c4:	4614      	mov	r4, r2
 800b5c6:	4698      	mov	r8, r3
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	b118      	cbz	r0, 800b5d4 <_vfiprintf_r+0x18>
 800b5cc:	6a03      	ldr	r3, [r0, #32]
 800b5ce:	b90b      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x18>
 800b5d0:	f7ff fcd0 	bl	800af74 <__sinit>
 800b5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5d6:	07d9      	lsls	r1, r3, #31
 800b5d8:	d405      	bmi.n	800b5e6 <_vfiprintf_r+0x2a>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	059a      	lsls	r2, r3, #22
 800b5de:	d402      	bmi.n	800b5e6 <_vfiprintf_r+0x2a>
 800b5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e2:	f7ff fec6 	bl	800b372 <__retarget_lock_acquire_recursive>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	071b      	lsls	r3, r3, #28
 800b5ea:	d501      	bpl.n	800b5f0 <_vfiprintf_r+0x34>
 800b5ec:	692b      	ldr	r3, [r5, #16]
 800b5ee:	b99b      	cbnz	r3, 800b618 <_vfiprintf_r+0x5c>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7ff fdee 	bl	800b1d4 <__swsetup_r>
 800b5f8:	b170      	cbz	r0, 800b618 <_vfiprintf_r+0x5c>
 800b5fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5fc:	07dc      	lsls	r4, r3, #31
 800b5fe:	d504      	bpl.n	800b60a <_vfiprintf_r+0x4e>
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	b01d      	add	sp, #116	@ 0x74
 800b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	0598      	lsls	r0, r3, #22
 800b60e:	d4f7      	bmi.n	800b600 <_vfiprintf_r+0x44>
 800b610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b612:	f7ff feaf 	bl	800b374 <__retarget_lock_release_recursive>
 800b616:	e7f3      	b.n	800b600 <_vfiprintf_r+0x44>
 800b618:	2300      	movs	r3, #0
 800b61a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b61c:	2320      	movs	r3, #32
 800b61e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b622:	f8cd 800c 	str.w	r8, [sp, #12]
 800b626:	2330      	movs	r3, #48	@ 0x30
 800b628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7d8 <_vfiprintf_r+0x21c>
 800b62c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b630:	f04f 0901 	mov.w	r9, #1
 800b634:	4623      	mov	r3, r4
 800b636:	469a      	mov	sl, r3
 800b638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b63c:	b10a      	cbz	r2, 800b642 <_vfiprintf_r+0x86>
 800b63e:	2a25      	cmp	r2, #37	@ 0x25
 800b640:	d1f9      	bne.n	800b636 <_vfiprintf_r+0x7a>
 800b642:	ebba 0b04 	subs.w	fp, sl, r4
 800b646:	d00b      	beq.n	800b660 <_vfiprintf_r+0xa4>
 800b648:	465b      	mov	r3, fp
 800b64a:	4622      	mov	r2, r4
 800b64c:	4629      	mov	r1, r5
 800b64e:	4630      	mov	r0, r6
 800b650:	f7ff ffa1 	bl	800b596 <__sfputs_r>
 800b654:	3001      	adds	r0, #1
 800b656:	f000 80a7 	beq.w	800b7a8 <_vfiprintf_r+0x1ec>
 800b65a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b65c:	445a      	add	r2, fp
 800b65e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b660:	f89a 3000 	ldrb.w	r3, [sl]
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 809f 	beq.w	800b7a8 <_vfiprintf_r+0x1ec>
 800b66a:	2300      	movs	r3, #0
 800b66c:	f04f 32ff 	mov.w	r2, #4294967295
 800b670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b674:	f10a 0a01 	add.w	sl, sl, #1
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	9307      	str	r3, [sp, #28]
 800b67c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b680:	931a      	str	r3, [sp, #104]	@ 0x68
 800b682:	4654      	mov	r4, sl
 800b684:	2205      	movs	r2, #5
 800b686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68a:	4853      	ldr	r0, [pc, #332]	@ (800b7d8 <_vfiprintf_r+0x21c>)
 800b68c:	f7f4 fdd8 	bl	8000240 <memchr>
 800b690:	9a04      	ldr	r2, [sp, #16]
 800b692:	b9d8      	cbnz	r0, 800b6cc <_vfiprintf_r+0x110>
 800b694:	06d1      	lsls	r1, r2, #27
 800b696:	bf44      	itt	mi
 800b698:	2320      	movmi	r3, #32
 800b69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b69e:	0713      	lsls	r3, r2, #28
 800b6a0:	bf44      	itt	mi
 800b6a2:	232b      	movmi	r3, #43	@ 0x2b
 800b6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ae:	d015      	beq.n	800b6dc <_vfiprintf_r+0x120>
 800b6b0:	9a07      	ldr	r2, [sp, #28]
 800b6b2:	4654      	mov	r4, sl
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f04f 0c0a 	mov.w	ip, #10
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6c0:	3b30      	subs	r3, #48	@ 0x30
 800b6c2:	2b09      	cmp	r3, #9
 800b6c4:	d94b      	bls.n	800b75e <_vfiprintf_r+0x1a2>
 800b6c6:	b1b0      	cbz	r0, 800b6f6 <_vfiprintf_r+0x13a>
 800b6c8:	9207      	str	r2, [sp, #28]
 800b6ca:	e014      	b.n	800b6f6 <_vfiprintf_r+0x13a>
 800b6cc:	eba0 0308 	sub.w	r3, r0, r8
 800b6d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	46a2      	mov	sl, r4
 800b6da:	e7d2      	b.n	800b682 <_vfiprintf_r+0xc6>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	1d19      	adds	r1, r3, #4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	9103      	str	r1, [sp, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bfbb      	ittet	lt
 800b6e8:	425b      	neglt	r3, r3
 800b6ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b6ee:	9307      	strge	r3, [sp, #28]
 800b6f0:	9307      	strlt	r3, [sp, #28]
 800b6f2:	bfb8      	it	lt
 800b6f4:	9204      	strlt	r2, [sp, #16]
 800b6f6:	7823      	ldrb	r3, [r4, #0]
 800b6f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6fa:	d10a      	bne.n	800b712 <_vfiprintf_r+0x156>
 800b6fc:	7863      	ldrb	r3, [r4, #1]
 800b6fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b700:	d132      	bne.n	800b768 <_vfiprintf_r+0x1ac>
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	1d1a      	adds	r2, r3, #4
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	9203      	str	r2, [sp, #12]
 800b70a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b70e:	3402      	adds	r4, #2
 800b710:	9305      	str	r3, [sp, #20]
 800b712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7e8 <_vfiprintf_r+0x22c>
 800b716:	7821      	ldrb	r1, [r4, #0]
 800b718:	2203      	movs	r2, #3
 800b71a:	4650      	mov	r0, sl
 800b71c:	f7f4 fd90 	bl	8000240 <memchr>
 800b720:	b138      	cbz	r0, 800b732 <_vfiprintf_r+0x176>
 800b722:	9b04      	ldr	r3, [sp, #16]
 800b724:	eba0 000a 	sub.w	r0, r0, sl
 800b728:	2240      	movs	r2, #64	@ 0x40
 800b72a:	4082      	lsls	r2, r0
 800b72c:	4313      	orrs	r3, r2
 800b72e:	3401      	adds	r4, #1
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b736:	4829      	ldr	r0, [pc, #164]	@ (800b7dc <_vfiprintf_r+0x220>)
 800b738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b73c:	2206      	movs	r2, #6
 800b73e:	f7f4 fd7f 	bl	8000240 <memchr>
 800b742:	2800      	cmp	r0, #0
 800b744:	d03f      	beq.n	800b7c6 <_vfiprintf_r+0x20a>
 800b746:	4b26      	ldr	r3, [pc, #152]	@ (800b7e0 <_vfiprintf_r+0x224>)
 800b748:	bb1b      	cbnz	r3, 800b792 <_vfiprintf_r+0x1d6>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	3307      	adds	r3, #7
 800b74e:	f023 0307 	bic.w	r3, r3, #7
 800b752:	3308      	adds	r3, #8
 800b754:	9303      	str	r3, [sp, #12]
 800b756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b758:	443b      	add	r3, r7
 800b75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b75c:	e76a      	b.n	800b634 <_vfiprintf_r+0x78>
 800b75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b762:	460c      	mov	r4, r1
 800b764:	2001      	movs	r0, #1
 800b766:	e7a8      	b.n	800b6ba <_vfiprintf_r+0xfe>
 800b768:	2300      	movs	r3, #0
 800b76a:	3401      	adds	r4, #1
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	4619      	mov	r1, r3
 800b770:	f04f 0c0a 	mov.w	ip, #10
 800b774:	4620      	mov	r0, r4
 800b776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b77a:	3a30      	subs	r2, #48	@ 0x30
 800b77c:	2a09      	cmp	r2, #9
 800b77e:	d903      	bls.n	800b788 <_vfiprintf_r+0x1cc>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0c6      	beq.n	800b712 <_vfiprintf_r+0x156>
 800b784:	9105      	str	r1, [sp, #20]
 800b786:	e7c4      	b.n	800b712 <_vfiprintf_r+0x156>
 800b788:	fb0c 2101 	mla	r1, ip, r1, r2
 800b78c:	4604      	mov	r4, r0
 800b78e:	2301      	movs	r3, #1
 800b790:	e7f0      	b.n	800b774 <_vfiprintf_r+0x1b8>
 800b792:	ab03      	add	r3, sp, #12
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	462a      	mov	r2, r5
 800b798:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <_vfiprintf_r+0x228>)
 800b79a:	a904      	add	r1, sp, #16
 800b79c:	4630      	mov	r0, r6
 800b79e:	f3af 8000 	nop.w
 800b7a2:	4607      	mov	r7, r0
 800b7a4:	1c78      	adds	r0, r7, #1
 800b7a6:	d1d6      	bne.n	800b756 <_vfiprintf_r+0x19a>
 800b7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7aa:	07d9      	lsls	r1, r3, #31
 800b7ac:	d405      	bmi.n	800b7ba <_vfiprintf_r+0x1fe>
 800b7ae:	89ab      	ldrh	r3, [r5, #12]
 800b7b0:	059a      	lsls	r2, r3, #22
 800b7b2:	d402      	bmi.n	800b7ba <_vfiprintf_r+0x1fe>
 800b7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7b6:	f7ff fddd 	bl	800b374 <__retarget_lock_release_recursive>
 800b7ba:	89ab      	ldrh	r3, [r5, #12]
 800b7bc:	065b      	lsls	r3, r3, #25
 800b7be:	f53f af1f 	bmi.w	800b600 <_vfiprintf_r+0x44>
 800b7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7c4:	e71e      	b.n	800b604 <_vfiprintf_r+0x48>
 800b7c6:	ab03      	add	r3, sp, #12
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	4b05      	ldr	r3, [pc, #20]	@ (800b7e4 <_vfiprintf_r+0x228>)
 800b7ce:	a904      	add	r1, sp, #16
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f000 f879 	bl	800b8c8 <_printf_i>
 800b7d6:	e7e4      	b.n	800b7a2 <_vfiprintf_r+0x1e6>
 800b7d8:	0800c334 	.word	0x0800c334
 800b7dc:	0800c33e 	.word	0x0800c33e
 800b7e0:	00000000 	.word	0x00000000
 800b7e4:	0800b597 	.word	0x0800b597
 800b7e8:	0800c33a 	.word	0x0800c33a

0800b7ec <_printf_common>:
 800b7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f0:	4616      	mov	r6, r2
 800b7f2:	4698      	mov	r8, r3
 800b7f4:	688a      	ldr	r2, [r1, #8]
 800b7f6:	690b      	ldr	r3, [r1, #16]
 800b7f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	bfb8      	it	lt
 800b800:	4613      	movlt	r3, r2
 800b802:	6033      	str	r3, [r6, #0]
 800b804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b808:	4607      	mov	r7, r0
 800b80a:	460c      	mov	r4, r1
 800b80c:	b10a      	cbz	r2, 800b812 <_printf_common+0x26>
 800b80e:	3301      	adds	r3, #1
 800b810:	6033      	str	r3, [r6, #0]
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	0699      	lsls	r1, r3, #26
 800b816:	bf42      	ittt	mi
 800b818:	6833      	ldrmi	r3, [r6, #0]
 800b81a:	3302      	addmi	r3, #2
 800b81c:	6033      	strmi	r3, [r6, #0]
 800b81e:	6825      	ldr	r5, [r4, #0]
 800b820:	f015 0506 	ands.w	r5, r5, #6
 800b824:	d106      	bne.n	800b834 <_printf_common+0x48>
 800b826:	f104 0a19 	add.w	sl, r4, #25
 800b82a:	68e3      	ldr	r3, [r4, #12]
 800b82c:	6832      	ldr	r2, [r6, #0]
 800b82e:	1a9b      	subs	r3, r3, r2
 800b830:	42ab      	cmp	r3, r5
 800b832:	dc26      	bgt.n	800b882 <_printf_common+0x96>
 800b834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b838:	6822      	ldr	r2, [r4, #0]
 800b83a:	3b00      	subs	r3, #0
 800b83c:	bf18      	it	ne
 800b83e:	2301      	movne	r3, #1
 800b840:	0692      	lsls	r2, r2, #26
 800b842:	d42b      	bmi.n	800b89c <_printf_common+0xb0>
 800b844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b848:	4641      	mov	r1, r8
 800b84a:	4638      	mov	r0, r7
 800b84c:	47c8      	blx	r9
 800b84e:	3001      	adds	r0, #1
 800b850:	d01e      	beq.n	800b890 <_printf_common+0xa4>
 800b852:	6823      	ldr	r3, [r4, #0]
 800b854:	6922      	ldr	r2, [r4, #16]
 800b856:	f003 0306 	and.w	r3, r3, #6
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	bf02      	ittt	eq
 800b85e:	68e5      	ldreq	r5, [r4, #12]
 800b860:	6833      	ldreq	r3, [r6, #0]
 800b862:	1aed      	subeq	r5, r5, r3
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	bf0c      	ite	eq
 800b868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b86c:	2500      	movne	r5, #0
 800b86e:	4293      	cmp	r3, r2
 800b870:	bfc4      	itt	gt
 800b872:	1a9b      	subgt	r3, r3, r2
 800b874:	18ed      	addgt	r5, r5, r3
 800b876:	2600      	movs	r6, #0
 800b878:	341a      	adds	r4, #26
 800b87a:	42b5      	cmp	r5, r6
 800b87c:	d11a      	bne.n	800b8b4 <_printf_common+0xc8>
 800b87e:	2000      	movs	r0, #0
 800b880:	e008      	b.n	800b894 <_printf_common+0xa8>
 800b882:	2301      	movs	r3, #1
 800b884:	4652      	mov	r2, sl
 800b886:	4641      	mov	r1, r8
 800b888:	4638      	mov	r0, r7
 800b88a:	47c8      	blx	r9
 800b88c:	3001      	adds	r0, #1
 800b88e:	d103      	bne.n	800b898 <_printf_common+0xac>
 800b890:	f04f 30ff 	mov.w	r0, #4294967295
 800b894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b898:	3501      	adds	r5, #1
 800b89a:	e7c6      	b.n	800b82a <_printf_common+0x3e>
 800b89c:	18e1      	adds	r1, r4, r3
 800b89e:	1c5a      	adds	r2, r3, #1
 800b8a0:	2030      	movs	r0, #48	@ 0x30
 800b8a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8a6:	4422      	add	r2, r4
 800b8a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b8b0:	3302      	adds	r3, #2
 800b8b2:	e7c7      	b.n	800b844 <_printf_common+0x58>
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	4641      	mov	r1, r8
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	47c8      	blx	r9
 800b8be:	3001      	adds	r0, #1
 800b8c0:	d0e6      	beq.n	800b890 <_printf_common+0xa4>
 800b8c2:	3601      	adds	r6, #1
 800b8c4:	e7d9      	b.n	800b87a <_printf_common+0x8e>
	...

0800b8c8 <_printf_i>:
 800b8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8cc:	7e0f      	ldrb	r7, [r1, #24]
 800b8ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8d0:	2f78      	cmp	r7, #120	@ 0x78
 800b8d2:	4691      	mov	r9, r2
 800b8d4:	4680      	mov	r8, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	469a      	mov	sl, r3
 800b8da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8de:	d807      	bhi.n	800b8f0 <_printf_i+0x28>
 800b8e0:	2f62      	cmp	r7, #98	@ 0x62
 800b8e2:	d80a      	bhi.n	800b8fa <_printf_i+0x32>
 800b8e4:	2f00      	cmp	r7, #0
 800b8e6:	f000 80d2 	beq.w	800ba8e <_printf_i+0x1c6>
 800b8ea:	2f58      	cmp	r7, #88	@ 0x58
 800b8ec:	f000 80b9 	beq.w	800ba62 <_printf_i+0x19a>
 800b8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8f8:	e03a      	b.n	800b970 <_printf_i+0xa8>
 800b8fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8fe:	2b15      	cmp	r3, #21
 800b900:	d8f6      	bhi.n	800b8f0 <_printf_i+0x28>
 800b902:	a101      	add	r1, pc, #4	@ (adr r1, 800b908 <_printf_i+0x40>)
 800b904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b908:	0800b961 	.word	0x0800b961
 800b90c:	0800b975 	.word	0x0800b975
 800b910:	0800b8f1 	.word	0x0800b8f1
 800b914:	0800b8f1 	.word	0x0800b8f1
 800b918:	0800b8f1 	.word	0x0800b8f1
 800b91c:	0800b8f1 	.word	0x0800b8f1
 800b920:	0800b975 	.word	0x0800b975
 800b924:	0800b8f1 	.word	0x0800b8f1
 800b928:	0800b8f1 	.word	0x0800b8f1
 800b92c:	0800b8f1 	.word	0x0800b8f1
 800b930:	0800b8f1 	.word	0x0800b8f1
 800b934:	0800ba75 	.word	0x0800ba75
 800b938:	0800b99f 	.word	0x0800b99f
 800b93c:	0800ba2f 	.word	0x0800ba2f
 800b940:	0800b8f1 	.word	0x0800b8f1
 800b944:	0800b8f1 	.word	0x0800b8f1
 800b948:	0800ba97 	.word	0x0800ba97
 800b94c:	0800b8f1 	.word	0x0800b8f1
 800b950:	0800b99f 	.word	0x0800b99f
 800b954:	0800b8f1 	.word	0x0800b8f1
 800b958:	0800b8f1 	.word	0x0800b8f1
 800b95c:	0800ba37 	.word	0x0800ba37
 800b960:	6833      	ldr	r3, [r6, #0]
 800b962:	1d1a      	adds	r2, r3, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6032      	str	r2, [r6, #0]
 800b968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b96c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b970:	2301      	movs	r3, #1
 800b972:	e09d      	b.n	800bab0 <_printf_i+0x1e8>
 800b974:	6833      	ldr	r3, [r6, #0]
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	1d19      	adds	r1, r3, #4
 800b97a:	6031      	str	r1, [r6, #0]
 800b97c:	0606      	lsls	r6, r0, #24
 800b97e:	d501      	bpl.n	800b984 <_printf_i+0xbc>
 800b980:	681d      	ldr	r5, [r3, #0]
 800b982:	e003      	b.n	800b98c <_printf_i+0xc4>
 800b984:	0645      	lsls	r5, r0, #25
 800b986:	d5fb      	bpl.n	800b980 <_printf_i+0xb8>
 800b988:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b98c:	2d00      	cmp	r5, #0
 800b98e:	da03      	bge.n	800b998 <_printf_i+0xd0>
 800b990:	232d      	movs	r3, #45	@ 0x2d
 800b992:	426d      	negs	r5, r5
 800b994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b998:	4859      	ldr	r0, [pc, #356]	@ (800bb00 <_printf_i+0x238>)
 800b99a:	230a      	movs	r3, #10
 800b99c:	e011      	b.n	800b9c2 <_printf_i+0xfa>
 800b99e:	6821      	ldr	r1, [r4, #0]
 800b9a0:	6833      	ldr	r3, [r6, #0]
 800b9a2:	0608      	lsls	r0, r1, #24
 800b9a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9a8:	d402      	bmi.n	800b9b0 <_printf_i+0xe8>
 800b9aa:	0649      	lsls	r1, r1, #25
 800b9ac:	bf48      	it	mi
 800b9ae:	b2ad      	uxthmi	r5, r5
 800b9b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b9b2:	4853      	ldr	r0, [pc, #332]	@ (800bb00 <_printf_i+0x238>)
 800b9b4:	6033      	str	r3, [r6, #0]
 800b9b6:	bf14      	ite	ne
 800b9b8:	230a      	movne	r3, #10
 800b9ba:	2308      	moveq	r3, #8
 800b9bc:	2100      	movs	r1, #0
 800b9be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9c2:	6866      	ldr	r6, [r4, #4]
 800b9c4:	60a6      	str	r6, [r4, #8]
 800b9c6:	2e00      	cmp	r6, #0
 800b9c8:	bfa2      	ittt	ge
 800b9ca:	6821      	ldrge	r1, [r4, #0]
 800b9cc:	f021 0104 	bicge.w	r1, r1, #4
 800b9d0:	6021      	strge	r1, [r4, #0]
 800b9d2:	b90d      	cbnz	r5, 800b9d8 <_printf_i+0x110>
 800b9d4:	2e00      	cmp	r6, #0
 800b9d6:	d04b      	beq.n	800ba70 <_printf_i+0x1a8>
 800b9d8:	4616      	mov	r6, r2
 800b9da:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9de:	fb03 5711 	mls	r7, r3, r1, r5
 800b9e2:	5dc7      	ldrb	r7, [r0, r7]
 800b9e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9e8:	462f      	mov	r7, r5
 800b9ea:	42bb      	cmp	r3, r7
 800b9ec:	460d      	mov	r5, r1
 800b9ee:	d9f4      	bls.n	800b9da <_printf_i+0x112>
 800b9f0:	2b08      	cmp	r3, #8
 800b9f2:	d10b      	bne.n	800ba0c <_printf_i+0x144>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	07df      	lsls	r7, r3, #31
 800b9f8:	d508      	bpl.n	800ba0c <_printf_i+0x144>
 800b9fa:	6923      	ldr	r3, [r4, #16]
 800b9fc:	6861      	ldr	r1, [r4, #4]
 800b9fe:	4299      	cmp	r1, r3
 800ba00:	bfde      	ittt	le
 800ba02:	2330      	movle	r3, #48	@ 0x30
 800ba04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba0c:	1b92      	subs	r2, r2, r6
 800ba0e:	6122      	str	r2, [r4, #16]
 800ba10:	f8cd a000 	str.w	sl, [sp]
 800ba14:	464b      	mov	r3, r9
 800ba16:	aa03      	add	r2, sp, #12
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	f7ff fee6 	bl	800b7ec <_printf_common>
 800ba20:	3001      	adds	r0, #1
 800ba22:	d14a      	bne.n	800baba <_printf_i+0x1f2>
 800ba24:	f04f 30ff 	mov.w	r0, #4294967295
 800ba28:	b004      	add	sp, #16
 800ba2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	f043 0320 	orr.w	r3, r3, #32
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	4833      	ldr	r0, [pc, #204]	@ (800bb04 <_printf_i+0x23c>)
 800ba38:	2778      	movs	r7, #120	@ 0x78
 800ba3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	6831      	ldr	r1, [r6, #0]
 800ba42:	061f      	lsls	r7, r3, #24
 800ba44:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba48:	d402      	bmi.n	800ba50 <_printf_i+0x188>
 800ba4a:	065f      	lsls	r7, r3, #25
 800ba4c:	bf48      	it	mi
 800ba4e:	b2ad      	uxthmi	r5, r5
 800ba50:	6031      	str	r1, [r6, #0]
 800ba52:	07d9      	lsls	r1, r3, #31
 800ba54:	bf44      	itt	mi
 800ba56:	f043 0320 	orrmi.w	r3, r3, #32
 800ba5a:	6023      	strmi	r3, [r4, #0]
 800ba5c:	b11d      	cbz	r5, 800ba66 <_printf_i+0x19e>
 800ba5e:	2310      	movs	r3, #16
 800ba60:	e7ac      	b.n	800b9bc <_printf_i+0xf4>
 800ba62:	4827      	ldr	r0, [pc, #156]	@ (800bb00 <_printf_i+0x238>)
 800ba64:	e7e9      	b.n	800ba3a <_printf_i+0x172>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	f023 0320 	bic.w	r3, r3, #32
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	e7f6      	b.n	800ba5e <_printf_i+0x196>
 800ba70:	4616      	mov	r6, r2
 800ba72:	e7bd      	b.n	800b9f0 <_printf_i+0x128>
 800ba74:	6833      	ldr	r3, [r6, #0]
 800ba76:	6825      	ldr	r5, [r4, #0]
 800ba78:	6961      	ldr	r1, [r4, #20]
 800ba7a:	1d18      	adds	r0, r3, #4
 800ba7c:	6030      	str	r0, [r6, #0]
 800ba7e:	062e      	lsls	r6, r5, #24
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	d501      	bpl.n	800ba88 <_printf_i+0x1c0>
 800ba84:	6019      	str	r1, [r3, #0]
 800ba86:	e002      	b.n	800ba8e <_printf_i+0x1c6>
 800ba88:	0668      	lsls	r0, r5, #25
 800ba8a:	d5fb      	bpl.n	800ba84 <_printf_i+0x1bc>
 800ba8c:	8019      	strh	r1, [r3, #0]
 800ba8e:	2300      	movs	r3, #0
 800ba90:	6123      	str	r3, [r4, #16]
 800ba92:	4616      	mov	r6, r2
 800ba94:	e7bc      	b.n	800ba10 <_printf_i+0x148>
 800ba96:	6833      	ldr	r3, [r6, #0]
 800ba98:	1d1a      	adds	r2, r3, #4
 800ba9a:	6032      	str	r2, [r6, #0]
 800ba9c:	681e      	ldr	r6, [r3, #0]
 800ba9e:	6862      	ldr	r2, [r4, #4]
 800baa0:	2100      	movs	r1, #0
 800baa2:	4630      	mov	r0, r6
 800baa4:	f7f4 fbcc 	bl	8000240 <memchr>
 800baa8:	b108      	cbz	r0, 800baae <_printf_i+0x1e6>
 800baaa:	1b80      	subs	r0, r0, r6
 800baac:	6060      	str	r0, [r4, #4]
 800baae:	6863      	ldr	r3, [r4, #4]
 800bab0:	6123      	str	r3, [r4, #16]
 800bab2:	2300      	movs	r3, #0
 800bab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bab8:	e7aa      	b.n	800ba10 <_printf_i+0x148>
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	4632      	mov	r2, r6
 800babe:	4649      	mov	r1, r9
 800bac0:	4640      	mov	r0, r8
 800bac2:	47d0      	blx	sl
 800bac4:	3001      	adds	r0, #1
 800bac6:	d0ad      	beq.n	800ba24 <_printf_i+0x15c>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	079b      	lsls	r3, r3, #30
 800bacc:	d413      	bmi.n	800baf6 <_printf_i+0x22e>
 800bace:	68e0      	ldr	r0, [r4, #12]
 800bad0:	9b03      	ldr	r3, [sp, #12]
 800bad2:	4298      	cmp	r0, r3
 800bad4:	bfb8      	it	lt
 800bad6:	4618      	movlt	r0, r3
 800bad8:	e7a6      	b.n	800ba28 <_printf_i+0x160>
 800bada:	2301      	movs	r3, #1
 800badc:	4632      	mov	r2, r6
 800bade:	4649      	mov	r1, r9
 800bae0:	4640      	mov	r0, r8
 800bae2:	47d0      	blx	sl
 800bae4:	3001      	adds	r0, #1
 800bae6:	d09d      	beq.n	800ba24 <_printf_i+0x15c>
 800bae8:	3501      	adds	r5, #1
 800baea:	68e3      	ldr	r3, [r4, #12]
 800baec:	9903      	ldr	r1, [sp, #12]
 800baee:	1a5b      	subs	r3, r3, r1
 800baf0:	42ab      	cmp	r3, r5
 800baf2:	dcf2      	bgt.n	800bada <_printf_i+0x212>
 800baf4:	e7eb      	b.n	800bace <_printf_i+0x206>
 800baf6:	2500      	movs	r5, #0
 800baf8:	f104 0619 	add.w	r6, r4, #25
 800bafc:	e7f5      	b.n	800baea <_printf_i+0x222>
 800bafe:	bf00      	nop
 800bb00:	0800c345 	.word	0x0800c345
 800bb04:	0800c356 	.word	0x0800c356

0800bb08 <__swhatbuf_r>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	460c      	mov	r4, r1
 800bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb10:	2900      	cmp	r1, #0
 800bb12:	b096      	sub	sp, #88	@ 0x58
 800bb14:	4615      	mov	r5, r2
 800bb16:	461e      	mov	r6, r3
 800bb18:	da0d      	bge.n	800bb36 <__swhatbuf_r+0x2e>
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb20:	f04f 0100 	mov.w	r1, #0
 800bb24:	bf14      	ite	ne
 800bb26:	2340      	movne	r3, #64	@ 0x40
 800bb28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	6031      	str	r1, [r6, #0]
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	b016      	add	sp, #88	@ 0x58
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	466a      	mov	r2, sp
 800bb38:	f000 f87c 	bl	800bc34 <_fstat_r>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	dbec      	blt.n	800bb1a <__swhatbuf_r+0x12>
 800bb40:	9901      	ldr	r1, [sp, #4]
 800bb42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb4a:	4259      	negs	r1, r3
 800bb4c:	4159      	adcs	r1, r3
 800bb4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb52:	e7eb      	b.n	800bb2c <__swhatbuf_r+0x24>

0800bb54 <__smakebuf_r>:
 800bb54:	898b      	ldrh	r3, [r1, #12]
 800bb56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb58:	079d      	lsls	r5, r3, #30
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	d507      	bpl.n	800bb70 <__smakebuf_r+0x1c>
 800bb60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb64:	6023      	str	r3, [r4, #0]
 800bb66:	6123      	str	r3, [r4, #16]
 800bb68:	2301      	movs	r3, #1
 800bb6a:	6163      	str	r3, [r4, #20]
 800bb6c:	b003      	add	sp, #12
 800bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb70:	ab01      	add	r3, sp, #4
 800bb72:	466a      	mov	r2, sp
 800bb74:	f7ff ffc8 	bl	800bb08 <__swhatbuf_r>
 800bb78:	9f00      	ldr	r7, [sp, #0]
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff fc66 	bl	800b450 <_malloc_r>
 800bb84:	b948      	cbnz	r0, 800bb9a <__smakebuf_r+0x46>
 800bb86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb8a:	059a      	lsls	r2, r3, #22
 800bb8c:	d4ee      	bmi.n	800bb6c <__smakebuf_r+0x18>
 800bb8e:	f023 0303 	bic.w	r3, r3, #3
 800bb92:	f043 0302 	orr.w	r3, r3, #2
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	e7e2      	b.n	800bb60 <__smakebuf_r+0xc>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	6020      	str	r0, [r4, #0]
 800bb9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bba2:	81a3      	strh	r3, [r4, #12]
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbaa:	b15b      	cbz	r3, 800bbc4 <__smakebuf_r+0x70>
 800bbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f000 f851 	bl	800bc58 <_isatty_r>
 800bbb6:	b128      	cbz	r0, 800bbc4 <__smakebuf_r+0x70>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	431d      	orrs	r5, r3
 800bbc8:	81a5      	strh	r5, [r4, #12]
 800bbca:	e7cf      	b.n	800bb6c <__smakebuf_r+0x18>

0800bbcc <_putc_r>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	460d      	mov	r5, r1
 800bbd0:	4614      	mov	r4, r2
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	b118      	cbz	r0, 800bbde <_putc_r+0x12>
 800bbd6:	6a03      	ldr	r3, [r0, #32]
 800bbd8:	b90b      	cbnz	r3, 800bbde <_putc_r+0x12>
 800bbda:	f7ff f9cb 	bl	800af74 <__sinit>
 800bbde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbe0:	07d8      	lsls	r0, r3, #31
 800bbe2:	d405      	bmi.n	800bbf0 <_putc_r+0x24>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	0599      	lsls	r1, r3, #22
 800bbe8:	d402      	bmi.n	800bbf0 <_putc_r+0x24>
 800bbea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbec:	f7ff fbc1 	bl	800b372 <__retarget_lock_acquire_recursive>
 800bbf0:	68a3      	ldr	r3, [r4, #8]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	60a3      	str	r3, [r4, #8]
 800bbf8:	da05      	bge.n	800bc06 <_putc_r+0x3a>
 800bbfa:	69a2      	ldr	r2, [r4, #24]
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	db12      	blt.n	800bc26 <_putc_r+0x5a>
 800bc00:	b2eb      	uxtb	r3, r5
 800bc02:	2b0a      	cmp	r3, #10
 800bc04:	d00f      	beq.n	800bc26 <_putc_r+0x5a>
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	6022      	str	r2, [r4, #0]
 800bc0c:	701d      	strb	r5, [r3, #0]
 800bc0e:	b2ed      	uxtb	r5, r5
 800bc10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc12:	07da      	lsls	r2, r3, #31
 800bc14:	d405      	bmi.n	800bc22 <_putc_r+0x56>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	059b      	lsls	r3, r3, #22
 800bc1a:	d402      	bmi.n	800bc22 <_putc_r+0x56>
 800bc1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc1e:	f7ff fba9 	bl	800b374 <__retarget_lock_release_recursive>
 800bc22:	4628      	mov	r0, r5
 800bc24:	bd70      	pop	{r4, r5, r6, pc}
 800bc26:	4629      	mov	r1, r5
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f7ff fa93 	bl	800b156 <__swbuf_r>
 800bc30:	4605      	mov	r5, r0
 800bc32:	e7ed      	b.n	800bc10 <_putc_r+0x44>

0800bc34 <_fstat_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d07      	ldr	r5, [pc, #28]	@ (800bc54 <_fstat_r+0x20>)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	4611      	mov	r1, r2
 800bc40:	602b      	str	r3, [r5, #0]
 800bc42:	f7f6 f980 	bl	8001f46 <_fstat>
 800bc46:	1c43      	adds	r3, r0, #1
 800bc48:	d102      	bne.n	800bc50 <_fstat_r+0x1c>
 800bc4a:	682b      	ldr	r3, [r5, #0]
 800bc4c:	b103      	cbz	r3, 800bc50 <_fstat_r+0x1c>
 800bc4e:	6023      	str	r3, [r4, #0]
 800bc50:	bd38      	pop	{r3, r4, r5, pc}
 800bc52:	bf00      	nop
 800bc54:	200008c0 	.word	0x200008c0

0800bc58 <_isatty_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	4d06      	ldr	r5, [pc, #24]	@ (800bc74 <_isatty_r+0x1c>)
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	4604      	mov	r4, r0
 800bc60:	4608      	mov	r0, r1
 800bc62:	602b      	str	r3, [r5, #0]
 800bc64:	f7f6 f97f 	bl	8001f66 <_isatty>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d102      	bne.n	800bc72 <_isatty_r+0x1a>
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	b103      	cbz	r3, 800bc72 <_isatty_r+0x1a>
 800bc70:	6023      	str	r3, [r4, #0]
 800bc72:	bd38      	pop	{r3, r4, r5, pc}
 800bc74:	200008c0 	.word	0x200008c0

0800bc78 <_sbrk_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4d06      	ldr	r5, [pc, #24]	@ (800bc94 <_sbrk_r+0x1c>)
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	4604      	mov	r4, r0
 800bc80:	4608      	mov	r0, r1
 800bc82:	602b      	str	r3, [r5, #0]
 800bc84:	f7f6 f988 	bl	8001f98 <_sbrk>
 800bc88:	1c43      	adds	r3, r0, #1
 800bc8a:	d102      	bne.n	800bc92 <_sbrk_r+0x1a>
 800bc8c:	682b      	ldr	r3, [r5, #0]
 800bc8e:	b103      	cbz	r3, 800bc92 <_sbrk_r+0x1a>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd38      	pop	{r3, r4, r5, pc}
 800bc94:	200008c0 	.word	0x200008c0

0800bc98 <_init>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	bf00      	nop
 800bc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9e:	bc08      	pop	{r3}
 800bca0:	469e      	mov	lr, r3
 800bca2:	4770      	bx	lr

0800bca4 <_fini>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	bf00      	nop
 800bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcaa:	bc08      	pop	{r3}
 800bcac:	469e      	mov	lr, r3
 800bcae:	4770      	bx	lr

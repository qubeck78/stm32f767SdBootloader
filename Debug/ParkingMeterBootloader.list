
ParkingMeterBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afdc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800b1dc  0800b1dc  0000c1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b840  0800b840  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800b840  0800b840  0000c840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b848  0800b848  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b848  0800b848  0000c848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b84c  0800b84c  0000c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800b850  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000068  0800b8b8  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  0800b8b8  0000d87c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001606f  00000000  00000000  0000d096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f3  00000000  00000000  00023105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00026af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e09  00000000  00000000  00027d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b99e  00000000  00000000  00028b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a26a  00000000  00000000  0005451f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb840  00000000  00000000  0006e789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005280  00000000  00000000  0016a00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0016f28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b1c4 	.word	0x0800b1c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800b1c4 	.word	0x0800b1c4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <sdTest>:
extern FIL     SDFile;       /* File object for SD */

void (*programEntry)(void) = (void(*)())0x0;

static void sdTest( void )
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0d4      	sub	sp, #336	@ 0x150
 80005d4:	af00      	add	r7, sp, #0
   FRESULT  res;
   DIR      dir;
   FILINFO  fileInfo;

   res = f_opendir( &dir, "0:" );
 80005d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005da:	4926      	ldr	r1, [pc, #152]	@ (8000674 <sdTest+0xa4>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f009 f9af 	bl	8009940 <f_opendir>
 80005e2:	4603      	mov	r3, r0
 80005e4:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

   if( res != FR_OK )
 80005e8:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d006      	beq.n	80005fe <sdTest+0x2e>
   {
      printf( "f_opendir failed: %d\r\n ", res );
 80005f0:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80005f4:	4619      	mov	r1, r3
 80005f6:	4820      	ldr	r0, [pc, #128]	@ (8000678 <sdTest+0xa8>)
 80005f8:	f009 ff88 	bl	800a50c <iprintf>
 80005fc:	e036      	b.n	800066c <sdTest+0x9c>
      return;
   }

   printf( "SD Dir:\r\n" );
 80005fe:	481f      	ldr	r0, [pc, #124]	@ (800067c <sdTest+0xac>)
 8000600:	f009 fff4 	bl	800a5ec <puts>
   do
   {
      res = f_readdir( &dir, &fileInfo );
 8000604:	463a      	mov	r2, r7
 8000606:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800060a:	4611      	mov	r1, r2
 800060c:	4618      	mov	r0, r3
 800060e:	f009 fa7a 	bl	8009b06 <f_readdir>
 8000612:	4603      	mov	r3, r0
 8000614:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f

      if( ( res != FR_OK ) || ( fileInfo.fname[0] == '\0' ) )
 8000618:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800061c:	2b00      	cmp	r3, #0
 800061e:	d11d      	bne.n	800065c <sdTest+0x8c>
 8000620:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000624:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000628:	7d9b      	ldrb	r3, [r3, #22]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d016      	beq.n	800065c <sdTest+0x8c>
      {
         break;
      }

      if(fileInfo.fattrib & AM_DIR)
 800062e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000632:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000636:	7a1b      	ldrb	r3, [r3, #8]
 8000638:	f003 0310 	and.w	r3, r3, #16
 800063c:	2b00      	cmp	r3, #0
 800063e:	d006      	beq.n	800064e <sdTest+0x7e>
      {
         printf( "DIR  %s\r\n", fileInfo.fname );
 8000640:	463b      	mov	r3, r7
 8000642:	3316      	adds	r3, #22
 8000644:	4619      	mov	r1, r3
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <sdTest+0xb0>)
 8000648:	f009 ff60 	bl	800a50c <iprintf>
 800064c:	e7da      	b.n	8000604 <sdTest+0x34>
      }
      else
      {
         printf( "FILE %s\r\n", fileInfo.fname );
 800064e:	463b      	mov	r3, r7
 8000650:	3316      	adds	r3, #22
 8000652:	4619      	mov	r1, r3
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <sdTest+0xb4>)
 8000656:	f009 ff59 	bl	800a50c <iprintf>
      res = f_readdir( &dir, &fileInfo );
 800065a:	e7d3      	b.n	8000604 <sdTest+0x34>
      }
   }while( 1 );

   res = f_closedir(&dir);
 800065c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000660:	4618      	mov	r0, r3
 8000662:	f009 fa2a 	bl	8009aba <f_closedir>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
}
 800066c:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0800b1dc 	.word	0x0800b1dc
 8000678:	0800b1e0 	.word	0x0800b1e0
 800067c:	0800b1f8 	.word	0x0800b1f8
 8000680:	0800b204 	.word	0x0800b204
 8000684:	0800b210 	.word	0x0800b210

08000688 <checkAndFlashImageFile>:


static uint32_t checkAndFlashImageFile( void )
{
 8000688:	b5b0      	push	{r4, r5, r7, lr}
 800068a:	b0cc      	sub	sp, #304	@ 0x130
 800068c:	af00      	add	r7, sp, #0
   uint32_t               *fileReadBufL;

   UINT                    bytesRead;
   uint32_t                i;

   res = f_open( &SDFile, "0:firmware.bin", FA_READ );
 800068e:	2201      	movs	r2, #1
 8000690:	4953      	ldr	r1, [pc, #332]	@ (80007e0 <checkAndFlashImageFile+0x158>)
 8000692:	4854      	ldr	r0, [pc, #336]	@ (80007e4 <checkAndFlashImageFile+0x15c>)
 8000694:	f008 fcba 	bl	800900c <f_open>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

   if( res != FR_OK )
 800069e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <checkAndFlashImageFile+0x28>
   {
      printf( "No new firmware file\r\n" );
 80006a6:	4850      	ldr	r0, [pc, #320]	@ (80007e8 <checkAndFlashImageFile+0x160>)
 80006a8:	f009 ffa0 	bl	800a5ec <puts>

      return 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e091      	b.n	80007d4 <checkAndFlashImageFile+0x14c>
   }

   printf( "Found new firmware file.\r\n" );
 80006b0:	484e      	ldr	r0, [pc, #312]	@ (80007ec <checkAndFlashImageFile+0x164>)
 80006b2:	f009 ff9b 	bl	800a5ec <puts>

   //todo: check firmware file lrc


   //clear flash
   printf( "Flash erase:" );
 80006b6:	484e      	ldr	r0, [pc, #312]	@ (80007f0 <checkAndFlashImageFile+0x168>)
 80006b8:	f009 ff28 	bl	800a50c <iprintf>
   fflush( stdout );
 80006bc:	4b4d      	ldr	r3, [pc, #308]	@ (80007f4 <checkAndFlashImageFile+0x16c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 fe4c 	bl	800a360 <fflush>

   //1MB Flash in single bank mode
   flashEraseStruct.TypeErase    = FLASH_TYPEERASE_SECTORS;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   flashEraseStruct.Sector       = 4;                          //0x08020000
 80006ce:	2304      	movs	r3, #4
 80006d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   flashEraseStruct.NbSectors    = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
   flashEraseStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;      //2.7 to 3.6V
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

   HAL_FLASH_Unlock();
 80006e0:	f001 fd6e 	bl	80021c0 <HAL_FLASH_Unlock>

   errorSector = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

   if( HAL_FLASHEx_Erase( &flashEraseStruct, &errorSector ) != HAL_OK )
 80006ea:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80006ee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fec5 	bl	8002484 <HAL_FLASHEx_Erase>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00c      	beq.n	800071a <checkAndFlashImageFile+0x92>
   {
      printf( "ERROR, sector:%d\r\n", (int)errorSector );
 8000700:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000704:	4619      	mov	r1, r3
 8000706:	483c      	ldr	r0, [pc, #240]	@ (80007f8 <checkAndFlashImageFile+0x170>)
 8000708:	f009 ff00 	bl	800a50c <iprintf>

      f_close( &SDFile );
 800070c:	4835      	ldr	r0, [pc, #212]	@ (80007e4 <checkAndFlashImageFile+0x15c>)
 800070e:	f009 f8ed 	bl	80098ec <f_close>

      HAL_FLASH_Lock();
 8000712:	f001 fd77 	bl	8002204 <HAL_FLASH_Lock>

      return 1;
 8000716:	2301      	movs	r3, #1
 8000718:	e05c      	b.n	80007d4 <checkAndFlashImageFile+0x14c>
   }

   printf( "done\r\n" );
 800071a:	4838      	ldr	r0, [pc, #224]	@ (80007fc <checkAndFlashImageFile+0x174>)
 800071c:	f009 ff66 	bl	800a5ec <puts>

   printf( "Flash write:" );
 8000720:	4837      	ldr	r0, [pc, #220]	@ (8000800 <checkAndFlashImageFile+0x178>)
 8000722:	f009 fef3 	bl	800a50c <iprintf>

   //user app start
   flashWriteAddress = 0x08020000;
 8000726:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <checkAndFlashImageFile+0x17c>)
 8000728:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   fileReadBufL      = (uint32_t*)fileReadBufB;
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

   do
   {

      bytesRead = 0;
 8000734:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000738:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
      f_read( &SDFile, (void*)fileReadBufB, 256, &bytesRead );
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800074a:	4826      	ldr	r0, [pc, #152]	@ (80007e4 <checkAndFlashImageFile+0x15c>)
 800074c:	f008 ff11 	bl	8009572 <f_read>

      printf( "." );
 8000750:	202e      	movs	r0, #46	@ 0x2e
 8000752:	f009 feed 	bl	800a530 <putchar>
      fflush( stdout );
 8000756:	4b27      	ldr	r3, [pc, #156]	@ (80007f4 <checkAndFlashImageFile+0x16c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	4618      	mov	r0, r3
 800075e:	f009 fdff 	bl	800a360 <fflush>

      for( i = 0; i < 256 / 4; i++ )
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8000768:	e01a      	b.n	80007a0 <checkAndFlashImageFile+0x118>
      {
         //write 32-bit word
         HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, flashWriteAddress, fileReadBufL[i] );
 800076a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000774:	4413      	add	r3, r2
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	461c      	mov	r4, r3
 800077c:	4615      	mov	r5, r2
 800077e:	4622      	mov	r2, r4
 8000780:	462b      	mov	r3, r5
 8000782:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000786:	2002      	movs	r0, #2
 8000788:	f001 fcbe 	bl	8002108 <HAL_FLASH_Program>
         flashWriteAddress += 4;
 800078c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000790:	3304      	adds	r3, #4
 8000792:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      for( i = 0; i < 256 / 4; i++ )
 8000796:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800079a:	3301      	adds	r3, #1
 800079c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80007a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80007a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80007a6:	d9e0      	bls.n	800076a <checkAndFlashImageFile+0xe2>
      }

   }while( !f_eof( &SDFile ) );
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <checkAndFlashImageFile+0x15c>)
 80007aa:	699a      	ldr	r2, [r3, #24]
 80007ac:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <checkAndFlashImageFile+0x15c>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d1bf      	bne.n	8000734 <checkAndFlashImageFile+0xac>


   printf( "done\r\n" );
 80007b4:	4811      	ldr	r0, [pc, #68]	@ (80007fc <checkAndFlashImageFile+0x174>)
 80007b6:	f009 ff19 	bl	800a5ec <puts>

   HAL_FLASH_Lock();
 80007ba:	f001 fd23 	bl	8002204 <HAL_FLASH_Lock>

   f_close( &SDFile );
 80007be:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <checkAndFlashImageFile+0x15c>)
 80007c0:	f009 f894 	bl	80098ec <f_close>


   f_unlink( "0:firmware.cur" );
 80007c4:	4810      	ldr	r0, [pc, #64]	@ (8000808 <checkAndFlashImageFile+0x180>)
 80007c6:	f009 fa11 	bl	8009bec <f_unlink>
   f_rename( "0:firmware.bin", "0:firmware.cur" );
 80007ca:	490f      	ldr	r1, [pc, #60]	@ (8000808 <checkAndFlashImageFile+0x180>)
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <checkAndFlashImageFile+0x158>)
 80007ce:	f009 fad4 	bl	8009d7a <f_rename>

   return 0;
 80007d2:	2300      	movs	r3, #0
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80007da:	46bd      	mov	sp, r7
 80007dc:	bdb0      	pop	{r4, r5, r7, pc}
 80007de:	bf00      	nop
 80007e0:	0800b21c 	.word	0x0800b21c
 80007e4:	200004c4 	.word	0x200004c4
 80007e8:	0800b22c 	.word	0x0800b22c
 80007ec:	0800b244 	.word	0x0800b244
 80007f0:	0800b260 	.word	0x0800b260
 80007f4:	20000018 	.word	0x20000018
 80007f8:	0800b270 	.word	0x0800b270
 80007fc:	0800b284 	.word	0x0800b284
 8000800:	0800b28c 	.word	0x0800b28c
 8000804:	08020000 	.word	0x08020000
 8000808:	0800b29c 	.word	0x0800b29c

0800080c <bootloaderMain>:

void bootloaderMain()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
   uint32_t initRv;
   FRESULT  res;


   printf( "\r\n######################################################\r\n" );
 8000812:	4830      	ldr	r0, [pc, #192]	@ (80008d4 <bootloaderMain+0xc8>)
 8000814:	f009 feea 	bl	800a5ec <puts>
   printf( "BOOTLOADER B20241022\r\n\r\n" );
 8000818:	482f      	ldr	r0, [pc, #188]	@ (80008d8 <bootloaderMain+0xcc>)
 800081a:	f009 fee7 	bl	800a5ec <puts>


   printf( "boot delay: " );
 800081e:	482f      	ldr	r0, [pc, #188]	@ (80008dc <bootloaderMain+0xd0>)
 8000820:	f009 fe74 	bl	800a50c <iprintf>
   HAL_Delay( 500 );
 8000824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000828:	f000 ff1a 	bl	8001660 <HAL_Delay>
   printf( "done\r\n" );
 800082c:	482c      	ldr	r0, [pc, #176]	@ (80008e0 <bootloaderMain+0xd4>)
 800082e:	f009 fedd 	bl	800a5ec <puts>

   printf( "SD Card init: " );
 8000832:	482c      	ldr	r0, [pc, #176]	@ (80008e4 <bootloaderMain+0xd8>)
 8000834:	f009 fe6a 	bl	800a50c <iprintf>

   initRv = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]

   if( disk_initialize( 0 ) )
 800083c:	2000      	movs	r0, #0
 800083e:	f006 f86f 	bl	8006920 <disk_initialize>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d007      	beq.n	8000858 <bootloaderMain+0x4c>
   {
      printf( "error\r\n" );
 8000848:	4827      	ldr	r0, [pc, #156]	@ (80008e8 <bootloaderMain+0xdc>)
 800084a:	f009 fecf 	bl	800a5ec <puts>

      initRv |= 1;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	e002      	b.n	800085e <bootloaderMain+0x52>
   }
   else
   {
      printf( "ok\r\n" );
 8000858:	4824      	ldr	r0, [pc, #144]	@ (80008ec <bootloaderMain+0xe0>)
 800085a:	f009 fec7 	bl	800a5ec <puts>
   }

   printf( "SD Card mount:" );
 800085e:	4824      	ldr	r0, [pc, #144]	@ (80008f0 <bootloaderMain+0xe4>)
 8000860:	f009 fe54 	bl	800a50c <iprintf>

   res = f_mount( &SDFatFS, "", 0 );
 8000864:	2200      	movs	r2, #0
 8000866:	4923      	ldr	r1, [pc, #140]	@ (80008f4 <bootloaderMain+0xe8>)
 8000868:	4823      	ldr	r0, [pc, #140]	@ (80008f8 <bootloaderMain+0xec>)
 800086a:	f008 fb89 	bl	8008f80 <f_mount>
 800086e:	4603      	mov	r3, r0
 8000870:	72fb      	strb	r3, [r7, #11]

   if( res != FR_OK )
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d009      	beq.n	800088c <bootloaderMain+0x80>
   {
      printf( "failed: %d\r\n ", res );
 8000878:	7afb      	ldrb	r3, [r7, #11]
 800087a:	4619      	mov	r1, r3
 800087c:	481f      	ldr	r0, [pc, #124]	@ (80008fc <bootloaderMain+0xf0>)
 800087e:	f009 fe45 	bl	800a50c <iprintf>

      initRv |= 2;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e002      	b.n	8000892 <bootloaderMain+0x86>
   }
   else
   {
      printf( "ok\r\n" );
 800088c:	4817      	ldr	r0, [pc, #92]	@ (80008ec <bootloaderMain+0xe0>)
 800088e:	f009 fead 	bl	800a5ec <puts>
   }


   sdTest();
 8000892:	f7ff fe9d 	bl	80005d0 <sdTest>

   checkAndFlashImageFile();
 8000896:	f7ff fef7 	bl	8000688 <checkAndFlashImageFile>


   //unmount sd card

   f_mount(0, "", 0);
 800089a:	2200      	movs	r2, #0
 800089c:	4915      	ldr	r1, [pc, #84]	@ (80008f4 <bootloaderMain+0xe8>)
 800089e:	2000      	movs	r0, #0
 80008a0:	f008 fb6e 	bl	8008f80 <f_mount>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop

    __disable_irq();

   //move irq vector
   SCB->VTOR = 0x8020000;
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <bootloaderMain+0xf4>)
 80008aa:	4a16      	ldr	r2, [pc, #88]	@ (8000904 <bootloaderMain+0xf8>)
 80008ac:	609a      	str	r2, [r3, #8]

   //read initial pc
   programEntry = (void (*)(void)) *(__IO uint32_t*)0x8020004;
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <bootloaderMain+0xfc>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <bootloaderMain+0x100>)
 80008b6:	601a      	str	r2, [r3, #0]

   //read and set initial stack
   __set_MSP(*(__IO uint32_t*) 0x8020000);
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <bootloaderMain+0xf8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f383 8808 	msr	MSP, r3
}
 80008c4:	bf00      	nop

   //jump to app
   (*programEntry)();
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <bootloaderMain+0x100>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4798      	blx	r3

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800b2ac 	.word	0x0800b2ac
 80008d8:	0800b2e8 	.word	0x0800b2e8
 80008dc:	0800b300 	.word	0x0800b300
 80008e0:	0800b284 	.word	0x0800b284
 80008e4:	0800b310 	.word	0x0800b310
 80008e8:	0800b320 	.word	0x0800b320
 80008ec:	0800b328 	.word	0x0800b328
 80008f0:	0800b32c 	.word	0x0800b32c
 80008f4:	0800b33c 	.word	0x0800b33c
 80008f8:	20000290 	.word	0x20000290
 80008fc:	0800b340 	.word	0x0800b340
 8000900:	e000ed00 	.word	0xe000ed00
 8000904:	08020000 	.word	0x08020000
 8000908:	08020004 	.word	0x08020004
 800090c:	20000084 	.word	0x20000084

08000910 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//override putchar -> printf redirected to uart
int __io_putchar( int ch )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit( &huart7, (uint8_t *)&ch, 1, 0xFFFF );
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091e:	2201      	movs	r2, #1
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <__io_putchar+0x20>)
 8000922:	f004 fb6f 	bl	8005004 <HAL_UART_Transmit>

   return ch;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001dc 	.word	0x200001dc

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000938:	f000 fb3a 	bl	8000fb0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fe33 	bl	80015a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f814 	bl	800096c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000944:	f000 f882 	bl	8000a4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 f936 	bl	8000bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800094c:	f000 f90e 	bl	8000b6c <MX_DMA_Init>
  MX_RNG_Init();
 8000950:	f000 f8a8 	bl	8000aa4 <MX_RNG_Init>
  MX_UART7_Init();
 8000954:	f000 f8da 	bl	8000b0c <MX_UART7_Init>
  MX_SDMMC2_SD_Init();
 8000958:	f000 f8b8 	bl	8000acc <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800095c:	f005 fd8e 	bl	800647c <MX_FATFS_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8000960:	b662      	cpsie	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN 2 */
  __enable_irq();

  bootloaderMain();
 8000964:	f7ff ff52 	bl	800080c <bootloaderMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <main+0x34>

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	@ 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2234      	movs	r2, #52	@ 0x34
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f009 ff16 	bl	800a7ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000990:	f002 f83c 	bl	8002a0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	4b2b      	ldr	r3, [pc, #172]	@ (8000a44 <SystemClock_Config+0xd8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a2a      	ldr	r2, [pc, #168]	@ (8000a44 <SystemClock_Config+0xd8>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SystemClock_Config+0xd8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <SystemClock_Config+0xdc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a25      	ldr	r2, [pc, #148]	@ (8000a48 <SystemClock_Config+0xdc>)
 80009b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <SystemClock_Config+0xdc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009dc:	23c0      	movs	r3, #192	@ 0xc0
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 f86b 	bl	8002acc <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009fc:	f000 fb04 	bl	8001008 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a00:	f002 f814 	bl	8002a2c <HAL_PWREx_EnableOverDrive>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a0a:	f000 fafd 	bl	8001008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	2106      	movs	r1, #6
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fafb 	bl	8003028 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a38:	f000 fae6 	bl	8001008 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3750      	adds	r7, #80	@ 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0a4      	sub	sp, #144	@ 0x90
 8000a50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2290      	movs	r2, #144	@ 0x90
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f009 fea7 	bl	800a7ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2|RCC_PERIPHCLK_CLK48;
 8000a5e:	f04f 6384 	mov.w	r3, #69206016	@ 0x4200000
 8000a62:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a64:	23c0      	movs	r3, #192	@ 0xc0
 8000a66:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000a7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fcf2 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000a96:	f000 fab7 	bl	8001008 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3790      	adds	r7, #144	@ 0x90
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <MX_RNG_Init+0x20>)
 8000aaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <MX_RNG_Init+0x24>)
 8000aac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_RNG_Init+0x20>)
 8000ab0:	f003 f908 	bl	8003cc4 <HAL_RNG_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000aba:	f000 faa5 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000088 	.word	0x20000088
 8000ac8:	50060800 	.word	0x50060800

08000acc <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <MX_SDMMC2_SD_Init+0x3c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 2;
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <MX_SDMMC2_SD_Init+0x38>)
 8000af6:	2202      	movs	r2, #2
 8000af8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20000098 	.word	0x20000098
 8000b08:	40011c00 	.word	0x40011c00

08000b0c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b12:	4a15      	ldr	r2, [pc, #84]	@ (8000b68 <MX_UART7_Init+0x5c>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b16:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b1c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_UART7_Init+0x58>)
 8000b50:	f004 fa0a 	bl	8004f68 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000b5a:	f000 fa55 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001dc 	.word	0x200001dc
 8000b68:	40007800 	.word	0x40007800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_DMA_Init+0x48>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb4 <MX_DMA_Init+0x48>)
 8000b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <MX_DMA_Init+0x48>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2038      	movs	r0, #56	@ 0x38
 8000b90:	f000 fe65 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b94:	2038      	movs	r0, #56	@ 0x38
 8000b96:	f000 fe7e 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2044      	movs	r0, #68	@ 0x44
 8000ba0:	f000 fe5d 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000ba4:	2044      	movs	r0, #68	@ 0x44
 8000ba6:	f000 fe76 	bl	8001896 <HAL_NVIC_EnableIRQ>

}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b090      	sub	sp, #64	@ 0x40
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4bb0      	ldr	r3, [pc, #704]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4aaf      	ldr	r2, [pc, #700]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4bad      	ldr	r3, [pc, #692]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be6:	4baa      	ldr	r3, [pc, #680]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4aa9      	ldr	r2, [pc, #676]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4ba7      	ldr	r3, [pc, #668]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0320 	and.w	r3, r3, #32
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4aa3      	ldr	r2, [pc, #652]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4ba1      	ldr	r3, [pc, #644]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b9e      	ldr	r3, [pc, #632]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a9d      	ldr	r2, [pc, #628]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b9b      	ldr	r3, [pc, #620]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b98      	ldr	r3, [pc, #608]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a97      	ldr	r2, [pc, #604]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b95      	ldr	r3, [pc, #596]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b92      	ldr	r3, [pc, #584]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a91      	ldr	r2, [pc, #580]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b8f      	ldr	r3, [pc, #572]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a8b      	ldr	r2, [pc, #556]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b89      	ldr	r3, [pc, #548]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c76:	4b86      	ldr	r3, [pc, #536]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a85      	ldr	r2, [pc, #532]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b83      	ldr	r3, [pc, #524]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c8e:	4b80      	ldr	r3, [pc, #512]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a7f      	ldr	r2, [pc, #508]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a79      	ldr	r2, [pc, #484]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b77      	ldr	r3, [pc, #476]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cbe:	4b74      	ldr	r3, [pc, #464]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a73      	ldr	r2, [pc, #460]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000cc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b71      	ldr	r3, [pc, #452]	@ (8000e90 <MX_GPIO_Init+0x2d8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VCC_PRINTER_ON_Pin|BUZZER_TTL_Pin|VCC_COIN_ON_Pin|CJ_MOTOR_TTL_Pin
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 414f 	mov.w	r1, #52992	@ 0xcf00
 8000cdc:	486d      	ldr	r0, [pc, #436]	@ (8000e94 <MX_GPIO_Init+0x2dc>)
 8000cde:	f001 fe7b 	bl	80029d8 <HAL_GPIO_WritePin>
                          |ES_DECL_MAG_TTL_Pin|ES_ACC_MAG_TTL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, AP_MAGNET_Pin|VCC_MDM_ON_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 5190 	mov.w	r1, #4608	@ 0x1200
 8000ce8:	486b      	ldr	r0, [pc, #428]	@ (8000e98 <MX_GPIO_Init+0x2e0>)
 8000cea:	f001 fe75 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MDM_ON_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D0_Pin
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f241 013b 	movw	r1, #4155	@ 0x103b
 8000cf4:	4869      	ldr	r0, [pc, #420]	@ (8000e9c <MX_GPIO_Init+0x2e4>)
 8000cf6:	f001 fe6f 	bl	80029d8 <HAL_GPIO_WritePin>
                          |LCD_D1_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	4868      	ldr	r0, [pc, #416]	@ (8000ea0 <MX_GPIO_Init+0x2e8>)
 8000d00:	f001 fe6a 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d0a:	4866      	ldr	r0, [pc, #408]	@ (8000ea4 <MX_GPIO_Init+0x2ec>)
 8000d0c:	f001 fe64 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D7_Pin|LCD_BL_R_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d16:	4864      	ldr	r0, [pc, #400]	@ (8000ea8 <MX_GPIO_Init+0x2f0>)
 8000d18:	f001 fe5e 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, LCD_BL_G_Pin|LCD_BL_B_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2118      	movs	r1, #24
 8000d20:	4862      	ldr	r0, [pc, #392]	@ (8000eac <MX_GPIO_Init+0x2f4>)
 8000d22:	f001 fe59 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VCC12_MEASUREMENT_Pin VCC24_MEASUREMENT_Pin VCC5_MEASUREMENT_Pin */
  GPIO_InitStruct.Pin = VCC12_MEASUREMENT_Pin|VCC24_MEASUREMENT_Pin|VCC5_MEASUREMENT_Pin;
 8000d26:	230e      	movs	r3, #14
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d36:	4619      	mov	r1, r3
 8000d38:	485d      	ldr	r0, [pc, #372]	@ (8000eb0 <MX_GPIO_Init+0x2f8>)
 8000d3a:	f001 fca1 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPI0_Pin */
  GPIO_InitStruct.Pin = GPI0_Pin;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPI0_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4858      	ldr	r0, [pc, #352]	@ (8000eb4 <MX_GPIO_Init+0x2fc>)
 8000d52:	f001 fc95 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d66:	2308      	movs	r3, #8
 8000d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4850      	ldr	r0, [pc, #320]	@ (8000eb4 <MX_GPIO_Init+0x2fc>)
 8000d72:	f001 fc85 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHT_SENSOR_Pin VCC_SOLAR_MEASUREMENT_Pin */
  GPIO_InitStruct.Pin = LIGHT_SENSOR_Pin|VCC_SOLAR_MEASUREMENT_Pin;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d86:	4619      	mov	r1, r3
 8000d88:	484b      	ldr	r0, [pc, #300]	@ (8000eb8 <MX_GPIO_Init+0x300>)
 8000d8a:	f001 fc79 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : VCC_PRINTER_ON_Pin BUZZER_TTL_Pin VCC_COIN_ON_Pin CJ_MOTOR_TTL_Pin
                           ES_DECL_MAG_TTL_Pin ES_ACC_MAG_TTL_Pin */
  GPIO_InitStruct.Pin = VCC_PRINTER_ON_Pin|BUZZER_TTL_Pin|VCC_COIN_ON_Pin|CJ_MOTOR_TTL_Pin
 8000d8e:	f44f 434f 	mov.w	r3, #52992	@ 0xcf00
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ES_DECL_MAG_TTL_Pin|ES_ACC_MAG_TTL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da4:	4619      	mov	r1, r3
 8000da6:	483b      	ldr	r0, [pc, #236]	@ (8000e94 <MX_GPIO_Init+0x2dc>)
 8000da8:	f001 fc6a 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : CJ_SENSOR_Pin ES_SENSOR_Pin */
  GPIO_InitStruct.Pin = CJ_SENSOR_Pin|ES_SENSOR_Pin;
 8000dac:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db2:	2300      	movs	r3, #0
 8000db4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4834      	ldr	r0, [pc, #208]	@ (8000e94 <MX_GPIO_Init+0x2dc>)
 8000dc2:	f001 fc5d 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	4835      	ldr	r0, [pc, #212]	@ (8000eb8 <MX_GPIO_Init+0x300>)
 8000de4:	f001 fc4c 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : AP_MAGNET_Pin VCC_MDM_ON_Pin */
  GPIO_InitStruct.Pin = AP_MAGNET_Pin|VCC_MDM_ON_Pin;
 8000de8:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4825      	ldr	r0, [pc, #148]	@ (8000e98 <MX_GPIO_Init+0x2e0>)
 8000e02:	f001 fc3d 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : AP_COIN_Pin AP_ERROR_Pin */
  GPIO_InitStruct.Pin = AP_COIN_Pin|AP_ERROR_Pin;
 8000e06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481f      	ldr	r0, [pc, #124]	@ (8000e98 <MX_GPIO_Init+0x2e0>)
 8000e1c:	f001 fc30 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e20:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e32:	2308      	movs	r3, #8
 8000e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481e      	ldr	r0, [pc, #120]	@ (8000eb8 <MX_GPIO_Init+0x300>)
 8000e3e:	f001 fc1f 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e42:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e54:	2304      	movs	r3, #4
 8000e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4816      	ldr	r0, [pc, #88]	@ (8000eb8 <MX_GPIO_Init+0x300>)
 8000e60:	f001 fc0e 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : MDM_ON_Pin LCD_RW_Pin LCD_E_Pin LCD_D0_Pin
                           LCD_D1_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = MDM_ON_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_D0_Pin
 8000e64:	f241 033b 	movw	r3, #4155	@ 0x103b
 8000e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_D1_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <MX_GPIO_Init+0x2e4>)
 8000e7e:	f001 fbff 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : MDM_RING_Pin */
  GPIO_InitStruct.Pin = MDM_RING_Pin;
 8000e82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e015      	b.n	8000ebc <MX_GPIO_Init+0x304>
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40022000 	.word	0x40022000
 8000ea4:	40022400 	.word	0x40022400
 8000ea8:	40021800 	.word	0x40021800
 8000eac:	40022800 	.word	0x40022800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020400 	.word	0x40020400
 8000ebc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(MDM_RING_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4834      	ldr	r0, [pc, #208]	@ (8000f98 <MX_GPIO_Init+0x3e0>)
 8000ec6:	f001 fbdb 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000edc:	2308      	movs	r3, #8
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ee0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	482d      	ldr	r0, [pc, #180]	@ (8000f9c <MX_GPIO_Init+0x3e4>)
 8000ee8:	f001 fbca 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8000eec:	2308      	movs	r3, #8
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f00:	4619      	mov	r1, r3
 8000f02:	4827      	ldr	r0, [pc, #156]	@ (8000fa0 <MX_GPIO_Init+0x3e8>)
 8000f04:	f001 fbbc 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin */
  GPIO_InitStruct.Pin = LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin;
 8000f08:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <MX_GPIO_Init+0x3ec>)
 8000f22:	f001 fbad 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_BL_R_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_BL_R_Pin;
 8000f26:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	481a      	ldr	r0, [pc, #104]	@ (8000fa8 <MX_GPIO_Init+0x3f0>)
 8000f40:	f001 fb9e 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_G_Pin LCD_BL_B_Pin */
  GPIO_InitStruct.Pin = LCD_BL_G_Pin|LCD_BL_B_Pin;
 8000f44:	2318      	movs	r3, #24
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4814      	ldr	r0, [pc, #80]	@ (8000fac <MX_GPIO_Init+0x3f4>)
 8000f5c:	f001 fb90 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI3_Pin GPI2_Pin GPI1_Pin */
  GPIO_InitStruct.Pin = GPI3_Pin|GPI2_Pin|GPI1_Pin;
 8000f60:	23e0      	movs	r3, #224	@ 0xe0
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	480e      	ldr	r0, [pc, #56]	@ (8000fac <MX_GPIO_Init+0x3f4>)
 8000f74:	f001 fb84 	bl	8002680 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPI5_Pin GPI4_Pin GPI7_Pin GPI6_Pin */
  GPIO_InitStruct.Pin = GPI5_Pin|GPI4_Pin|GPI7_Pin|GPI6_Pin;
 8000f78:	23f0      	movs	r3, #240	@ 0xf0
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_GPIO_Init+0x3e8>)
 8000f8c:	f001 fb78 	bl	8002680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f90:	bf00      	nop
 8000f92:	3740      	adds	r7, #64	@ 0x40
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021c00 	.word	0x40021c00
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	40022400 	.word	0x40022400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40022800 	.word	0x40022800

08000fb0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fc2:	f000 fc83 	bl	80018cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fd2:	231f      	movs	r3, #31
 8000fd4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fd6:	2387      	movs	r3, #135	@ 0x87
 8000fd8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fca1 	bl	800193c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f000 fc7e 	bl	80018fc <HAL_MPU_Enable>

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <Error_Handler+0x8>

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <HAL_MspInit+0x44>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <HAL_MspInit+0x44>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001024:	6413      	str	r3, [r2, #64]	@ 0x40
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_MspInit+0x44>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_MspInit+0x44>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	4a08      	ldr	r2, [pc, #32]	@ (8001058 <HAL_MspInit+0x44>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6453      	str	r3, [r2, #68]	@ 0x44
 800103e:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <HAL_MspInit+0x44>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <HAL_RNG_MspInit+0x38>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10b      	bne.n	8001086 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_RNG_MspInit+0x3c>)
 8001070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_RNG_MspInit+0x3c>)
 8001074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001078:	6353      	str	r3, [r2, #52]	@ 0x34
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_RNG_MspInit+0x3c>)
 800107c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	50060800 	.word	0x50060800
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a6d      	ldr	r2, [pc, #436]	@ (8001270 <HAL_SD_MspInit+0x1d4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	f040 80d4 	bne.w	8001268 <HAL_SD_MspInit+0x1cc>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80010c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80010cc:	4b69      	ldr	r3, [pc, #420]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b66      	ldr	r3, [pc, #408]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010dc:	4a65      	ldr	r2, [pc, #404]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e4:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f0:	4b60      	ldr	r3, [pc, #384]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <HAL_SD_MspInit+0x1d8>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001108:	23c0      	movs	r3, #192	@ 0xc0
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001118:	230b      	movs	r3, #11
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4855      	ldr	r0, [pc, #340]	@ (8001278 <HAL_SD_MspInit+0x1dc>)
 8001124:	f001 faac 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001128:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800113a:	230b      	movs	r3, #11
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	484d      	ldr	r0, [pc, #308]	@ (800127c <HAL_SD_MspInit+0x1e0>)
 8001146:	f001 fa9b 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800114a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800115c:	230a      	movs	r3, #10
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4845      	ldr	r0, [pc, #276]	@ (800127c <HAL_SD_MspInit+0x1e0>)
 8001168:	f001 fa8a 	bl	8002680 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 800116c:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 800116e:	4a45      	ldr	r2, [pc, #276]	@ (8001284 <HAL_SD_MspInit+0x1e8>)
 8001170:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8001172:	4b43      	ldr	r3, [pc, #268]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 8001174:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 8001178:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b41      	ldr	r3, [pc, #260]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b3f      	ldr	r3, [pc, #252]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b3e      	ldr	r3, [pc, #248]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 8001188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800118e:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 8001190:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001194:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001196:	4b3a      	ldr	r3, [pc, #232]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 8001198:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800119c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 800119e:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011a0:	2220      	movs	r2, #32
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011aa:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011b0:	4b33      	ldr	r3, [pc, #204]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011b2:	2203      	movs	r2, #3
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011b6:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011b8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80011bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011be:	4b30      	ldr	r3, [pc, #192]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 80011c6:	482e      	ldr	r0, [pc, #184]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011c8:	f000 fbf8 	bl	80019bc <HAL_DMA_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_SD_MspInit+0x13a>
    {
      Error_Handler();
 80011d2:	f7ff ff19 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a29      	ldr	r2, [pc, #164]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40
 80011dc:	4a28      	ldr	r2, [pc, #160]	@ (8001280 <HAL_SD_MspInit+0x1e4>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 80011e4:	4a29      	ldr	r2, [pc, #164]	@ (800128c <HAL_SD_MspInit+0x1f0>)
 80011e6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 80011e8:	4b27      	ldr	r3, [pc, #156]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 80011ea:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 80011ee:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 80011f2:	2240      	movs	r2, #64	@ 0x40
 80011f4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f6:	4b24      	ldr	r3, [pc, #144]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 80011fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001202:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001206:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800120a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 800120e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001212:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8001214:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001216:	2220      	movs	r2, #32
 8001218:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001222:	2204      	movs	r2, #4
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001228:	2203      	movs	r2, #3
 800122a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 800122e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001232:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001236:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800123a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 800123c:	4812      	ldr	r0, [pc, #72]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 800123e:	f000 fbbd 	bl	80019bc <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_SD_MspInit+0x1b0>
    {
      Error_Handler();
 8001248:	f7ff fede 	bl	8001008 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001250:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001252:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <HAL_SD_MspInit+0x1ec>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2067      	movs	r0, #103	@ 0x67
 800125e:	f000 fafe 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8001262:	2067      	movs	r0, #103	@ 0x67
 8001264:	f000 fb17 	bl	8001896 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	@ 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40011c00 	.word	0x40011c00
 8001274:	40023800 	.word	0x40023800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021800 	.word	0x40021800
 8001280:	2000011c 	.word	0x2000011c
 8001284:	40026410 	.word	0x40026410
 8001288:	2000017c 	.word	0x2000017c
 800128c:	40026488 	.word	0x40026488

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ae      	sub	sp, #184	@ 0xb8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2290      	movs	r2, #144	@ 0x90
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f009 fa7b 	bl	800a7ac <memset>
  if(huart->Instance==UART7)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a21      	ldr	r2, [pc, #132]	@ (8001340 <HAL_UART_MspInit+0xb0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d13b      	bne.n	8001338 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80012c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f8d0 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012da:	f7ff fe95 	bl	8001008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80012de:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_UART_MspInit+0xb4>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4a18      	ldr	r2, [pc, #96]	@ (8001344 <HAL_UART_MspInit+0xb4>)
 80012e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80012e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_UART_MspInit+0xb4>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_UART_MspInit+0xb4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <HAL_UART_MspInit+0xb4>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <HAL_UART_MspInit+0xb4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800130e:	23c0      	movs	r3, #192	@ 0xc0
 8001310:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001326:	2308      	movs	r3, #8
 8001328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <HAL_UART_MspInit+0xb8>)
 8001334:	f001 f9a4 	bl	8002680 <HAL_GPIO_Init>

  /* USER CODE END UART7_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	37b8      	adds	r7, #184	@ 0xb8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40007800 	.word	0x40007800
 8001344:	40023800 	.word	0x40023800
 8001348:	40021400 	.word	0x40021400

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f93d 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <DMA2_Stream0_IRQHandler+0x10>)
 80013b2:	f000 fc33 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000011c 	.word	0x2000011c

080013c0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA2_Stream5_IRQHandler+0x10>)
 80013c6:	f000 fc29 	bl	8001c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000017c 	.word	0x2000017c

080013d4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <SDMMC2_IRQHandler+0x10>)
 80013da:	f002 ff1d 	bl	8004218 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000098 	.word	0x20000098

080013e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
  }

  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	e009      	b.n	8001448 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	60ba      	str	r2, [r7, #8]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fa67 	bl	8000910 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf1      	blt.n	8001434 <_write+0x12>
  }
  return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_close>:

int _close(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001482:	605a      	str	r2, [r3, #4]
  return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_isatty>:

int _isatty(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	@ (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f009 f9a8 	bl	800a848 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20080000 	.word	0x20080000
 8001524:	00000400 	.word	0x00000400
 8001528:	20000264 	.word	0x20000264
 800152c:	20000880 	.word	0x20000880

08001530 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001558:	f7ff ffea 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001582:	f009 f967 	bl	800a854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff f9d5 	bl	8000934 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001598:	0800b850 	.word	0x0800b850
  ldr r2, =_sbss
 800159c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015a0:	2000087c 	.word	0x2000087c

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>

080015a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f000 f94c 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b0:	200f      	movs	r0, #15
 80015b2:	f000 f805 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b6:	f7ff fd2d 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	@ (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f967 	bl	80018b2 <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f92f 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	@ (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20000268 	.word	0x20000268

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000268 	.word	0x20000268

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x40>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <__NVIC_SetPriorityGrouping+0x40>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	05fa0000 	.word	0x05fa0000

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff3e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff31 	bl	800170c <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018d0:	f3bf 8f5f 	dmb	sy
}
 80018d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_MPU_Disable+0x28>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018da:	4a06      	ldr	r2, [pc, #24]	@ (80018f4 <HAL_MPU_Disable+0x28>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018e0:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_MPU_Disable+0x2c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	e000ed90 	.word	0xe000ed90

080018fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001904:	4a0b      	ldr	r2, [pc, #44]	@ (8001934 <HAL_MPU_Enable+0x38>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800190e:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <HAL_MPU_Enable+0x3c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_MPU_Enable+0x3c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001918:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800191a:	f3bf 8f4f 	dsb	sy
}
 800191e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001920:	f3bf 8f6f 	isb	sy
}
 8001924:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed90 	.word	0xe000ed90
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	785a      	ldrb	r2, [r3, #1]
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 800194a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001958:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b1b      	ldrb	r3, [r3, #12]
 8001964:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7adb      	ldrb	r3, [r3, #11]
 800196a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800196c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7a9b      	ldrb	r3, [r3, #10]
 8001972:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7b5b      	ldrb	r3, [r3, #13]
 800197a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800197c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7b9b      	ldrb	r3, [r3, #14]
 8001982:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001984:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7bdb      	ldrb	r3, [r3, #15]
 800198a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800198c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7a5b      	ldrb	r3, [r3, #9]
 8001992:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001994:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7a1b      	ldrb	r3, [r3, #8]
 800199a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800199c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019a8:	6113      	str	r3, [r2, #16]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed90 	.word	0xe000ed90

080019bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fe3e 	bl	8001648 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e099      	b.n	8001b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f8:	e00f      	b.n	8001a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019fa:	f7ff fe25 	bl	8001648 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d908      	bls.n	8001a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2203      	movs	r2, #3
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e078      	b.n	8001b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e8      	bne.n	80019fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4b38      	ldr	r3, [pc, #224]	@ (8001b14 <HAL_DMA_Init+0x158>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d107      	bne.n	8001a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f023 0307 	bic.w	r3, r3, #7
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d117      	bne.n	8001ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00e      	beq.n	8001ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 faa5 	bl	8002010 <DMA_CheckFifoParam>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2240      	movs	r2, #64	@ 0x40
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ada:	2301      	movs	r3, #1
 8001adc:	e016      	b.n	8001b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa5c 	bl	8001fa4 <DMA_CalcBaseAndBitshift>
 8001aec:	4603      	mov	r3, r0
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	223f      	movs	r2, #63	@ 0x3f
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	e010803f 	.word	0xe010803f

08001b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Start_IT+0x26>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e048      	b.n	8001bd0 <HAL_DMA_Start_IT+0xb8>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d137      	bne.n	8001bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f9ee 	bl	8001f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b70:	223f      	movs	r2, #63	@ 0x3f
 8001b72:	409a      	lsls	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0216 	orr.w	r2, r2, #22
 8001b86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b96:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0208 	orr.w	r2, r2, #8
 8001bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e005      	b.n	8001bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d004      	beq.n	8001bf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e00c      	b.n	8001c10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c28:	4b8e      	ldr	r3, [pc, #568]	@ (8001e64 <HAL_DMA_IRQHandler+0x248>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e68 <HAL_DMA_IRQHandler+0x24c>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a9b      	lsrs	r3, r3, #10
 8001c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0204 	bic.w	r2, r2, #4
 8001c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	2208      	movs	r2, #8
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	2201      	movs	r2, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb6:	f043 0202 	orr.w	r2, r3, #2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d043      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03c      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d16:	2210      	movs	r2, #16
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d024      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
 8001d4a:	e01f      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01b      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e016      	b.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0208 	bic.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d90:	2220      	movs	r2, #32
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 808f 	beq.w	8001ebc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 8087 	beq.w	8001ebc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db2:	2220      	movs	r2, #32
 8001db4:	409a      	lsls	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d136      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0216 	bic.w	r2, r2, #22
 8001dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x1da>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0208 	bic.w	r2, r2, #8
 8001e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	223f      	movs	r2, #63	@ 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d07e      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	4798      	blx	r3
        }
        return;
 8001e32:	e079      	b.n	8001f28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01d      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10d      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d031      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
 8001e60:	e02c      	b.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000
 8001e68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d023      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
 8001e7c:	e01e      	b.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10f      	bne.n	8001eac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0210 	bic.w	r2, r2, #16
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d032      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d022      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3301      	adds	r3, #1
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d307      	bcc.n	8001f04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f2      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x2cc>
 8001f02:	e000      	b.n	8001f06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	e000      	b.n	8001f2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f28:	bf00      	nop
    }
  }
}
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b40      	cmp	r3, #64	@ 0x40
 8001f74:	d108      	bne.n	8001f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f86:	e007      	b.n	8001f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3b10      	subs	r3, #16
 8001fb4:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <DMA_CalcBaseAndBitshift+0x60>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <DMA_CalcBaseAndBitshift+0x64>)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d908      	bls.n	8001fe4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <DMA_CalcBaseAndBitshift+0x68>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	1d1a      	adds	r2, r3, #4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fe2:	e006      	b.n	8001ff2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <DMA_CalcBaseAndBitshift+0x68>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	aaaaaaab 	.word	0xaaaaaaab
 8002008:	0800b3b0 	.word	0x0800b3b0
 800200c:	fffffc00 	.word	0xfffffc00

08002010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11f      	bne.n	800206a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d856      	bhi.n	80020de <DMA_CheckFifoParam+0xce>
 8002030:	a201      	add	r2, pc, #4	@ (adr r2, 8002038 <DMA_CheckFifoParam+0x28>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	0800205b 	.word	0x0800205b
 8002040:	08002049 	.word	0x08002049
 8002044:	080020df 	.word	0x080020df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d046      	beq.n	80020e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002058:	e043      	b.n	80020e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002062:	d140      	bne.n	80020e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002068:	e03d      	b.n	80020e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002072:	d121      	bne.n	80020b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d837      	bhi.n	80020ea <DMA_CheckFifoParam+0xda>
 800207a:	a201      	add	r2, pc, #4	@ (adr r2, 8002080 <DMA_CheckFifoParam+0x70>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	08002091 	.word	0x08002091
 8002084:	08002097 	.word	0x08002097
 8002088:	08002091 	.word	0x08002091
 800208c:	080020a9 	.word	0x080020a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e030      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d025      	beq.n	80020ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a6:	e022      	b.n	80020ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020b0:	d11f      	bne.n	80020f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020b6:	e01c      	b.n	80020f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d903      	bls.n	80020c6 <DMA_CheckFifoParam+0xb6>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d003      	beq.n	80020cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020c4:	e018      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ca:	e015      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e00b      	b.n	80020f6 <DMA_CheckFifoParam+0xe6>
      break;
 80020de:	bf00      	nop
 80020e0:	e00a      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e008      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e006      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
 80020ec:	e004      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e002      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020f2:	bf00      	nop
 80020f4:	e000      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
    }
  } 
  
  return status; 
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800211a:	4b27      	ldr	r3, [pc, #156]	@ (80021b8 <HAL_FLASH_Program+0xb0>)
 800211c:	7d1b      	ldrb	r3, [r3, #20]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_FLASH_Program+0x1e>
 8002122:	2302      	movs	r3, #2
 8002124:	e043      	b.n	80021ae <HAL_FLASH_Program+0xa6>
 8002126:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <HAL_FLASH_Program+0xb0>)
 8002128:	2201      	movs	r2, #1
 800212a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800212c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002130:	f000 f878 	bl	8002224 <FLASH_WaitForLastOperation>
 8002134:	4603      	mov	r3, r0
 8002136:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d133      	bne.n	80021a6 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d823      	bhi.n	800218c <HAL_FLASH_Program+0x84>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <HAL_FLASH_Program+0x44>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	0800215d 	.word	0x0800215d
 8002150:	08002169 	.word	0x08002169
 8002154:	08002175 	.word	0x08002175
 8002158:	08002181 	.word	0x08002181
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800215c:	783b      	ldrb	r3, [r7, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	68b8      	ldr	r0, [r7, #8]
 8002162:	f000 f921 	bl	80023a8 <FLASH_Program_Byte>
        break;
 8002166:	e012      	b.n	800218e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002168:	883b      	ldrh	r3, [r7, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	68b8      	ldr	r0, [r7, #8]
 800216e:	f000 f8f5 	bl	800235c <FLASH_Program_HalfWord>
        break;
 8002172:	e00c      	b.n	800218e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	68b8      	ldr	r0, [r7, #8]
 800217a:	f000 f8c9 	bl	8002310 <FLASH_Program_Word>
        break;
 800217e:	e006      	b.n	800218e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f000 f88d 	bl	80022a4 <FLASH_Program_DoubleWord>
        break;
 800218a:	e000      	b.n	800218e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800218c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800218e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002192:	f000 f847 	bl	8002224 <FLASH_WaitForLastOperation>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <HAL_FLASH_Program+0xb4>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	4a07      	ldr	r2, [pc, #28]	@ (80021bc <HAL_FLASH_Program+0xb4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021a6:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <HAL_FLASH_Program+0xb0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	751a      	strb	r2, [r3, #20]

  return status;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000026c 	.word	0x2000026c
 80021bc:	40023c00 	.word	0x40023c00

080021c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_FLASH_Unlock+0x38>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da0b      	bge.n	80021ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_FLASH_Unlock+0x38>)
 80021d4:	4a09      	ldr	r2, [pc, #36]	@ (80021fc <HAL_FLASH_Unlock+0x3c>)
 80021d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_FLASH_Unlock+0x38>)
 80021da:	4a09      	ldr	r2, [pc, #36]	@ (8002200 <HAL_FLASH_Unlock+0x40>)
 80021dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_FLASH_Unlock+0x38>)
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da01      	bge.n	80021ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80021ea:	79fb      	ldrb	r3, [r7, #7]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	45670123 	.word	0x45670123
 8002200:	cdef89ab 	.word	0xcdef89ab

08002204 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <HAL_FLASH_Lock+0x1c>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_FLASH_Lock+0x1c>)
 800220e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002212:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40023c00 	.word	0x40023c00

08002224 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002230:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <FLASH_WaitForLastOperation+0x78>)
 8002232:	2200      	movs	r2, #0
 8002234:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002236:	f7ff fa07 	bl	8001648 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800223c:	e010      	b.n	8002260 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d00c      	beq.n	8002260 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <FLASH_WaitForLastOperation+0x38>
 800224c:	f7ff f9fc 	bl	8001648 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d201      	bcs.n	8002260 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e019      	b.n	8002294 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002260:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <FLASH_WaitForLastOperation+0x7c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e8      	bne.n	800223e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <FLASH_WaitForLastOperation+0x7c>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002278:	f000 f8ba 	bl	80023f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e009      	b.n	8002294 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <FLASH_WaitForLastOperation+0x7c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800228c:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <FLASH_WaitForLastOperation+0x7c>)
 800228e:	2201      	movs	r2, #1
 8002290:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
  
}  
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	2000026c 	.word	0x2000026c
 80022a0:	40023c00 	.word	0x40023c00

080022a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80022b0:	4b16      	ldr	r3, [pc, #88]	@ (800230c <FLASH_Program_DoubleWord+0x68>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4a15      	ldr	r2, [pc, #84]	@ (800230c <FLASH_Program_DoubleWord+0x68>)
 80022b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80022bc:	4b13      	ldr	r3, [pc, #76]	@ (800230c <FLASH_Program_DoubleWord+0x68>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4a12      	ldr	r2, [pc, #72]	@ (800230c <FLASH_Program_DoubleWord+0x68>)
 80022c2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80022c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022c8:	4b10      	ldr	r3, [pc, #64]	@ (800230c <FLASH_Program_DoubleWord+0x68>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	4a0f      	ldr	r2, [pc, #60]	@ (800230c <FLASH_Program_DoubleWord+0x68>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80022da:	f3bf 8f6f 	isb	sy
}
 80022de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80022e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	000a      	movs	r2, r1
 80022ee:	2300      	movs	r3, #0
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	3104      	adds	r1, #4
 80022f4:	4613      	mov	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80022f8:	f3bf 8f4f 	dsb	sy
}
 80022fc:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800231a:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <FLASH_Program_Word+0x48>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	4a0e      	ldr	r2, [pc, #56]	@ (8002358 <FLASH_Program_Word+0x48>)
 8002320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002324:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <FLASH_Program_Word+0x48>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <FLASH_Program_Word+0x48>)
 800232c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002330:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002332:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <FLASH_Program_Word+0x48>)
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	4a08      	ldr	r2, [pc, #32]	@ (8002358 <FLASH_Program_Word+0x48>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002344:	f3bf 8f4f 	dsb	sy
}
 8002348:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00

0800235c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002368:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <FLASH_Program_HalfWord+0x48>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <FLASH_Program_HalfWord+0x48>)
 800236e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <FLASH_Program_HalfWord+0x48>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <FLASH_Program_HalfWord+0x48>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <FLASH_Program_HalfWord+0x48>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <FLASH_Program_HalfWord+0x48>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002392:	f3bf 8f4f 	dsb	sy
}
 8002396:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80023b4:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <FLASH_Program_Byte+0x44>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	@ (80023ec <FLASH_Program_Byte+0x44>)
 80023ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <FLASH_Program_Byte+0x44>)
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <FLASH_Program_Byte+0x44>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023c8:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <FLASH_Program_Byte+0x44>)
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	4a07      	ldr	r2, [pc, #28]	@ (80023ec <FLASH_Program_Byte+0x44>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80023da:	f3bf 8f4f 	dsb	sy
}
 80023de:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80023f4:	4b21      	ldr	r3, [pc, #132]	@ (800247c <FLASH_SetErrorCode+0x8c>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002400:	4b1f      	ldr	r3, [pc, #124]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f043 0320 	orr.w	r3, r3, #32
 8002408:	4a1d      	ldr	r2, [pc, #116]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 800240a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <FLASH_SetErrorCode+0x8c>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f043 0310 	orr.w	r3, r3, #16
 8002420:	4a17      	ldr	r2, [pc, #92]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 8002422:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <FLASH_SetErrorCode+0x8c>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 800243a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <FLASH_SetErrorCode+0x8c>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 8002452:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002454:	4b09      	ldr	r3, [pc, #36]	@ (800247c <FLASH_SetErrorCode+0x8c>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <FLASH_SetErrorCode+0x90>)
 800246a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <FLASH_SetErrorCode+0x8c>)
 800246e:	22f2      	movs	r2, #242	@ 0xf2
 8002470:	60da      	str	r2, [r3, #12]
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40023c00 	.word	0x40023c00
 8002480:	2000026c 	.word	0x2000026c

08002484 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002496:	4b30      	ldr	r3, [pc, #192]	@ (8002558 <HAL_FLASHEx_Erase+0xd4>)
 8002498:	7d1b      	ldrb	r3, [r3, #20]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_FLASHEx_Erase+0x1e>
 800249e:	2302      	movs	r3, #2
 80024a0:	e056      	b.n	8002550 <HAL_FLASHEx_Erase+0xcc>
 80024a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002558 <HAL_FLASHEx_Erase+0xd4>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024ac:	f7ff feba 	bl	8002224 <FLASH_WaitForLastOperation>
 80024b0:	4603      	mov	r3, r0
 80024b2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d146      	bne.n	8002548 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 f844 	bl	8002564 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024e0:	f7ff fea0 	bl	8002224 <FLASH_WaitForLastOperation>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <HAL_FLASHEx_Erase+0xd8>)
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	491b      	ldr	r1, [pc, #108]	@ (800255c <HAL_FLASHEx_Erase+0xd8>)
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_FLASHEx_Erase+0xdc>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	610b      	str	r3, [r1, #16]
 80024f4:	e028      	b.n	8002548 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e01c      	b.n	8002538 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4619      	mov	r1, r3
 8002506:	68b8      	ldr	r0, [r7, #8]
 8002508:	f000 f868 	bl	80025dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800250c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002510:	f7ff fe88 	bl	8002224 <FLASH_WaitForLastOperation>
 8002514:	4603      	mov	r3, r0
 8002516:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002518:	4b10      	ldr	r3, [pc, #64]	@ (800255c <HAL_FLASHEx_Erase+0xd8>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	4a0f      	ldr	r2, [pc, #60]	@ (800255c <HAL_FLASHEx_Erase+0xd8>)
 800251e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002522:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	601a      	str	r2, [r3, #0]
          break;
 8002530:	e00a      	b.n	8002548 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3301      	adds	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4413      	add	r3, r2
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d3da      	bcc.n	80024fe <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_FLASHEx_Erase+0xd4>)
 800254a:	2200      	movs	r2, #0
 800254c:	751a      	strb	r2, [r3, #20]

  return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000026c 	.word	0x2000026c
 800255c:	40023c00 	.word	0x40023c00
 8002560:	ffff7ffb 	.word	0xffff7ffb

08002564 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <FLASH_MassErase+0x74>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4a18      	ldr	r2, [pc, #96]	@ (80025d8 <FLASH_MassErase+0x74>)
 8002576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800257a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <FLASH_MassErase+0x74>)
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	4914      	ldr	r1, [pc, #80]	@ (80025d8 <FLASH_MassErase+0x74>)
 8002588:	f248 0304 	movw	r3, #32772	@ 0x8004
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
 8002590:	e00f      	b.n	80025b2 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d106      	bne.n	80025a6 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002598:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <FLASH_MassErase+0x74>)
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <FLASH_MassErase+0x74>)
 800259e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a2:	6113      	str	r3, [r2, #16]
 80025a4:	e005      	b.n	80025b2 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <FLASH_MassErase+0x74>)
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <FLASH_MassErase+0x74>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80025b2:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <FLASH_MassErase+0x74>)
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <FLASH_MassErase+0x74>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80025c4:	f3bf 8f4f 	dsb	sy
}
 80025c8:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e010      	b.n	800261a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d103      	bne.n	8002606 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80025fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	e009      	b.n	800261a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d103      	bne.n	8002614 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800260c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e002      	b.n	800261a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002618:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0b      	cmp	r3, #11
 800261e:	d902      	bls.n	8002626 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	4a14      	ldr	r2, [pc, #80]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 800262c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002630:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	4911      	ldr	r1, [pc, #68]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002644:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002648:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800264a:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4313      	orrs	r3, r2
 8002654:	4a09      	ldr	r2, [pc, #36]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800265c:	4b07      	ldr	r3, [pc, #28]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4a06      	ldr	r2, [pc, #24]	@ (800267c <FLASH_Erase_Sector+0xa0>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002668:	f3bf 8f4f 	dsb	sy
}
 800266c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e175      	b.n	800298c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4013      	ands	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8164 	bne.w	8002986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d005      	beq.n	80026d6 <HAL_GPIO_Init+0x56>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d130      	bne.n	8002738 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800270c:	2201      	movs	r2, #1
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	091b      	lsrs	r3, r3, #4
 8002722:	f003 0201 	and.w	r2, r3, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0303 	and.w	r3, r3, #3
 8002740:	2b03      	cmp	r3, #3
 8002742:	d017      	beq.n	8002774 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d123      	bne.n	80027c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	220f      	movs	r2, #15
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	2203      	movs	r2, #3
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0203 	and.w	r2, r3, #3
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80be 	beq.w	8002986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280a:	4b66      	ldr	r3, [pc, #408]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002822:	4a61      	ldr	r2, [pc, #388]	@ (80029a8 <HAL_GPIO_Init+0x328>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_GPIO_Init+0x32c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a57      	ldr	r2, [pc, #348]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a55      	ldr	r2, [pc, #340]	@ (80029b8 <HAL_GPIO_Init+0x338>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_GPIO_Init+0x33c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a53      	ldr	r2, [pc, #332]	@ (80029c0 <HAL_GPIO_Init+0x340>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x22a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_GPIO_Init+0x344>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a51      	ldr	r2, [pc, #324]	@ (80029c8 <HAL_GPIO_Init+0x348>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x222>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a50      	ldr	r2, [pc, #320]	@ (80029cc <HAL_GPIO_Init+0x34c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x21e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4f      	ldr	r2, [pc, #316]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x21a>
 8002896:	2309      	movs	r3, #9
 8002898:	e012      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289a:	230a      	movs	r3, #10
 800289c:	e010      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00e      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	@ (80029a8 <HAL_GPIO_Init+0x328>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b3d      	ldr	r3, [pc, #244]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b32      	ldr	r3, [pc, #200]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a29      	ldr	r2, [pc, #164]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae86 	bls.w	80026a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40021c00 	.word	0x40021c00
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40022400 	.word	0x40022400
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	807b      	strh	r3, [r7, #2]
 80029e4:	4613      	mov	r3, r2
 80029e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e8:	787b      	ldrb	r3, [r7, #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029f4:	e003      	b.n	80029fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	041a      	lsls	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	619a      	str	r2, [r3, #24]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40007000 	.word	0x40007000

08002a2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b23      	ldr	r3, [pc, #140]	@ (8002ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5a:	f7fe fdf5 	bl	8001648 <HAL_GetTick>
 8002a5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a60:	e009      	b.n	8002a76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a62:	f7fe fdf1 	bl	8001648 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a70:	d901      	bls.n	8002a76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e022      	b.n	8002abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a76:	4b14      	ldr	r3, [pc, #80]	@ (8002ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a82:	d1ee      	bne.n	8002a62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a84:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0f      	ldr	r2, [pc, #60]	@ (8002ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7fe fdda 	bl	8001648 <HAL_GetTick>
 8002a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a96:	e009      	b.n	8002aac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a98:	f7fe fdd6 	bl	8001648 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aa6:	d901      	bls.n	8002aac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e007      	b.n	8002abc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aac:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40007000 	.word	0x40007000

08002acc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e29b      	b.n	800301a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8087 	beq.w	8002bfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af0:	4b96      	ldr	r3, [pc, #600]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afc:	4b93      	ldr	r3, [pc, #588]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62>
 8002b08:	4b90      	ldr	r3, [pc, #576]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b8d      	ldr	r3, [pc, #564]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x130>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d168      	bne.n	8002bfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e275      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x7a>
 8002b38:	4b84      	ldr	r3, [pc, #528]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a83      	ldr	r2, [pc, #524]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x9c>
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7e      	ldr	r2, [pc, #504]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0xc0>
 8002b72:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a75      	ldr	r2, [pc, #468]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b73      	ldr	r3, [pc, #460]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a72      	ldr	r2, [pc, #456]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd8>
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b6c      	ldr	r3, [pc, #432]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6b      	ldr	r2, [pc, #428]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fe fd4c 	bl	8001648 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fd48 	bl	8001648 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e229      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe8>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fd38 	bl	8001648 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fd34 	bl	8001648 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e215      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b57      	ldr	r3, [pc, #348]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x110>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d069      	beq.n	8002cde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0a:	4b50      	ldr	r3, [pc, #320]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b4d      	ldr	r3, [pc, #308]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x190>
 8002c22:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x17a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1e9      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	493d      	ldr	r1, [pc, #244]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e040      	b.n	8002cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d023      	beq.n	8002cac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b39      	ldr	r3, [pc, #228]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a38      	ldr	r2, [pc, #224]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fcea 	bl	8001648 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c78:	f7fe fce6 	bl	8001648 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1c7      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4929      	ldr	r1, [pc, #164]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
 8002caa:	e018      	b.n	8002cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cac:	4b27      	ldr	r3, [pc, #156]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a26      	ldr	r2, [pc, #152]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002cb2:	f023 0301 	bic.w	r3, r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fcc6 	bl	8001648 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fcc2 	bl	8001648 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1a3      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d038      	beq.n	8002d5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf2:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf6:	4a15      	ldr	r2, [pc, #84]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fca3 	bl	8001648 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe fc9f 	bl	8001648 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e180      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x23a>
 8002d24:	e01a      	b.n	8002d5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2a:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <HAL_RCC_OscConfig+0x280>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d32:	f7fe fc89 	bl	8001648 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fc85 	bl	8001648 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d903      	bls.n	8002d50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e166      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
 8002d4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	4b92      	ldr	r3, [pc, #584]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80a4 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6a:	4b8c      	ldr	r3, [pc, #560]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4b89      	ldr	r3, [pc, #548]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	4a88      	ldr	r2, [pc, #544]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d82:	4b86      	ldr	r3, [pc, #536]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d92:	4b83      	ldr	r3, [pc, #524]	@ (8002fa0 <HAL_RCC_OscConfig+0x4d4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d9e:	4b80      	ldr	r3, [pc, #512]	@ (8002fa0 <HAL_RCC_OscConfig+0x4d4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7f      	ldr	r2, [pc, #508]	@ (8002fa0 <HAL_RCC_OscConfig+0x4d4>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fc4d 	bl	8001648 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe fc49 	bl	8001648 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	@ 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e12a      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x4d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x31a>
 8002dd8:	4b70      	ldr	r3, [pc, #448]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ddc:	4a6f      	ldr	r2, [pc, #444]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de4:	e02d      	b.n	8002e42 <HAL_RCC_OscConfig+0x376>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x33c>
 8002dee:	4b6b      	ldr	r3, [pc, #428]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	4a6a      	ldr	r2, [pc, #424]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dfa:	4b68      	ldr	r3, [pc, #416]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dfe:	4a67      	ldr	r2, [pc, #412]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e06:	e01c      	b.n	8002e42 <HAL_RCC_OscConfig+0x376>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x35e>
 8002e10:	4b62      	ldr	r3, [pc, #392]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e14:	4a61      	ldr	r2, [pc, #388]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1c:	4b5f      	ldr	r3, [pc, #380]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a5e      	ldr	r2, [pc, #376]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0x376>
 8002e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e36:	4b59      	ldr	r3, [pc, #356]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3a:	4a58      	ldr	r2, [pc, #352]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d015      	beq.n	8002e76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fbfd 	bl	8001648 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe fbf9 	bl	8001648 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0d8      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	4b4c      	ldr	r3, [pc, #304]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ee      	beq.n	8002e52 <HAL_RCC_OscConfig+0x386>
 8002e74:	e014      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe fbe7 	bl	8001648 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe fbe3 	bl	8001648 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e0c2      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ee      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	4a3c      	ldr	r2, [pc, #240]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80ae 	beq.w	8003018 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebc:	4b37      	ldr	r3, [pc, #220]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d06d      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d14b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed0:	4b32      	ldr	r3, [pc, #200]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a31      	ldr	r2, [pc, #196]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fbb4 	bl	8001648 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee4:	f7fe fbb0 	bl	8001648 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e091      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef6:	4b29      	ldr	r3, [pc, #164]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	019b      	lsls	r3, r3, #6
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	061b      	lsls	r3, r3, #24
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	071b      	lsls	r3, r3, #28
 8002f2e:	491b      	ldr	r1, [pc, #108]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a18      	ldr	r2, [pc, #96]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fb82 	bl	8001648 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fb7e 	bl	8001648 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e05f      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x47c>
 8002f66:	e057      	b.n	8003018 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fb68 	bl	8001648 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fb64 	bl	8001648 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e045      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x4b0>
 8002f9a:	e03d      	b.n	8003018 <HAL_RCC_OscConfig+0x54c>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8003024 <HAL_RCC_OscConfig+0x558>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d030      	beq.n	8003014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d129      	bne.n	8003014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d122      	bne.n	8003014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d119      	bne.n	8003014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	3b01      	subs	r3, #1
 8002fee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d10f      	bne.n	8003014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d107      	bne.n	8003014 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0d0      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b67      	ldr	r3, [pc, #412]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	4965      	ldr	r1, [pc, #404]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b63      	ldr	r3, [pc, #396]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0b8      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d005      	beq.n	8003094 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003088:	4b59      	ldr	r3, [pc, #356]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4a58      	ldr	r2, [pc, #352]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 800308e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a0:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b50      	ldr	r3, [pc, #320]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	494d      	ldr	r1, [pc, #308]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d040      	beq.n	800314c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d115      	bne.n	800310a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e07f      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e073      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fa:	4b3d      	ldr	r3, [pc, #244]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06b      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310a:	4b39      	ldr	r3, [pc, #228]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 0203 	bic.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4936      	ldr	r1, [pc, #216]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800311c:	f7fe fa94 	bl	8001648 <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fa90 	bl	8001648 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e053      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	4b2d      	ldr	r3, [pc, #180]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 020c 	and.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	429a      	cmp	r2, r3
 800314a:	d1eb      	bne.n	8003124 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800314c:	4b27      	ldr	r3, [pc, #156]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d210      	bcs.n	800317c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b24      	ldr	r3, [pc, #144]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	4922      	ldr	r1, [pc, #136]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e032      	b.n	80031e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003188:	4b19      	ldr	r3, [pc, #100]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4916      	ldr	r1, [pc, #88]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	490e      	ldr	r1, [pc, #56]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ba:	f000 f821 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	490a      	ldr	r1, [pc, #40]	@ (80031f4 <HAL_RCC_ClockConfig+0x1cc>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	fa22 f303 	lsr.w	r3, r2, r3
 80031d2:	4a09      	ldr	r2, [pc, #36]	@ (80031f8 <HAL_RCC_ClockConfig+0x1d0>)
 80031d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1d4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe f9f0 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023c00 	.word	0x40023c00
 80031f0:	40023800 	.word	0x40023800
 80031f4:	0800b398 	.word	0x0800b398
 80031f8:	20000000 	.word	0x20000000
 80031fc:	20000004 	.word	0x20000004

08003200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003204:	b094      	sub	sp, #80	@ 0x50
 8003206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	647b      	str	r3, [r7, #68]	@ 0x44
 800320c:	2300      	movs	r3, #0
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	2300      	movs	r3, #0
 8003212:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003218:	4b79      	ldr	r3, [pc, #484]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 030c 	and.w	r3, r3, #12
 8003220:	2b08      	cmp	r3, #8
 8003222:	d00d      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x40>
 8003224:	2b08      	cmp	r3, #8
 8003226:	f200 80e1 	bhi.w	80033ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x34>
 800322e:	2b04      	cmp	r3, #4
 8003230:	d003      	beq.n	800323a <HAL_RCC_GetSysClockFreq+0x3a>
 8003232:	e0db      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003234:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x204>)
 8003236:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003238:	e0db      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323a:	4b73      	ldr	r3, [pc, #460]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x208>)
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323e:	e0d8      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003240:	4b6f      	ldr	r3, [pc, #444]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003248:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800324a:	4b6d      	ldr	r3, [pc, #436]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b6a      	ldr	r3, [pc, #424]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	2200      	movs	r2, #0
 800325e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003260:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	633b      	str	r3, [r7, #48]	@ 0x30
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
 800326e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	0159      	lsls	r1, r3, #5
 8003280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003284:	0150      	lsls	r0, r2, #5
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4621      	mov	r1, r4
 800328c:	1a51      	subs	r1, r2, r1
 800328e:	6139      	str	r1, [r7, #16]
 8003290:	4629      	mov	r1, r5
 8003292:	eb63 0301 	sbc.w	r3, r3, r1
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a4:	4659      	mov	r1, fp
 80032a6:	018b      	lsls	r3, r1, #6
 80032a8:	4651      	mov	r1, sl
 80032aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ae:	4651      	mov	r1, sl
 80032b0:	018a      	lsls	r2, r1, #6
 80032b2:	4651      	mov	r1, sl
 80032b4:	ebb2 0801 	subs.w	r8, r2, r1
 80032b8:	4659      	mov	r1, fp
 80032ba:	eb63 0901 	sbc.w	r9, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d2:	4690      	mov	r8, r2
 80032d4:	4699      	mov	r9, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	eb18 0303 	adds.w	r3, r8, r3
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	462b      	mov	r3, r5
 80032e0:	eb49 0303 	adc.w	r3, r9, r3
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032f2:	4629      	mov	r1, r5
 80032f4:	024b      	lsls	r3, r1, #9
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032fc:	4621      	mov	r1, r4
 80032fe:	024a      	lsls	r2, r1, #9
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003306:	2200      	movs	r2, #0
 8003308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800330a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800330c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003310:	f7fc ffe6 	bl	80002e0 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800331c:	e058      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331e:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	099b      	lsrs	r3, r3, #6
 8003324:	2200      	movs	r2, #0
 8003326:	4618      	mov	r0, r3
 8003328:	4611      	mov	r1, r2
 800332a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	2300      	movs	r3, #0
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
 8003334:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	f04f 0000 	mov.w	r0, #0
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	0159      	lsls	r1, r3, #5
 8003346:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800334a:	0150      	lsls	r0, r2, #5
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4641      	mov	r1, r8
 8003352:	ebb2 0a01 	subs.w	sl, r2, r1
 8003356:	4649      	mov	r1, r9
 8003358:	eb63 0b01 	sbc.w	fp, r3, r1
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003368:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800336c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003370:	ebb2 040a 	subs.w	r4, r2, sl
 8003374:	eb63 050b 	sbc.w	r5, r3, fp
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	00eb      	lsls	r3, r5, #3
 8003382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003386:	00e2      	lsls	r2, r4, #3
 8003388:	4614      	mov	r4, r2
 800338a:	461d      	mov	r5, r3
 800338c:	4643      	mov	r3, r8
 800338e:	18e3      	adds	r3, r4, r3
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	464b      	mov	r3, r9
 8003394:	eb45 0303 	adc.w	r3, r5, r3
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a6:	4629      	mov	r1, r5
 80033a8:	028b      	lsls	r3, r1, #10
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b0:	4621      	mov	r1, r4
 80033b2:	028a      	lsls	r2, r1, #10
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ba:	2200      	movs	r2, #0
 80033bc:	61bb      	str	r3, [r7, #24]
 80033be:	61fa      	str	r2, [r7, #28]
 80033c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c4:	f7fc ff8c 	bl	80002e0 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3750      	adds	r7, #80	@ 0x50
 80033f8:	46bd      	mov	sp, r7
 80033fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	007a1200 	.word	0x007a1200

0800340c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	@ (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	@ (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	0800b3a8 	.word	0x0800b3a8

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffdc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	@ (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0b5b      	lsrs	r3, r3, #13
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	@ (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	0800b3a8 	.word	0x0800b3a8

08003474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800349c:	4b69      	ldr	r3, [pc, #420]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a68      	ldr	r2, [pc, #416]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80034a6:	6093      	str	r3, [r2, #8]
 80034a8:	4b66      	ldr	r3, [pc, #408]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	4964      	ldr	r1, [pc, #400]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d017      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	4959      	ldr	r1, [pc, #356]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ec:	d101      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d017      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800350a:	4b4e      	ldr	r3, [pc, #312]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003510:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	494a      	ldr	r1, [pc, #296]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003528:	d101      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003536:	2301      	movs	r3, #1
 8003538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003546:	2301      	movs	r3, #1
 8003548:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 808b 	beq.w	800366e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003558:	4b3a      	ldr	r3, [pc, #232]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	4a39      	ldr	r2, [pc, #228]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003562:	6413      	str	r3, [r2, #64]	@ 0x40
 8003564:	4b37      	ldr	r3, [pc, #220]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356c:	60bb      	str	r3, [r7, #8]
 800356e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003570:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a34      	ldr	r2, [pc, #208]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800357a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fe f864 	bl	8001648 <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fe f860 	bl	8001648 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	@ 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e38f      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003596:	4b2c      	ldr	r3, [pc, #176]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035a2:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035aa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d035      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d02e      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035c0:	4b20      	ldr	r3, [pc, #128]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035d4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	4a1a      	ldr	r2, [pc, #104]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035e2:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035e8:	4b16      	ldr	r3, [pc, #88]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d114      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f828 	bl	8001648 <HAL_GetTick>
 80035f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe f824 	bl	8001648 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e351      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003612:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ee      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800362a:	d111      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800362c:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800363a:	400b      	ands	r3, r1
 800363c:	4901      	ldr	r1, [pc, #4]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
 8003642:	e00b      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003644:	40023800 	.word	0x40023800
 8003648:	40007000 	.word	0x40007000
 800364c:	0ffffcff 	.word	0x0ffffcff
 8003650:	4bac      	ldr	r3, [pc, #688]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4aab      	ldr	r2, [pc, #684]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003656:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800365a:	6093      	str	r3, [r2, #8]
 800365c:	4ba9      	ldr	r3, [pc, #676]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800365e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	49a6      	ldr	r1, [pc, #664]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366a:	4313      	orrs	r3, r2
 800366c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d010      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800367a:	4ba2      	ldr	r3, [pc, #648]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003680:	4aa0      	ldr	r2, [pc, #640]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003686:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800368a:	4b9e      	ldr	r3, [pc, #632]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003694:	499b      	ldr	r1, [pc, #620]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a8:	4b96      	ldr	r3, [pc, #600]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b6:	4993      	ldr	r1, [pc, #588]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d8:	498a      	ldr	r1, [pc, #552]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ec:	4b85      	ldr	r3, [pc, #532]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036fa:	4982      	ldr	r1, [pc, #520]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800370e:	4b7d      	ldr	r3, [pc, #500]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003714:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371c:	4979      	ldr	r1, [pc, #484]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003730:	4b74      	ldr	r3, [pc, #464]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	4971      	ldr	r1, [pc, #452]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003752:	4b6c      	ldr	r3, [pc, #432]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003758:	f023 020c 	bic.w	r2, r3, #12
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003760:	4968      	ldr	r1, [pc, #416]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003774:	4b63      	ldr	r3, [pc, #396]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003782:	4960      	ldr	r1, [pc, #384]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003796:	4b5b      	ldr	r3, [pc, #364]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a4:	4957      	ldr	r1, [pc, #348]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037b8:	4b52      	ldr	r3, [pc, #328]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c6:	494f      	ldr	r1, [pc, #316]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037da:	4b4a      	ldr	r3, [pc, #296]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e8:	4946      	ldr	r1, [pc, #280]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037fc:	4b41      	ldr	r3, [pc, #260]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003802:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380a:	493e      	ldr	r1, [pc, #248]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800381e:	4b39      	ldr	r3, [pc, #228]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382c:	4935      	ldr	r1, [pc, #212]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003840:	4b30      	ldr	r3, [pc, #192]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003846:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800384e:	492d      	ldr	r1, [pc, #180]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d011      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003862:	4b28      	ldr	r3, [pc, #160]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003868:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003870:	4924      	ldr	r1, [pc, #144]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800387c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038a2:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b0:	4914      	ldr	r1, [pc, #80]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00b      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d4:	490b      	ldr	r1, [pc, #44]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f8:	4902      	ldr	r1, [pc, #8]	@ (8003904 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00b      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003914:	4b8a      	ldr	r3, [pc, #552]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003924:	4986      	ldr	r1, [pc, #536]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00b      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003938:	4b81      	ldr	r3, [pc, #516]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800393e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003948:	497d      	ldr	r1, [pc, #500]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d006      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80d6 	beq.w	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003964:	4b76      	ldr	r3, [pc, #472]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a75      	ldr	r2, [pc, #468]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800396e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003970:	f7fd fe6a 	bl	8001648 <HAL_GetTick>
 8003974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003978:	f7fd fe66 	bl	8001648 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e195      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800398a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d021      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11d      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039aa:	4b65      	ldr	r3, [pc, #404]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039b8:	4b61      	ldr	r3, [pc, #388]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	041b      	lsls	r3, r3, #16
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	061b      	lsls	r3, r3, #24
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4958      	ldr	r1, [pc, #352]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02e      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a10:	d129      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a12:	4b4b      	ldr	r3, [pc, #300]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a20:	4b47      	ldr	r3, [pc, #284]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a26:	0f1b      	lsrs	r3, r3, #28
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	019a      	lsls	r2, r3, #6
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	061b      	lsls	r3, r3, #24
 8003a40:	431a      	orrs	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	071b      	lsls	r3, r3, #28
 8003a46:	493e      	ldr	r1, [pc, #248]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a54:	f023 021f 	bic.w	r2, r3, #31
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	4938      	ldr	r1, [pc, #224]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01d      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a72:	4b33      	ldr	r3, [pc, #204]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a78:	0e1b      	lsrs	r3, r3, #24
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a80:	4b2f      	ldr	r3, [pc, #188]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	019a      	lsls	r2, r3, #6
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	4926      	ldr	r1, [pc, #152]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d011      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	019a      	lsls	r2, r3, #6
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	061b      	lsls	r3, r3, #24
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	071b      	lsls	r3, r3, #28
 8003ad6:	491a      	ldr	r1, [pc, #104]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ade:	4b18      	ldr	r3, [pc, #96]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aea:	f7fd fdad 	bl	8001648 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003af2:	f7fd fda9 	bl	8001648 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	@ 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0d8      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b04:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	f040 80ce 	bne.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a08      	ldr	r2, [pc, #32]	@ (8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fd fd90 	bl	8001648 <HAL_GetTick>
 8003b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b2c:	f7fd fd8c 	bl	8001648 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d904      	bls.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0bb      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b44:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b50:	d0ec      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02e      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d12a      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b7a:	4b51      	ldr	r3, [pc, #324]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b88:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	0f1b      	lsrs	r3, r3, #28
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	019a      	lsls	r2, r3, #6
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	071b      	lsls	r3, r3, #28
 8003bae:	4944      	ldr	r1, [pc, #272]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bb6:	4b42      	ldr	r3, [pc, #264]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bbc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	493d      	ldr	r1, [pc, #244]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003be4:	d11d      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003be6:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bec:	0e1b      	lsrs	r3, r3, #24
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bf4:	4b32      	ldr	r3, [pc, #200]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	019a      	lsls	r2, r3, #6
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	061b      	lsls	r3, r3, #24
 8003c14:	431a      	orrs	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	071b      	lsls	r3, r3, #28
 8003c1a:	4929      	ldr	r1, [pc, #164]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c2e:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	0e1b      	lsrs	r3, r3, #24
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c3c:	4b20      	ldr	r3, [pc, #128]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	019a      	lsls	r2, r3, #6
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	041b      	lsls	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	071b      	lsls	r3, r3, #28
 8003c62:	4917      	ldr	r1, [pc, #92]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c6a:	4b15      	ldr	r3, [pc, #84]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	4911      	ldr	r1, [pc, #68]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c80:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8c:	f7fd fcdc 	bl	8001648 <HAL_GetTick>
 8003c90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c94:	f7fd fcd8 	bl	8001648 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e007      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ca6:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb2:	d1ef      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e01c      	b.n	8003d10 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	795b      	ldrb	r3, [r3, #5]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd f9b8 	bl	800105c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0204 	orr.w	r2, r2, #4
 8003d00:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d105      	bne.n	8003d42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd f9ad 	bl	800109c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2203      	movs	r2, #3
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f814 	bl	8003d78 <HAL_SD_InitCard>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00a      	b.n	8003d70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d78:	b5b0      	push	{r4, r5, r7, lr}
 8003d7a:	b08e      	sub	sp, #56	@ 0x38
 8003d7c:	af04      	add	r7, sp, #16
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003d94:	2376      	movs	r3, #118	@ 0x76
 8003d96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681d      	ldr	r5, [r3, #0]
 8003d9c:	466c      	mov	r4, sp
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003da6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003db0:	4628      	mov	r0, r5
 8003db2:	f001 fe31 	bl	8005a18 <SDMMC_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e059      	b.n	8003e7c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fe65 	bl	8005aac <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003df2:	2002      	movs	r0, #2
 8003df4:	f7fd fc34 	bl	8001660 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 ff59 	bl	8004cb0 <SD_PowerON>
 8003dfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02e      	b.n	8003e7c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fe78 	bl	8004b14 <SD_InitCard>
 8003e24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00b      	beq.n	8003e44 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e01b      	b.n	8003e7c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 febf 	bl	8005bd0 <SDMMC_CmdBlockLength>
 8003e52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00f      	beq.n	8003e7a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a09      	ldr	r2, [pc, #36]	@ (8003e84 <HAL_SD_InitCard+0x10c>)
 8003e60:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3728      	adds	r7, #40	@ 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bdb0      	pop	{r4, r5, r7, pc}
 8003e84:	004005ff 	.word	0x004005ff

08003e88 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08c      	sub	sp, #48	@ 0x30
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d107      	bne.n	8003eb0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0c3      	b.n	8004038 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	f040 80bc 	bne.w	8004036 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	441a      	add	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d907      	bls.n	8003ee2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e0aa      	b.n	8004038 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8003f00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	4a4e      	ldr	r2, [pc, #312]	@ (8004040 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003f08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004044 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003f10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	2200      	movs	r2, #0
 8003f18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3380      	adds	r3, #128	@ 0x80
 8003f48:	4619      	mov	r1, r3
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	025b      	lsls	r3, r3, #9
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	f7fd fde1 	bl	8001b18 <HAL_DMA_Start_IT>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d017      	beq.n	8003f8c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8003f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a35      	ldr	r2, [pc, #212]	@ (8004048 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003f72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e055      	b.n	8004038 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d002      	beq.n	8003faa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	025b      	lsls	r3, r3, #9
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	025b      	lsls	r3, r3, #9
 8003fb4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003fb6:	2390      	movs	r3, #144	@ 0x90
 8003fb8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f107 0210 	add.w	r2, r7, #16
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 fdd1 	bl	8005b78 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d90a      	bls.n	8003ff2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2282      	movs	r2, #130	@ 0x82
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 fe35 	bl	8005c58 <SDMMC_CmdReadMultiBlock>
 8003fee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003ff0:	e009      	b.n	8004006 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2281      	movs	r2, #129	@ 0x81
 8003ff6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 fe08 	bl	8005c14 <SDMMC_CmdReadSingleBlock>
 8004004:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0d      	ldr	r2, [pc, #52]	@ (8004048 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004012:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401a:	431a      	orrs	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e002      	b.n	8004038 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3730      	adds	r7, #48	@ 0x30
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	08004923 	.word	0x08004923
 8004044:	08004995 	.word	0x08004995
 8004048:	004005ff 	.word	0x004005ff

0800404c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	@ 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d107      	bne.n	8004074 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0c6      	b.n	8004202 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	f040 80bf 	bne.w	8004200 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	441a      	add	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004092:	429a      	cmp	r2, r3
 8004094:	d907      	bls.n	80040a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0ad      	b.n	8004202 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2203      	movs	r2, #3
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2200      	movs	r2, #0
 80040b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 021a 	orr.w	r2, r2, #26
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	4a50      	ldr	r2, [pc, #320]	@ (800420c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80040cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	4a4f      	ldr	r2, [pc, #316]	@ (8004210 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80040d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	2200      	movs	r2, #0
 80040dc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d002      	beq.n	80040ec <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	025b      	lsls	r3, r3, #9
 80040ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d90a      	bls.n	8004108 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	22a0      	movs	r2, #160	@ 0xa0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fdee 	bl	8005ce0 <SDMMC_CmdWriteMultiBlock>
 8004104:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004106:	e009      	b.n	800411c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2290      	movs	r2, #144	@ 0x90
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004114:	4618      	mov	r0, r3
 8004116:	f001 fdc1 	bl	8005c9c <SDMMC_CmdWriteSingleBlock>
 800411a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d012      	beq.n	8004148 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3b      	ldr	r2, [pc, #236]	@ (8004214 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004128:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800412e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004130:	431a      	orrs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e05c      	b.n	8004202 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	2240      	movs	r2, #64	@ 0x40
 800415e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3380      	adds	r3, #128	@ 0x80
 8004188:	461a      	mov	r2, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	025b      	lsls	r3, r3, #9
 800418e:	089b      	lsrs	r3, r3, #2
 8004190:	f7fd fcc2 	bl	8001b18 <HAL_DMA_Start_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01a      	beq.n	80041d0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 021a 	bic.w	r2, r2, #26
 80041a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80041b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e018      	b.n	8004202 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	025b      	lsls	r3, r3, #9
 80041da:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80041dc:	2390      	movs	r3, #144	@ 0x90
 80041de:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80041e8:	2301      	movs	r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f107 0210 	add.w	r2, r7, #16
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fcbe 	bl	8005b78 <SDMMC_ConfigData>

      return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	3730      	adds	r7, #48	@ 0x30
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	080048f9 	.word	0x080048f9
 8004210:	08004995 	.word	0x08004995
 8004214:	004005ff 	.word	0x004005ff

08004218 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_SD_IRQHandler+0x2e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fdec 	bl	8004e1c <SD_Read_IT>
 8004244:	e15a      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 808d 	beq.w	8004370 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800425e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b9a      	ldr	r3, [pc, #616]	@ (80044d4 <HAL_SD_IRQHandler+0x2bc>)
 800426c:	400b      	ands	r3, r1
 800426e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d039      	beq.n	80042fe <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_SD_IRQHandler+0x86>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d011      	beq.n	80042c2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fd3e 	bl	8005d24 <SDMMC_CmdStopTransfer>
 80042a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d008      	beq.n	80042c2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f921 	bl	8004504 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_SD_IRQHandler+0xd6>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f002 f95c 	bl	80065ac <HAL_SD_RxCpltCallback>
 80042f4:	e102      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f002 f94e 	bl	8006598 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042fc:	e0fe      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80f9 	beq.w	80044fc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d011      	beq.n	8004338 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fd03 	bl	8005d24 <SDMMC_CmdStopTransfer>
 800431e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8e6 	bl	8004504 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 80dc 	bne.w	80044fc <HAL_SD_IRQHandler+0x2e4>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 80d6 	bne.w	80044fc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0208 	bic.w	r2, r2, #8
 800435e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f002 f915 	bl	8006598 <HAL_SD_TxCpltCallback>
}
 800436e:	e0c5      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_SD_IRQHandler+0x178>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fd98 	bl	8004ebe <SD_Write_IT>
 800438e:	e0b5      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004396:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80ae 	beq.w	80044fc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b2:	f043 0202 	orr.w	r2, r3, #2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	f043 0208 	orr.w	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004400:	f043 0210 	orr.w	r2, r3, #16
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004410:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004420:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f001 fc7c 	bl	8005d24 <SDMMC_CmdStopTransfer>
 800442c:	4602      	mov	r2, r0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f857 	bl	8004504 <HAL_SD_ErrorCallback>
}
 8004456:	e051      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d04c      	beq.n	80044fc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_SD_IRQHandler+0x25e>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	4a17      	ldr	r2, [pc, #92]	@ (80044d8 <HAL_SD_IRQHandler+0x2c0>)
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fba8 	bl	8001bd8 <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d036      	beq.n	80044fc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fad0 	bl	8004a38 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004498:	e030      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <HAL_SD_IRQHandler+0x296>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d018      	beq.n	80044e0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	4a0a      	ldr	r2, [pc, #40]	@ (80044dc <HAL_SD_IRQHandler+0x2c4>)
 80044b4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd fb8c 	bl	8001bd8 <HAL_DMA_Abort_IT>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d01a      	beq.n	80044fc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 faeb 	bl	8004aa6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044d0:	e014      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
 80044d2:	bf00      	nop
 80044d4:	ffff3ec5 	.word	0xffff3ec5
 80044d8:	08004a39 	.word	0x08004a39
 80044dc:	08004aa7 	.word	0x08004aa7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f002 f845 	bl	8006584 <HAL_SD_AbortCallback>
}
 80044fa:	e7ff      	b.n	80044fc <HAL_SD_IRQHandler+0x2e4>
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004526:	0f9b      	lsrs	r3, r3, #30
 8004528:	b2da      	uxtb	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004532:	0e9b      	lsrs	r3, r3, #26
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	b2da      	uxtb	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004544:	0e1b      	lsrs	r3, r3, #24
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	b2da      	uxtb	r2, r3
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	b2da      	uxtb	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	b2da      	uxtb	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800456e:	b2da      	uxtb	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004578:	0d1b      	lsrs	r3, r3, #20
 800457a:	b29a      	uxth	r2, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	b2da      	uxtb	r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004596:	0bdb      	lsrs	r3, r3, #15
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a8:	0b9b      	lsrs	r3, r3, #14
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ba:	0b5b      	lsrs	r3, r3, #13
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045cc:	0b1b      	lsrs	r3, r3, #12
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2200      	movs	r2, #0
 80045de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d163      	bne.n	80046b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ec:	009a      	lsls	r2, r3, #2
 80045ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045f2:	4013      	ands	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80045f8:	0f92      	lsrs	r2, r2, #30
 80045fa:	431a      	orrs	r2, r3
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004604:	0edb      	lsrs	r3, r3, #27
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	b2da      	uxtb	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004616:	0e1b      	lsrs	r3, r3, #24
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	b2da      	uxtb	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004628:	0d5b      	lsrs	r3, r3, #21
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	b2da      	uxtb	r2, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800463a:	0c9b      	lsrs	r3, r3, #18
 800463c:	b2db      	uxtb	r3, r3
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	b2da      	uxtb	r2, r3
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800464c:	0bdb      	lsrs	r3, r3, #15
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	b2da      	uxtb	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	7e1b      	ldrb	r3, [r3, #24]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	3302      	adds	r3, #2
 8004670:	2201      	movs	r2, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800467a:	fb03 f202 	mul.w	r2, r3, r2
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	7a1b      	ldrb	r3, [r3, #8]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800469c:	0a52      	lsrs	r2, r2, #9
 800469e:	fb03 f202 	mul.w	r2, r3, r2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80046ae:	e031      	b.n	8004714 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d11d      	bne.n	80046f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	431a      	orrs	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	3301      	adds	r3, #1
 80046d4:	029a      	lsls	r2, r3, #10
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80046f2:	e00f      	b.n	8004714 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a58      	ldr	r2, [pc, #352]	@ (800485c <HAL_SD_GetCardCSD+0x344>)
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e09d      	b.n	8004850 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004718:	0b9b      	lsrs	r3, r3, #14
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	b2da      	uxtb	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472a:	09db      	lsrs	r3, r3, #7
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004732:	b2da      	uxtb	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004742:	b2da      	uxtb	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	0fdb      	lsrs	r3, r3, #31
 800474e:	b2da      	uxtb	r2, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004758:	0f5b      	lsrs	r3, r3, #29
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	b2da      	uxtb	r2, r3
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	0e9b      	lsrs	r3, r3, #26
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b2da      	uxtb	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477c:	0d9b      	lsrs	r3, r3, #22
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	b2da      	uxtb	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478e:	0d5b      	lsrs	r3, r3, #21
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	b2da      	uxtb	r2, r3
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	0c1b      	lsrs	r3, r3, #16
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	0bdb      	lsrs	r3, r3, #15
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	0b9b      	lsrs	r3, r3, #14
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	0b5b      	lsrs	r3, r3, #13
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	0b1b      	lsrs	r3, r3, #12
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	b2da      	uxtb	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	b2da      	uxtb	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	0a1b      	lsrs	r3, r3, #8
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	b2da      	uxtb	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800483e:	b2da      	uxtb	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	004005ff 	.word	0x004005ff

08004860 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa7e 	bl	8004dcc <SD_SendStatus>
 80048d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	0a5b      	lsrs	r3, r3, #9
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048ee:	693b      	ldr	r3, [r7, #16]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004914:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	2b82      	cmp	r3, #130	@ 0x82
 8004936:	d111      	bne.n	800495c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f9f1 	bl	8005d24 <SDMMC_CmdStopTransfer>
 8004942:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	431a      	orrs	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fdd4 	bl	8004504 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0208 	bic.w	r2, r2, #8
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f001 fe11 	bl	80065ac <HAL_SD_RxCpltCallback>
#endif
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fd fac4 	bl	8001f30 <HAL_DMA_GetError>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d03e      	beq.n	8004a2c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049bc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d002      	beq.n	80049ca <SD_DMAError+0x36>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d12d      	bne.n	8004a26 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a19      	ldr	r2, [pc, #100]	@ (8004a34 <SD_DMAError+0xa0>)
 80049d0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80049e0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7ff ff62 	bl	80048b8 <HAL_SD_GetCardState>
 80049f4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b06      	cmp	r3, #6
 80049fa:	d002      	beq.n	8004a02 <SD_DMAError+0x6e>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d10a      	bne.n	8004a18 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 f98c 	bl	8005d24 <SDMMC_CmdStopTransfer>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	431a      	orrs	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004a26:	6978      	ldr	r0, [r7, #20]
 8004a28:	f7ff fd6c 	bl	8004504 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	004005ff 	.word	0x004005ff

08004a38 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004a4e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ff31 	bl	80048b8 <HAL_SD_GetCardState>
 8004a56:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b06      	cmp	r3, #6
 8004a6a:	d002      	beq.n	8004a72 <SD_DMATxAbort+0x3a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	d10a      	bne.n	8004a88 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 f954 	bl	8005d24 <SDMMC_CmdStopTransfer>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d103      	bne.n	8004a98 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f001 fd77 	bl	8006584 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004a96:	e002      	b.n	8004a9e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff fd33 	bl	8004504 <HAL_SD_ErrorCallback>
}
 8004a9e:	bf00      	nop
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fefa 	bl	80048b8 <HAL_SD_GetCardState>
 8004ac4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d002      	beq.n	8004ae0 <SD_DMARxAbort+0x3a>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b05      	cmp	r3, #5
 8004ade:	d10a      	bne.n	8004af6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 f91d 	bl	8005d24 <SDMMC_CmdStopTransfer>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f001 fd40 	bl	8006584 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b04:	e002      	b.n	8004b0c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fcfc 	bl	8004504 <HAL_SD_ErrorCallback>
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b14:	b5b0      	push	{r4, r5, r7, lr}
 8004b16:	b094      	sub	sp, #80	@ 0x50
 8004b18:	af04      	add	r7, sp, #16
 8004b1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 ffcf 	bl	8005ac8 <SDMMC_GetPowerState>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b30:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b34:	e0b8      	b.n	8004ca8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d02f      	beq.n	8004b9e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f9b6 	bl	8005eb4 <SDMMC_CmdSendCID>
 8004b48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <SD_InitCard+0x40>
    {
      return errorstate;
 8004b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b52:	e0a9      	b.n	8004ca8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fff9 	bl	8005b52 <SDMMC_GetResponse>
 8004b60:	4602      	mov	r2, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2104      	movs	r1, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fff0 	bl	8005b52 <SDMMC_GetResponse>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2108      	movs	r1, #8
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 ffe7 	bl	8005b52 <SDMMC_GetResponse>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	210c      	movs	r1, #12
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 ffde 	bl	8005b52 <SDMMC_GetResponse>
 8004b96:	4602      	mov	r2, r0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d00d      	beq.n	8004bc2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f107 020e 	add.w	r2, r7, #14
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 f9bc 	bl	8005f2e <SDMMC_CmdSetRelAdd>
 8004bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	e072      	b.n	8004ca8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d036      	beq.n	8004c38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bda:	041b      	lsls	r3, r3, #16
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f001 f986 	bl	8005ef0 <SDMMC_CmdSendCSD>
 8004be4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bee:	e05b      	b.n	8004ca8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 ffab 	bl	8005b52 <SDMMC_GetResponse>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2104      	movs	r1, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 ffa2 	bl	8005b52 <SDMMC_GetResponse>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2108      	movs	r1, #8
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 ff99 	bl	8005b52 <SDMMC_GetResponse>
 8004c20:	4602      	mov	r2, r0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	210c      	movs	r1, #12
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ff90 	bl	8005b52 <SDMMC_GetResponse>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2104      	movs	r1, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 ff87 	bl	8005b52 <SDMMC_GetResponse>
 8004c44:	4603      	mov	r3, r0
 8004c46:	0d1a      	lsrs	r2, r3, #20
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004c4c:	f107 0310 	add.w	r3, r7, #16
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fc60 	bl	8004518 <HAL_SD_GetCardCSD>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004c62:	e021      	b.n	8004ca8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	2200      	movs	r2, #0
 8004c70:	461c      	mov	r4, r3
 8004c72:	4615      	mov	r5, r2
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	4608      	mov	r0, r1
 8004c7a:	f001 f875 	bl	8005d68 <SDMMC_CmdSelDesel>
 8004c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <SD_InitCard+0x176>
  {
    return errorstate;
 8004c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c88:	e00e      	b.n	8004ca8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	466c      	mov	r4, sp
 8004c92:	f103 0210 	add.w	r2, r3, #16
 8004c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 feb9 	bl	8005a18 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3740      	adds	r7, #64	@ 0x40
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bdb0      	pop	{r4, r5, r7, pc}

08004cb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f870 	bl	8005dae <SDMMC_CmdGoIdleState>
 8004cce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <SD_PowerON+0x2a>
  {
    return errorstate;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	e072      	b.n	8004dc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 f883 	bl	8005dea <SDMMC_CmdOperCond>
 8004ce4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 f859 	bl	8005dae <SDMMC_CmdGoIdleState>
 8004cfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d004      	beq.n	8004d0e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	e05b      	b.n	8004dc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d137      	bne.n	8004d86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 f883 	bl	8005e28 <SDMMC_CmdAppCommand>
 8004d22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02d      	beq.n	8004d86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d2e:	e047      	b.n	8004dc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 f876 	bl	8005e28 <SDMMC_CmdAppCommand>
 8004d3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <SD_PowerON+0x98>
    {
      return errorstate;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e03b      	b.n	8004dc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	491e      	ldr	r1, [pc, #120]	@ (8004dc8 <SD_PowerON+0x118>)
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f88c 	bl	8005e6c <SDMMC_CmdAppOperCommand>
 8004d54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d60:	e02e      	b.n	8004dc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fef2 	bl	8005b52 <SDMMC_GetResponse>
 8004d6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	0fdb      	lsrs	r3, r3, #31
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <SD_PowerON+0xcc>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <SD_PowerON+0xce>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]

    count++;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d802      	bhi.n	8004d96 <SD_PowerON+0xe6>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0cc      	beq.n	8004d30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d902      	bls.n	8004da6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004da0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004da4:	e00c      	b.n	8004dc0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004db6:	e002      	b.n	8004dbe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	c1100000 	.word	0xc1100000

08004dcc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004de0:	e018      	b.n	8004e14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f001 f8be 	bl	8005f70 <SDMMC_CmdSendStatus>
 8004df4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	e009      	b.n	8004e14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fea3 	bl	8005b52 <SDMMC_GetResponse>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d03f      	beq.n	8004eb6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e033      	b.n	8004ea4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fe15 	bl	8005a70 <SDMMC_ReadFIFO>
 8004e46:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	0a1b      	lsrs	r3, r3, #8
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3301      	adds	r3, #1
 8004e96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b07      	cmp	r3, #7
 8004ea8:	d9c8      	bls.n	8004e3c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d043      	beq.n	8004f60 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e037      	b.n	8004f4e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	021a      	lsls	r2, r3, #8
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	041a      	lsls	r2, r3, #16
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	061a      	lsls	r2, r3, #24
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	3b01      	subs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f107 0208 	add.w	r2, r7, #8
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fda1 	bl	8005a8a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b07      	cmp	r3, #7
 8004f52:	d9c4      	bls.n	8004ede <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8004f60:	bf00      	nop
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e040      	b.n	8004ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc f980 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2224      	movs	r2, #36	@ 0x24
 8004f94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0201 	bic.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fb16 	bl	80055e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8af 	bl	8005118 <UART_SetConfig>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e01b      	b.n	8004ffc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb95 	bl	8005724 <UART_CheckIdleState>
 8004ffa:	4603      	mov	r3, r0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	@ 0x28
 8005008:	af02      	add	r7, sp, #8
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	4613      	mov	r3, r2
 8005012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005018:	2b20      	cmp	r3, #32
 800501a:	d177      	bne.n	800510c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Transmit+0x24>
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e070      	b.n	800510e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	@ 0x21
 8005038:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503a:	f7fc fb05 	bl	8001648 <HAL_GetTick>
 800503e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005058:	d108      	bne.n	800506c <HAL_UART_Transmit+0x68>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e003      	b.n	8005074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005074:	e02f      	b.n	80050d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2200      	movs	r2, #0
 800507e:	2180      	movs	r1, #128	@ 0x80
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fbf7 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d004      	beq.n	8005096 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e03b      	b.n	800510e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3302      	adds	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e007      	b.n	80050c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1c9      	bne.n	8005076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	@ 0x40
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fbc1 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2220      	movs	r2, #32
 80050fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e005      	b.n	800510e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4ba6      	ldr	r3, [pc, #664]	@ (80053dc <UART_SetConfig+0x2c4>)
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	6979      	ldr	r1, [r7, #20]
 800514c:	430b      	orrs	r3, r1
 800514e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a94      	ldr	r2, [pc, #592]	@ (80053e0 <UART_SetConfig+0x2c8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d120      	bne.n	80051d6 <UART_SetConfig+0xbe>
 8005194:	4b93      	ldr	r3, [pc, #588]	@ (80053e4 <UART_SetConfig+0x2cc>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d816      	bhi.n	80051d0 <UART_SetConfig+0xb8>
 80051a2:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <UART_SetConfig+0x90>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c5 	.word	0x080051c5
 80051b0:	080051bf 	.word	0x080051bf
 80051b4:	080051cb 	.word	0x080051cb
 80051b8:	2301      	movs	r3, #1
 80051ba:	77fb      	strb	r3, [r7, #31]
 80051bc:	e150      	b.n	8005460 <UART_SetConfig+0x348>
 80051be:	2302      	movs	r3, #2
 80051c0:	77fb      	strb	r3, [r7, #31]
 80051c2:	e14d      	b.n	8005460 <UART_SetConfig+0x348>
 80051c4:	2304      	movs	r3, #4
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e14a      	b.n	8005460 <UART_SetConfig+0x348>
 80051ca:	2308      	movs	r3, #8
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e147      	b.n	8005460 <UART_SetConfig+0x348>
 80051d0:	2310      	movs	r3, #16
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e144      	b.n	8005460 <UART_SetConfig+0x348>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a83      	ldr	r2, [pc, #524]	@ (80053e8 <UART_SetConfig+0x2d0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d132      	bne.n	8005246 <UART_SetConfig+0x12e>
 80051e0:	4b80      	ldr	r3, [pc, #512]	@ (80053e4 <UART_SetConfig+0x2cc>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d828      	bhi.n	8005240 <UART_SetConfig+0x128>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <UART_SetConfig+0xdc>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005241 	.word	0x08005241
 8005200:	08005241 	.word	0x08005241
 8005204:	08005235 	.word	0x08005235
 8005208:	08005241 	.word	0x08005241
 800520c:	08005241 	.word	0x08005241
 8005210:	08005241 	.word	0x08005241
 8005214:	0800522f 	.word	0x0800522f
 8005218:	08005241 	.word	0x08005241
 800521c:	08005241 	.word	0x08005241
 8005220:	08005241 	.word	0x08005241
 8005224:	0800523b 	.word	0x0800523b
 8005228:	2300      	movs	r3, #0
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e118      	b.n	8005460 <UART_SetConfig+0x348>
 800522e:	2302      	movs	r3, #2
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e115      	b.n	8005460 <UART_SetConfig+0x348>
 8005234:	2304      	movs	r3, #4
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e112      	b.n	8005460 <UART_SetConfig+0x348>
 800523a:	2308      	movs	r3, #8
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e10f      	b.n	8005460 <UART_SetConfig+0x348>
 8005240:	2310      	movs	r3, #16
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e10c      	b.n	8005460 <UART_SetConfig+0x348>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a68      	ldr	r2, [pc, #416]	@ (80053ec <UART_SetConfig+0x2d4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d120      	bne.n	8005292 <UART_SetConfig+0x17a>
 8005250:	4b64      	ldr	r3, [pc, #400]	@ (80053e4 <UART_SetConfig+0x2cc>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005256:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800525a:	2b30      	cmp	r3, #48	@ 0x30
 800525c:	d013      	beq.n	8005286 <UART_SetConfig+0x16e>
 800525e:	2b30      	cmp	r3, #48	@ 0x30
 8005260:	d814      	bhi.n	800528c <UART_SetConfig+0x174>
 8005262:	2b20      	cmp	r3, #32
 8005264:	d009      	beq.n	800527a <UART_SetConfig+0x162>
 8005266:	2b20      	cmp	r3, #32
 8005268:	d810      	bhi.n	800528c <UART_SetConfig+0x174>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <UART_SetConfig+0x15c>
 800526e:	2b10      	cmp	r3, #16
 8005270:	d006      	beq.n	8005280 <UART_SetConfig+0x168>
 8005272:	e00b      	b.n	800528c <UART_SetConfig+0x174>
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e0f2      	b.n	8005460 <UART_SetConfig+0x348>
 800527a:	2302      	movs	r3, #2
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e0ef      	b.n	8005460 <UART_SetConfig+0x348>
 8005280:	2304      	movs	r3, #4
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e0ec      	b.n	8005460 <UART_SetConfig+0x348>
 8005286:	2308      	movs	r3, #8
 8005288:	77fb      	strb	r3, [r7, #31]
 800528a:	e0e9      	b.n	8005460 <UART_SetConfig+0x348>
 800528c:	2310      	movs	r3, #16
 800528e:	77fb      	strb	r3, [r7, #31]
 8005290:	e0e6      	b.n	8005460 <UART_SetConfig+0x348>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a56      	ldr	r2, [pc, #344]	@ (80053f0 <UART_SetConfig+0x2d8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d120      	bne.n	80052de <UART_SetConfig+0x1c6>
 800529c:	4b51      	ldr	r3, [pc, #324]	@ (80053e4 <UART_SetConfig+0x2cc>)
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80052a8:	d013      	beq.n	80052d2 <UART_SetConfig+0x1ba>
 80052aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80052ac:	d814      	bhi.n	80052d8 <UART_SetConfig+0x1c0>
 80052ae:	2b80      	cmp	r3, #128	@ 0x80
 80052b0:	d009      	beq.n	80052c6 <UART_SetConfig+0x1ae>
 80052b2:	2b80      	cmp	r3, #128	@ 0x80
 80052b4:	d810      	bhi.n	80052d8 <UART_SetConfig+0x1c0>
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <UART_SetConfig+0x1a8>
 80052ba:	2b40      	cmp	r3, #64	@ 0x40
 80052bc:	d006      	beq.n	80052cc <UART_SetConfig+0x1b4>
 80052be:	e00b      	b.n	80052d8 <UART_SetConfig+0x1c0>
 80052c0:	2300      	movs	r3, #0
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e0cc      	b.n	8005460 <UART_SetConfig+0x348>
 80052c6:	2302      	movs	r3, #2
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	e0c9      	b.n	8005460 <UART_SetConfig+0x348>
 80052cc:	2304      	movs	r3, #4
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	e0c6      	b.n	8005460 <UART_SetConfig+0x348>
 80052d2:	2308      	movs	r3, #8
 80052d4:	77fb      	strb	r3, [r7, #31]
 80052d6:	e0c3      	b.n	8005460 <UART_SetConfig+0x348>
 80052d8:	2310      	movs	r3, #16
 80052da:	77fb      	strb	r3, [r7, #31]
 80052dc:	e0c0      	b.n	8005460 <UART_SetConfig+0x348>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a44      	ldr	r2, [pc, #272]	@ (80053f4 <UART_SetConfig+0x2dc>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d125      	bne.n	8005334 <UART_SetConfig+0x21c>
 80052e8:	4b3e      	ldr	r3, [pc, #248]	@ (80053e4 <UART_SetConfig+0x2cc>)
 80052ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052f6:	d017      	beq.n	8005328 <UART_SetConfig+0x210>
 80052f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052fc:	d817      	bhi.n	800532e <UART_SetConfig+0x216>
 80052fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005302:	d00b      	beq.n	800531c <UART_SetConfig+0x204>
 8005304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005308:	d811      	bhi.n	800532e <UART_SetConfig+0x216>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <UART_SetConfig+0x1fe>
 800530e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005312:	d006      	beq.n	8005322 <UART_SetConfig+0x20a>
 8005314:	e00b      	b.n	800532e <UART_SetConfig+0x216>
 8005316:	2300      	movs	r3, #0
 8005318:	77fb      	strb	r3, [r7, #31]
 800531a:	e0a1      	b.n	8005460 <UART_SetConfig+0x348>
 800531c:	2302      	movs	r3, #2
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e09e      	b.n	8005460 <UART_SetConfig+0x348>
 8005322:	2304      	movs	r3, #4
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e09b      	b.n	8005460 <UART_SetConfig+0x348>
 8005328:	2308      	movs	r3, #8
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e098      	b.n	8005460 <UART_SetConfig+0x348>
 800532e:	2310      	movs	r3, #16
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e095      	b.n	8005460 <UART_SetConfig+0x348>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2f      	ldr	r2, [pc, #188]	@ (80053f8 <UART_SetConfig+0x2e0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d125      	bne.n	800538a <UART_SetConfig+0x272>
 800533e:	4b29      	ldr	r3, [pc, #164]	@ (80053e4 <UART_SetConfig+0x2cc>)
 8005340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800534c:	d017      	beq.n	800537e <UART_SetConfig+0x266>
 800534e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005352:	d817      	bhi.n	8005384 <UART_SetConfig+0x26c>
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005358:	d00b      	beq.n	8005372 <UART_SetConfig+0x25a>
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800535e:	d811      	bhi.n	8005384 <UART_SetConfig+0x26c>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <UART_SetConfig+0x254>
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005368:	d006      	beq.n	8005378 <UART_SetConfig+0x260>
 800536a:	e00b      	b.n	8005384 <UART_SetConfig+0x26c>
 800536c:	2301      	movs	r3, #1
 800536e:	77fb      	strb	r3, [r7, #31]
 8005370:	e076      	b.n	8005460 <UART_SetConfig+0x348>
 8005372:	2302      	movs	r3, #2
 8005374:	77fb      	strb	r3, [r7, #31]
 8005376:	e073      	b.n	8005460 <UART_SetConfig+0x348>
 8005378:	2304      	movs	r3, #4
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e070      	b.n	8005460 <UART_SetConfig+0x348>
 800537e:	2308      	movs	r3, #8
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e06d      	b.n	8005460 <UART_SetConfig+0x348>
 8005384:	2310      	movs	r3, #16
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e06a      	b.n	8005460 <UART_SetConfig+0x348>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1b      	ldr	r2, [pc, #108]	@ (80053fc <UART_SetConfig+0x2e4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d138      	bne.n	8005406 <UART_SetConfig+0x2ee>
 8005394:	4b13      	ldr	r3, [pc, #76]	@ (80053e4 <UART_SetConfig+0x2cc>)
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800539e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053a2:	d017      	beq.n	80053d4 <UART_SetConfig+0x2bc>
 80053a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053a8:	d82a      	bhi.n	8005400 <UART_SetConfig+0x2e8>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ae:	d00b      	beq.n	80053c8 <UART_SetConfig+0x2b0>
 80053b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b4:	d824      	bhi.n	8005400 <UART_SetConfig+0x2e8>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <UART_SetConfig+0x2aa>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053be:	d006      	beq.n	80053ce <UART_SetConfig+0x2b6>
 80053c0:	e01e      	b.n	8005400 <UART_SetConfig+0x2e8>
 80053c2:	2300      	movs	r3, #0
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e04b      	b.n	8005460 <UART_SetConfig+0x348>
 80053c8:	2302      	movs	r3, #2
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e048      	b.n	8005460 <UART_SetConfig+0x348>
 80053ce:	2304      	movs	r3, #4
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e045      	b.n	8005460 <UART_SetConfig+0x348>
 80053d4:	2308      	movs	r3, #8
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e042      	b.n	8005460 <UART_SetConfig+0x348>
 80053da:	bf00      	nop
 80053dc:	efff69f3 	.word	0xefff69f3
 80053e0:	40011000 	.word	0x40011000
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40004400 	.word	0x40004400
 80053ec:	40004800 	.word	0x40004800
 80053f0:	40004c00 	.word	0x40004c00
 80053f4:	40005000 	.word	0x40005000
 80053f8:	40011400 	.word	0x40011400
 80053fc:	40007800 	.word	0x40007800
 8005400:	2310      	movs	r3, #16
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e02c      	b.n	8005460 <UART_SetConfig+0x348>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a72      	ldr	r2, [pc, #456]	@ (80055d4 <UART_SetConfig+0x4bc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d125      	bne.n	800545c <UART_SetConfig+0x344>
 8005410:	4b71      	ldr	r3, [pc, #452]	@ (80055d8 <UART_SetConfig+0x4c0>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005416:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800541a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800541e:	d017      	beq.n	8005450 <UART_SetConfig+0x338>
 8005420:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005424:	d817      	bhi.n	8005456 <UART_SetConfig+0x33e>
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542a:	d00b      	beq.n	8005444 <UART_SetConfig+0x32c>
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005430:	d811      	bhi.n	8005456 <UART_SetConfig+0x33e>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <UART_SetConfig+0x326>
 8005436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800543a:	d006      	beq.n	800544a <UART_SetConfig+0x332>
 800543c:	e00b      	b.n	8005456 <UART_SetConfig+0x33e>
 800543e:	2300      	movs	r3, #0
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e00d      	b.n	8005460 <UART_SetConfig+0x348>
 8005444:	2302      	movs	r3, #2
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e00a      	b.n	8005460 <UART_SetConfig+0x348>
 800544a:	2304      	movs	r3, #4
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e007      	b.n	8005460 <UART_SetConfig+0x348>
 8005450:	2308      	movs	r3, #8
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e004      	b.n	8005460 <UART_SetConfig+0x348>
 8005456:	2310      	movs	r3, #16
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e001      	b.n	8005460 <UART_SetConfig+0x348>
 800545c:	2310      	movs	r3, #16
 800545e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005468:	d15b      	bne.n	8005522 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800546a:	7ffb      	ldrb	r3, [r7, #31]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d828      	bhi.n	80054c2 <UART_SetConfig+0x3aa>
 8005470:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <UART_SetConfig+0x360>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	0800549d 	.word	0x0800549d
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	080054c3 	.word	0x080054c3
 8005488:	080054b3 	.word	0x080054b3
 800548c:	080054c3 	.word	0x080054c3
 8005490:	080054c3 	.word	0x080054c3
 8005494:	080054c3 	.word	0x080054c3
 8005498:	080054bb 	.word	0x080054bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800549c:	f7fd ffc2 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 80054a0:	61b8      	str	r0, [r7, #24]
        break;
 80054a2:	e013      	b.n	80054cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fd ffd2 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80054a8:	61b8      	str	r0, [r7, #24]
        break;
 80054aa:	e00f      	b.n	80054cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054ac:	4b4b      	ldr	r3, [pc, #300]	@ (80055dc <UART_SetConfig+0x4c4>)
 80054ae:	61bb      	str	r3, [r7, #24]
        break;
 80054b0:	e00c      	b.n	80054cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b2:	f7fd fea5 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 80054b6:	61b8      	str	r0, [r7, #24]
        break;
 80054b8:	e008      	b.n	80054cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054be:	61bb      	str	r3, [r7, #24]
        break;
 80054c0:	e004      	b.n	80054cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	77bb      	strb	r3, [r7, #30]
        break;
 80054ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d074      	beq.n	80055bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	005a      	lsls	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	441a      	add	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d916      	bls.n	800551c <UART_SetConfig+0x404>
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f4:	d212      	bcs.n	800551c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	f023 030f 	bic.w	r3, r3, #15
 80054fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	085b      	lsrs	r3, r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	b29a      	uxth	r2, r3
 800550c:	89fb      	ldrh	r3, [r7, #14]
 800550e:	4313      	orrs	r3, r2
 8005510:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	89fa      	ldrh	r2, [r7, #14]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	e04f      	b.n	80055bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	77bb      	strb	r3, [r7, #30]
 8005520:	e04c      	b.n	80055bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005522:	7ffb      	ldrb	r3, [r7, #31]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d828      	bhi.n	800557a <UART_SetConfig+0x462>
 8005528:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <UART_SetConfig+0x418>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005555 	.word	0x08005555
 8005534:	0800555d 	.word	0x0800555d
 8005538:	08005565 	.word	0x08005565
 800553c:	0800557b 	.word	0x0800557b
 8005540:	0800556b 	.word	0x0800556b
 8005544:	0800557b 	.word	0x0800557b
 8005548:	0800557b 	.word	0x0800557b
 800554c:	0800557b 	.word	0x0800557b
 8005550:	08005573 	.word	0x08005573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fd ff66 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8005558:	61b8      	str	r0, [r7, #24]
        break;
 800555a:	e013      	b.n	8005584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800555c:	f7fd ff76 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8005560:	61b8      	str	r0, [r7, #24]
        break;
 8005562:	e00f      	b.n	8005584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005564:	4b1d      	ldr	r3, [pc, #116]	@ (80055dc <UART_SetConfig+0x4c4>)
 8005566:	61bb      	str	r3, [r7, #24]
        break;
 8005568:	e00c      	b.n	8005584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556a:	f7fd fe49 	bl	8003200 <HAL_RCC_GetSysClockFreq>
 800556e:	61b8      	str	r0, [r7, #24]
        break;
 8005570:	e008      	b.n	8005584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005576:	61bb      	str	r3, [r7, #24]
        break;
 8005578:	e004      	b.n	8005584 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	77bb      	strb	r3, [r7, #30]
        break;
 8005582:	bf00      	nop
    }

    if (pclk != 0U)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	085a      	lsrs	r2, r3, #1
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	441a      	add	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b0f      	cmp	r3, #15
 80055a2:	d909      	bls.n	80055b8 <UART_SetConfig+0x4a0>
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055aa:	d205      	bcs.n	80055b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	e001      	b.n	80055bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40007c00 	.word	0x40007c00
 80055d8:	40023800 	.word	0x40023800
 80055dc:	00f42400 	.word	0x00f42400

080055e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01a      	beq.n	80056f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056de:	d10a      	bne.n	80056f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
  }
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b098      	sub	sp, #96	@ 0x60
 8005728:	af02      	add	r7, sp, #8
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005734:	f7fb ff88 	bl	8001648 <HAL_GetTick>
 8005738:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b08      	cmp	r3, #8
 8005746:	d12e      	bne.n	80057a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005750:	2200      	movs	r2, #0
 8005752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f88c 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d021      	beq.n	80057a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005776:	653b      	str	r3, [r7, #80]	@ 0x50
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005780:	647b      	str	r3, [r7, #68]	@ 0x44
 8005782:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800578e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e6      	bne.n	8005762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e062      	b.n	800586c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d149      	bne.n	8005848 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057bc:	2200      	movs	r2, #0
 80057be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f856 	bl	8005874 <UART_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d03c      	beq.n	8005848 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	623b      	str	r3, [r7, #32]
   return(result);
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e6      	bne.n	80057ce <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0301 	bic.w	r3, r3, #1
 8005816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005820:	61fa      	str	r2, [r7, #28]
 8005822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	617b      	str	r3, [r7, #20]
   return(result);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e011      	b.n	800586c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3758      	adds	r7, #88	@ 0x58
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	4613      	mov	r3, r2
 8005882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005884:	e04f      	b.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d04b      	beq.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800588e:	f7fb fedb 	bl	8001648 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e04e      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d037      	beq.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b80      	cmp	r3, #128	@ 0x80
 80058ba:	d034      	beq.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb2>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b40      	cmp	r3, #64	@ 0x40
 80058c0:	d031      	beq.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d110      	bne.n	80058f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2208      	movs	r2, #8
 80058d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f838 	bl	800594e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2208      	movs	r2, #8
 80058e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e029      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005900:	d111      	bne.n	8005926 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800590a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f81e 	bl	800594e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e00f      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4013      	ands	r3, r2
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	bf0c      	ite	eq
 8005936:	2301      	moveq	r3, #1
 8005938:	2300      	movne	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	429a      	cmp	r2, r3
 8005942:	d0a0      	beq.n	8005886 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800594e:	b480      	push	{r7}
 8005950:	b095      	sub	sp, #84	@ 0x54
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800596a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005974:	643b      	str	r3, [r7, #64]	@ 0x40
 8005976:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800597a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800597c:	e841 2300 	strex	r3, r2, [r1]
 8005980:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e6      	bne.n	8005956 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3308      	adds	r3, #8
 800598e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	61fb      	str	r3, [r7, #28]
   return(result);
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	f023 0301 	bic.w	r3, r3, #1
 800599e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3308      	adds	r3, #8
 80059a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e5      	bne.n	8005988 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d118      	bne.n	80059f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 0310 	bic.w	r3, r3, #16
 80059d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	461a      	mov	r2, r3
 80059e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6979      	ldr	r1, [r7, #20]
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	613b      	str	r3, [r7, #16]
   return(result);
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e6      	bne.n	80059c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a0a:	bf00      	nop
 8005a0c:	3754      	adds	r7, #84	@ 0x54
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005a18:	b084      	sub	sp, #16
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	f107 001c 	add.w	r0, r7, #28
 8005a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005a2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005a30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005a32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8005a36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8005a3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8005a3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8005a42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4b07      	ldr	r3, [pc, #28]	@ (8005a6c <SDMMC_Init+0x54>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	b004      	add	sp, #16
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	ffff8100 	.word	0xffff8100

08005a70 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0303 	and.w	r3, r3, #3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005b08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005b0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <SDMMC_SendCommand+0x50>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	fffff000 	.word	0xfffff000

08005b38 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	b2db      	uxtb	r3, r3
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3314      	adds	r3, #20
 8005b60:	461a      	mov	r2, r3
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
}  
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b9e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005ba4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005baa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0

}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005bde:	2310      	movs	r3, #16
 8005be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005be2:	2340      	movs	r3, #64	@ 0x40
 8005be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bf0:	f107 0308 	add.w	r3, r7, #8
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff ff74 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c00:	2110      	movs	r1, #16
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f9d6 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005c22:	2311      	movs	r3, #17
 8005c24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c26:	2340      	movs	r3, #64	@ 0x40
 8005c28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff ff52 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c44:	2111      	movs	r1, #17
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f9b4 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005c4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c4e:	69fb      	ldr	r3, [r7, #28]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c66:	2312      	movs	r3, #18
 8005c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c6a:	2340      	movs	r3, #64	@ 0x40
 8005c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ff30 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c88:	2112      	movs	r1, #18
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f992 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c92:	69fb      	ldr	r3, [r7, #28]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005caa:	2318      	movs	r3, #24
 8005cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cae:	2340      	movs	r3, #64	@ 0x40
 8005cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cbc:	f107 0308 	add.w	r3, r7, #8
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ff0e 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ccc:	2118      	movs	r1, #24
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f970 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005cee:	2319      	movs	r3, #25
 8005cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005cf2:	2340      	movs	r3, #64	@ 0x40
 8005cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff feec 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d10:	2119      	movs	r1, #25
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f94e 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005d18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005d30:	230c      	movs	r3, #12
 8005d32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d34:	2340      	movs	r3, #64	@ 0x40
 8005d36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fecb 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005d4e:	4a05      	ldr	r2, [pc, #20]	@ (8005d64 <SDMMC_CmdStopTransfer+0x40>)
 8005d50:	210c      	movs	r1, #12
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f92e 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	05f5e100 	.word	0x05f5e100

08005d68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	@ 0x28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d78:	2307      	movs	r3, #7
 8005d7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d7c:	2340      	movs	r3, #64	@ 0x40
 8005d7e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d88:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d8a:	f107 0310 	add.w	r3, r7, #16
 8005d8e:	4619      	mov	r1, r3
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f7ff fea7 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d9a:	2107      	movs	r1, #7
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f909 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005da2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	@ 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dcc:	f107 0308 	add.w	r3, r7, #8
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fe86 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb23 	bl	8006424 <SDMMC_GetCmdError>
 8005dde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de0:	69fb      	ldr	r3, [r7, #28]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b088      	sub	sp, #32
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005df2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8005df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005df8:	2308      	movs	r3, #8
 8005dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005dfc:	2340      	movs	r3, #64	@ 0x40
 8005dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e0a:	f107 0308 	add.w	r3, r7, #8
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fe67 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fab6 	bl	8006388 <SDMMC_GetCmdResp7>
 8005e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005e36:	2337      	movs	r3, #55	@ 0x37
 8005e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e3a:	2340      	movs	r3, #64	@ 0x40
 8005e3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e48:	f107 0308 	add.w	r3, r7, #8
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff fe48 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e58:	2137      	movs	r1, #55	@ 0x37
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f8aa 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005e60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e62:	69fb      	ldr	r3, [r7, #28]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb0 <SDMMC_CmdAppOperCommand+0x44>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e7e:	2329      	movs	r3, #41	@ 0x29
 8005e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e82:	2340      	movs	r3, #64	@ 0x40
 8005e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f7ff fe24 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f9bf 	bl	8006220 <SDMMC_GetCmdResp3>
 8005ea2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	80100000 	.word	0x80100000

08005eb4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005ec4:	23c0      	movs	r3, #192	@ 0xc0
 8005ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ed2:	f107 0308 	add.w	r3, r7, #8
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff fe03 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f956 	bl	8006190 <SDMMC_GetCmdResp2>
 8005ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3720      	adds	r7, #32
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005efe:	2309      	movs	r3, #9
 8005f00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005f02:	23c0      	movs	r3, #192	@ 0xc0
 8005f04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fde4 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f937 	bl	8006190 <SDMMC_GetCmdResp2>
 8005f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f24:	69fb      	ldr	r3, [r7, #28]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b088      	sub	sp, #32
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f40:	2340      	movs	r3, #64	@ 0x40
 8005f42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f4e:	f107 0308 	add.w	r3, r7, #8
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fdc5 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	2103      	movs	r1, #3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f99c 	bl	800629c <SDMMC_GetCmdResp6>
 8005f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f66:	69fb      	ldr	r3, [r7, #28]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005f7e:	230d      	movs	r3, #13
 8005f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f82:	2340      	movs	r3, #64	@ 0x40
 8005f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f90:	f107 0308 	add.w	r3, r7, #8
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fda4 	bl	8005ae4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa0:	210d      	movs	r1, #13
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f806 	bl	8005fb4 <SDMMC_GetCmdResp1>
 8005fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005faa:	69fb      	ldr	r3, [r7, #28]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005fc2:	4b70      	ldr	r3, [pc, #448]	@ (8006184 <SDMMC_GetCmdResp1+0x1d0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a70      	ldr	r2, [pc, #448]	@ (8006188 <SDMMC_GetCmdResp1+0x1d4>)
 8005fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fcc:	0a5a      	lsrs	r2, r3, #9
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	1e5a      	subs	r2, r3, #1
 8005fda:	61fa      	str	r2, [r7, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fe0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005fe4:	e0c9      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0ef      	beq.n	8005fd6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1ea      	bne.n	8005fd6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d004      	beq.n	8006016 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2204      	movs	r2, #4
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006012:	2304      	movs	r3, #4
 8006014:	e0b1      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006028:	2301      	movs	r3, #1
 800602a:	e0a6      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	22c5      	movs	r2, #197	@ 0xc5
 8006030:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff fd80 	bl	8005b38 <SDMMC_GetCommandResponse>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	4293      	cmp	r3, r2
 8006040:	d001      	beq.n	8006046 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006042:	2301      	movs	r3, #1
 8006044:	e099      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006046:	2100      	movs	r1, #0
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7ff fd82 	bl	8005b52 <SDMMC_GetResponse>
 800604e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4b4e      	ldr	r3, [pc, #312]	@ (800618c <SDMMC_GetCmdResp1+0x1d8>)
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800605a:	2300      	movs	r3, #0
 800605c:	e08d      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da02      	bge.n	800606a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006068:	e087      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006074:	2340      	movs	r3, #64	@ 0x40
 8006076:	e080      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006082:	2380      	movs	r3, #128	@ 0x80
 8006084:	e079      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006094:	e071      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060a4:	e069      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80060b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060b4:	e061      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80060c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060c4:	e059      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80060d4:	e051      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060e4:	e049      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80060f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80060f4:	e041      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006100:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006104:	e039      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006110:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006114:	e031      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006120:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006124:	e029      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006130:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006134:	e021      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006140:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006144:	e019      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006150:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006154:	e011      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006160:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006164:	e009      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006170:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006174:	e001      	b.n	800617a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006176:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000000 	.word	0x20000000
 8006188:	10624dd3 	.word	0x10624dd3
 800618c:	fdffe008 	.word	0xfdffe008

08006190 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006198:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <SDMMC_GetCmdResp2+0x88>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1f      	ldr	r2, [pc, #124]	@ (800621c <SDMMC_GetCmdResp2+0x8c>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	0a5b      	lsrs	r3, r3, #9
 80061a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1e5a      	subs	r2, r3, #1
 80061b2:	60fa      	str	r2, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80061bc:	e026      	b.n	800620c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0ef      	beq.n	80061ae <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1ea      	bne.n	80061ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2204      	movs	r2, #4
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061ea:	2304      	movs	r3, #4
 80061ec:	e00e      	b.n	800620c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d004      	beq.n	8006204 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006200:	2301      	movs	r3, #1
 8006202:	e003      	b.n	800620c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	22c5      	movs	r2, #197	@ 0xc5
 8006208:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	20000000 	.word	0x20000000
 800621c:	10624dd3 	.word	0x10624dd3

08006220 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006228:	4b1a      	ldr	r3, [pc, #104]	@ (8006294 <SDMMC_GetCmdResp3+0x74>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1a      	ldr	r2, [pc, #104]	@ (8006298 <SDMMC_GetCmdResp3+0x78>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	0a5b      	lsrs	r3, r3, #9
 8006234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1e5a      	subs	r2, r3, #1
 8006242:	60fa      	str	r2, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006248:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800624c:	e01b      	b.n	8006286 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006252:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0ef      	beq.n	800623e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ea      	bne.n	800623e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d004      	beq.n	800627e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2204      	movs	r2, #4
 8006278:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800627a:	2304      	movs	r3, #4
 800627c:	e003      	b.n	8006286 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	22c5      	movs	r2, #197	@ 0xc5
 8006282:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000000 	.word	0x20000000
 8006298:	10624dd3 	.word	0x10624dd3

0800629c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	460b      	mov	r3, r1
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80062aa:	4b35      	ldr	r3, [pc, #212]	@ (8006380 <SDMMC_GetCmdResp6+0xe4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a35      	ldr	r2, [pc, #212]	@ (8006384 <SDMMC_GetCmdResp6+0xe8>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	0a5b      	lsrs	r3, r3, #9
 80062b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	1e5a      	subs	r2, r3, #1
 80062c4:	61fa      	str	r2, [r7, #28]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80062ce:	e052      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ef      	beq.n	80062c0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1ea      	bne.n	80062c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2204      	movs	r2, #4
 80062fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062fc:	2304      	movs	r3, #4
 80062fe:	e03a      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006312:	2301      	movs	r3, #1
 8006314:	e02f      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff fc0e 	bl	8005b38 <SDMMC_GetCommandResponse>
 800631c:	4603      	mov	r3, r0
 800631e:	461a      	mov	r2, r3
 8006320:	7afb      	ldrb	r3, [r7, #11]
 8006322:	4293      	cmp	r3, r2
 8006324:	d001      	beq.n	800632a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006326:	2301      	movs	r3, #1
 8006328:	e025      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	22c5      	movs	r2, #197	@ 0xc5
 800632e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006330:	2100      	movs	r1, #0
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff fc0d 	bl	8005b52 <SDMMC_GetResponse>
 8006338:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	b29a      	uxth	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
 8006350:	e011      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800635c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006360:	e009      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800636c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006370:	e001      	b.n	8006376 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000000 	.word	0x20000000
 8006384:	10624dd3 	.word	0x10624dd3

08006388 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006390:	4b22      	ldr	r3, [pc, #136]	@ (800641c <SDMMC_GetCmdResp7+0x94>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a22      	ldr	r2, [pc, #136]	@ (8006420 <SDMMC_GetCmdResp7+0x98>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	0a5b      	lsrs	r3, r3, #9
 800639c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1e5a      	subs	r2, r3, #1
 80063aa:	60fa      	str	r2, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80063b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80063b4:	e02c      	b.n	8006410 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0ef      	beq.n	80063a6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1ea      	bne.n	80063a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2204      	movs	r2, #4
 80063e0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063e2:	2304      	movs	r3, #4
 80063e4:	e014      	b.n	8006410 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e009      	b.n	8006410 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2240      	movs	r2, #64	@ 0x40
 800640c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800640e:	2300      	movs	r3, #0
  
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000000 	.word	0x20000000
 8006420:	10624dd3 	.word	0x10624dd3

08006424 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800642c:	4b11      	ldr	r3, [pc, #68]	@ (8006474 <SDMMC_GetCmdError+0x50>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a11      	ldr	r2, [pc, #68]	@ (8006478 <SDMMC_GetCmdError+0x54>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	0a5b      	lsrs	r3, r3, #9
 8006438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643c:	fb02 f303 	mul.w	r3, r2, r3
 8006440:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1e5a      	subs	r2, r3, #1
 8006446:	60fa      	str	r2, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800644c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006450:	e009      	b.n	8006466 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d0f1      	beq.n	8006442 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	22c5      	movs	r2, #197	@ 0xc5
 8006462:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000000 	.word	0x20000000
 8006478:	10624dd3 	.word	0x10624dd3

0800647c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006480:	4904      	ldr	r1, [pc, #16]	@ (8006494 <MX_FATFS_Init+0x18>)
 8006482:	4805      	ldr	r0, [pc, #20]	@ (8006498 <MX_FATFS_Init+0x1c>)
 8006484:	f003 fdea 	bl	800a05c <FATFS_LinkDriver>
 8006488:	4603      	mov	r3, r0
 800648a:	461a      	mov	r2, r3
 800648c:	4b03      	ldr	r3, [pc, #12]	@ (800649c <MX_FATFS_Init+0x20>)
 800648e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006490:	bf00      	nop
 8006492:	bd80      	pop	{r7, pc}
 8006494:	2000028c 	.word	0x2000028c
 8006498:	0800b3b8 	.word	0x0800b3b8
 800649c:	20000288 	.word	0x20000288

080064a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80064a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80064ba:	f000 f888 	bl	80065ce <BSP_SD_IsDetected>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d001      	beq.n	80064c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e005      	b.n	80064d4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80064c8:	4804      	ldr	r0, [pc, #16]	@ (80064dc <BSP_SD_Init+0x2c>)
 80064ca:	f7fd fc25 	bl	8003d18 <HAL_SD_Init>
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80064d2:	79fb      	ldrb	r3, [r7, #7]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000098 	.word	0x20000098

080064e0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	68f9      	ldr	r1, [r7, #12]
 80064f6:	4806      	ldr	r0, [pc, #24]	@ (8006510 <BSP_SD_ReadBlocks_DMA+0x30>)
 80064f8:	f7fd fcc6 	bl	8003e88 <HAL_SD_ReadBlocks_DMA>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006506:	7dfb      	ldrb	r3, [r7, #23]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	20000098 	.word	0x20000098

08006514 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	68f9      	ldr	r1, [r7, #12]
 800652a:	4806      	ldr	r0, [pc, #24]	@ (8006544 <BSP_SD_WriteBlocks_DMA+0x30>)
 800652c:	f7fd fd8e 	bl	800404c <HAL_SD_WriteBlocks_DMA>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000098 	.word	0x20000098

08006548 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800654c:	4805      	ldr	r0, [pc, #20]	@ (8006564 <BSP_SD_GetCardState+0x1c>)
 800654e:	f7fe f9b3 	bl	80048b8 <HAL_SD_GetCardState>
 8006552:	4603      	mov	r3, r0
 8006554:	2b04      	cmp	r3, #4
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
}
 800655e:	4618      	mov	r0, r3
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000098 	.word	0x20000098

08006568 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8006570:	6879      	ldr	r1, [r7, #4]
 8006572:	4803      	ldr	r0, [pc, #12]	@ (8006580 <BSP_SD_GetCardInfo+0x18>)
 8006574:	f7fe f974 	bl	8004860 <HAL_SD_GetCardInfo>
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000098 	.word	0x20000098

08006584 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800658c:	f000 f818 	bl	80065c0 <BSP_SD_AbortCallback>
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80065a0:	f000 f98c 	bl	80068bc <BSP_SD_WriteCpltCallback>
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80065b4:	f000 f98e 	bl	80068d4 <BSP_SD_ReadCpltCallback>
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0

}
 80065c4:	bf00      	nop
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80065d4:	2301      	movs	r3, #1
 80065d6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	b2db      	uxtb	r3, r3
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80065f0:	f7fb f82a 	bl	8001648 <HAL_GetTick>
 80065f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80065f6:	e006      	b.n	8006606 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065f8:	f7ff ffa6 	bl	8006548 <BSP_SD_GetCardState>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006602:	2300      	movs	r3, #0
 8006604:	e009      	b.n	800661a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006606:	f7fb f81f 	bl	8001648 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d8f0      	bhi.n	80065f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800662e:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <SD_CheckStatus+0x38>)
 8006630:	2201      	movs	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006634:	f7ff ff88 	bl	8006548 <BSP_SD_GetCardState>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d107      	bne.n	800664e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800663e:	4b07      	ldr	r3, [pc, #28]	@ (800665c <SD_CheckStatus+0x38>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	b2da      	uxtb	r2, r3
 800664a:	4b04      	ldr	r3, [pc, #16]	@ (800665c <SD_CheckStatus+0x38>)
 800664c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800664e:	4b03      	ldr	r3, [pc, #12]	@ (800665c <SD_CheckStatus+0x38>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	b2db      	uxtb	r3, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000009 	.word	0x20000009

08006660 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800666a:	f7ff ff21 	bl	80064b0 <BSP_SD_Init>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ffd4 	bl	8006624 <SD_CheckStatus>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	4b04      	ldr	r3, [pc, #16]	@ (8006694 <SD_initialize+0x34>)
 8006682:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006684:	4b03      	ldr	r3, [pc, #12]	@ (8006694 <SD_initialize+0x34>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b2db      	uxtb	r3, r3
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000009 	.word	0x20000009

08006698 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff ffbd 	bl	8006624 <SD_CheckStatus>
 80066aa:	4603      	mov	r3, r0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
 80066be:	603b      	str	r3, [r7, #0]
 80066c0:	4603      	mov	r3, r0
 80066c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80066c8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80066cc:	f7ff ff8c 	bl	80065e8 <SD_CheckStatusWithTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da01      	bge.n	80066da <SD_read+0x26>
  {
    return res;
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	e03b      	b.n	8006752 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	68b8      	ldr	r0, [r7, #8]
 80066e0:	f7ff fefe 	bl	80064e0 <BSP_SD_ReadBlocks_DMA>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d132      	bne.n	8006750 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80066ea:	4b1c      	ldr	r3, [pc, #112]	@ (800675c <SD_read+0xa8>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80066f0:	f7fa ffaa 	bl	8001648 <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80066f6:	bf00      	nop
 80066f8:	4b18      	ldr	r3, [pc, #96]	@ (800675c <SD_read+0xa8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d108      	bne.n	8006712 <SD_read+0x5e>
 8006700:	f7fa ffa2 	bl	8001648 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800670e:	4293      	cmp	r3, r2
 8006710:	d9f2      	bls.n	80066f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <SD_read+0xa8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	75fb      	strb	r3, [r7, #23]
 800671e:	e017      	b.n	8006750 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006720:	4b0e      	ldr	r3, [pc, #56]	@ (800675c <SD_read+0xa8>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006726:	f7fa ff8f 	bl	8001648 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800672c:	e007      	b.n	800673e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800672e:	f7ff ff0b 	bl	8006548 <BSP_SD_GetCardState>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <SD_read+0x8a>
          {
            res = RES_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800673c:	e008      	b.n	8006750 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800673e:	f7fa ff83 	bl	8001648 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f247 522f 	movw	r2, #29999	@ 0x752f
 800674c:	4293      	cmp	r3, r2
 800674e:	d9ee      	bls.n	800672e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006750:	7dfb      	ldrb	r3, [r7, #23]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200006f8 	.word	0x200006f8

08006760 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006774:	4b24      	ldr	r3, [pc, #144]	@ (8006808 <SD_write+0xa8>)
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800677a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800677e:	f7ff ff33 	bl	80065e8 <SD_CheckStatusWithTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	da01      	bge.n	800678c <SD_write+0x2c>
  {
    return res;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	e038      	b.n	80067fe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68b8      	ldr	r0, [r7, #8]
 8006792:	f7ff febf 	bl	8006514 <BSP_SD_WriteBlocks_DMA>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d12f      	bne.n	80067fc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800679c:	f7fa ff54 	bl	8001648 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80067a2:	bf00      	nop
 80067a4:	4b18      	ldr	r3, [pc, #96]	@ (8006808 <SD_write+0xa8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d108      	bne.n	80067be <SD_write+0x5e>
 80067ac:	f7fa ff4c 	bl	8001648 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d9f2      	bls.n	80067a4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <SD_write+0xa8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
 80067ca:	e017      	b.n	80067fc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006808 <SD_write+0xa8>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80067d2:	f7fa ff39 	bl	8001648 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80067d8:	e007      	b.n	80067ea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80067da:	f7ff feb5 	bl	8006548 <BSP_SD_GetCardState>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <SD_write+0x8a>
          {
            res = RES_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]
            break;
 80067e8:	e008      	b.n	80067fc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80067ea:	f7fa ff2d 	bl	8001648 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d9ee      	bls.n	80067da <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200006f4 	.word	0x200006f4

0800680c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	@ 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	603a      	str	r2, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
 8006818:	460b      	mov	r3, r1
 800681a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006822:	4b25      	ldr	r3, [pc, #148]	@ (80068b8 <SD_ioctl+0xac>)
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <SD_ioctl+0x28>
 8006830:	2303      	movs	r3, #3
 8006832:	e03c      	b.n	80068ae <SD_ioctl+0xa2>

  switch (cmd)
 8006834:	79bb      	ldrb	r3, [r7, #6]
 8006836:	2b03      	cmp	r3, #3
 8006838:	d834      	bhi.n	80068a4 <SD_ioctl+0x98>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <SD_ioctl+0x34>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006851 	.word	0x08006851
 8006844:	08006859 	.word	0x08006859
 8006848:	08006871 	.word	0x08006871
 800684c:	0800688b 	.word	0x0800688b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006856:	e028      	b.n	80068aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fe83 	bl	8006568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800686e:	e01c      	b.n	80068aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006870:	f107 030c 	add.w	r3, r7, #12
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fe77 	bl	8006568 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	b29a      	uxth	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006888:	e00f      	b.n	80068aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fe6a 	bl	8006568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	0a5a      	lsrs	r2, r3, #9
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80068a2:	e002      	b.n	80068aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80068aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3730      	adds	r7, #48	@ 0x30
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000009 	.word	0x20000009

080068bc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80068c0:	4b03      	ldr	r3, [pc, #12]	@ (80068d0 <BSP_SD_WriteCpltCallback+0x14>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	200006f4 	.word	0x200006f4

080068d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80068d8:	4b03      	ldr	r3, [pc, #12]	@ (80068e8 <BSP_SD_ReadCpltCallback+0x14>)
 80068da:	2201      	movs	r2, #1
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	200006f8 	.word	0x200006f8

080068ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	4a08      	ldr	r2, [pc, #32]	@ (800691c <disk_status+0x30>)
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	79fa      	ldrb	r2, [r7, #7]
 8006904:	4905      	ldr	r1, [pc, #20]	@ (800691c <disk_status+0x30>)
 8006906:	440a      	add	r2, r1
 8006908:	7a12      	ldrb	r2, [r2, #8]
 800690a:	4610      	mov	r0, r2
 800690c:	4798      	blx	r3
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000724 	.word	0x20000724

08006920 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800692e:	79fb      	ldrb	r3, [r7, #7]
 8006930:	4a0d      	ldr	r2, [pc, #52]	@ (8006968 <disk_initialize+0x48>)
 8006932:	5cd3      	ldrb	r3, [r2, r3]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d111      	bne.n	800695c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	4a0b      	ldr	r2, [pc, #44]	@ (8006968 <disk_initialize+0x48>)
 800693c:	2101      	movs	r1, #1
 800693e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006940:	79fb      	ldrb	r3, [r7, #7]
 8006942:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <disk_initialize+0x48>)
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	79fa      	ldrb	r2, [r7, #7]
 800694e:	4906      	ldr	r1, [pc, #24]	@ (8006968 <disk_initialize+0x48>)
 8006950:	440a      	add	r2, r1
 8006952:	7a12      	ldrb	r2, [r2, #8]
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000724 	.word	0x20000724

0800696c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	4a0a      	ldr	r2, [pc, #40]	@ (80069a8 <disk_read+0x3c>)
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	689c      	ldr	r4, [r3, #8]
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	4a07      	ldr	r2, [pc, #28]	@ (80069a8 <disk_read+0x3c>)
 800698c:	4413      	add	r3, r2
 800698e:	7a18      	ldrb	r0, [r3, #8]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	47a0      	blx	r4
 8006998:	4603      	mov	r3, r0
 800699a:	75fb      	strb	r3, [r7, #23]
  return res;
 800699c:	7dfb      	ldrb	r3, [r7, #23]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd90      	pop	{r4, r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000724 	.word	0x20000724

080069ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80069ac:	b590      	push	{r4, r7, lr}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	4603      	mov	r3, r0
 80069ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <disk_write+0x3c>)
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	68dc      	ldr	r4, [r3, #12]
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4a07      	ldr	r2, [pc, #28]	@ (80069e8 <disk_write+0x3c>)
 80069cc:	4413      	add	r3, r2
 80069ce:	7a18      	ldrb	r0, [r3, #8]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	47a0      	blx	r4
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]
  return res;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd90      	pop	{r4, r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000724 	.word	0x20000724

080069ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	603a      	str	r2, [r7, #0]
 80069f6:	71fb      	strb	r3, [r7, #7]
 80069f8:	460b      	mov	r3, r1
 80069fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	4a09      	ldr	r2, [pc, #36]	@ (8006a24 <disk_ioctl+0x38>)
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	79fa      	ldrb	r2, [r7, #7]
 8006a0a:	4906      	ldr	r1, [pc, #24]	@ (8006a24 <disk_ioctl+0x38>)
 8006a0c:	440a      	add	r2, r1
 8006a0e:	7a10      	ldrb	r0, [r2, #8]
 8006a10:	79b9      	ldrb	r1, [r7, #6]
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	4798      	blx	r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
  return res;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000724 	.word	0x20000724

08006a28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3301      	adds	r3, #1
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006a38:	89fb      	ldrh	r3, [r7, #14]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	b21a      	sxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	b21b      	sxth	r3, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006a4a:	89fb      	ldrh	r3, [r7, #14]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3303      	adds	r3, #3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	3202      	adds	r2, #2
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	3201      	adds	r2, #1
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	887a      	ldrh	r2, [r7, #2]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	887b      	ldrh	r3, [r7, #2]
 8006ab8:	0a1b      	lsrs	r3, r3, #8
 8006aba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	607a      	str	r2, [r7, #4]
 8006ac2:	887a      	ldrh	r2, [r7, #2]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	607a      	str	r2, [r7, #4]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00d      	beq.n	8006b62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	1c53      	adds	r3, r2, #1
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	6179      	str	r1, [r7, #20]
 8006b52:	7812      	ldrb	r2, [r2, #0]
 8006b54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f1      	bne.n	8006b46 <mem_cpy+0x1a>
	}
}
 8006b62:	bf00      	nop
 8006b64:	371c      	adds	r7, #28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	617a      	str	r2, [r7, #20]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	607b      	str	r3, [r7, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f3      	bne.n	8006b7e <mem_set+0x10>
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ba4:	b480      	push	{r7}
 8006ba6:	b089      	sub	sp, #36	@ 0x24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	61ba      	str	r2, [r7, #24]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	1acb      	subs	r3, r1, r3
 8006bd0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	607b      	str	r3, [r7, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <mem_cmp+0x40>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0eb      	beq.n	8006bbc <mem_cmp+0x18>

	return r;
 8006be4:	697b      	ldr	r3, [r7, #20]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3724      	adds	r7, #36	@ 0x24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006bfc:	e002      	b.n	8006c04 <chk_chr+0x12>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3301      	adds	r3, #1
 8006c02:	607b      	str	r3, [r7, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <chk_chr+0x26>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d1f2      	bne.n	8006bfe <chk_chr+0xc>
	return *str;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e029      	b.n	8006c90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006c3c:	4a27      	ldr	r2, [pc, #156]	@ (8006cdc <chk_lock+0xb4>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4413      	add	r3, r2
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01d      	beq.n	8006c86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c4a:	4a24      	ldr	r2, [pc, #144]	@ (8006cdc <chk_lock+0xb4>)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	4413      	add	r3, r2
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d116      	bne.n	8006c8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cdc <chk_lock+0xb4>)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	4413      	add	r3, r2
 8006c64:	3304      	adds	r3, #4
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d10c      	bne.n	8006c8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c70:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <chk_lock+0xb4>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	4413      	add	r3, r2
 8006c78:	3308      	adds	r3, #8
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d102      	bne.n	8006c8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006c84:	e007      	b.n	8006c96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006c86:	2301      	movs	r3, #1
 8006c88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d9d2      	bls.n	8006c3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d109      	bne.n	8006cb0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <chk_lock+0x80>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d101      	bne.n	8006cac <chk_lock+0x84>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e010      	b.n	8006cce <chk_lock+0xa6>
 8006cac:	2312      	movs	r3, #18
 8006cae:	e00e      	b.n	8006cce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d108      	bne.n	8006cc8 <chk_lock+0xa0>
 8006cb6:	4a09      	ldr	r2, [pc, #36]	@ (8006cdc <chk_lock+0xb4>)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	4413      	add	r3, r2
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc6:	d101      	bne.n	8006ccc <chk_lock+0xa4>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	e000      	b.n	8006cce <chk_lock+0xa6>
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000704 	.word	0x20000704

08006ce0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	e002      	b.n	8006cf2 <enq_lock+0x12>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d806      	bhi.n	8006d06 <enq_lock+0x26>
 8006cf8:	4a09      	ldr	r2, [pc, #36]	@ (8006d20 <enq_lock+0x40>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	4413      	add	r3, r2
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f2      	bne.n	8006cec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000704 	.word	0x20000704

08006d24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e01f      	b.n	8006d74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006d34:	4a41      	ldr	r2, [pc, #260]	@ (8006e3c <inc_lock+0x118>)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	4413      	add	r3, r2
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d113      	bne.n	8006d6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006d46:	4a3d      	ldr	r2, [pc, #244]	@ (8006e3c <inc_lock+0x118>)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	011b      	lsls	r3, r3, #4
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3304      	adds	r3, #4
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d109      	bne.n	8006d6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006d5a:	4a38      	ldr	r2, [pc, #224]	@ (8006e3c <inc_lock+0x118>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	4413      	add	r3, r2
 8006d62:	3308      	adds	r3, #8
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d006      	beq.n	8006d7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d9dc      	bls.n	8006d34 <inc_lock+0x10>
 8006d7a:	e000      	b.n	8006d7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006d7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d132      	bne.n	8006dea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e002      	b.n	8006d90 <inc_lock+0x6c>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d806      	bhi.n	8006da4 <inc_lock+0x80>
 8006d96:	4a29      	ldr	r2, [pc, #164]	@ (8006e3c <inc_lock+0x118>)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	4413      	add	r3, r2
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1f2      	bne.n	8006d8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d101      	bne.n	8006dae <inc_lock+0x8a>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e040      	b.n	8006e30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4922      	ldr	r1, [pc, #136]	@ (8006e3c <inc_lock+0x118>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	440b      	add	r3, r1
 8006dba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	491e      	ldr	r1, [pc, #120]	@ (8006e3c <inc_lock+0x118>)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3304      	adds	r3, #4
 8006dca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695a      	ldr	r2, [r3, #20]
 8006dd0:	491a      	ldr	r1, [pc, #104]	@ (8006e3c <inc_lock+0x118>)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3308      	adds	r3, #8
 8006dda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006ddc:	4a17      	ldr	r2, [pc, #92]	@ (8006e3c <inc_lock+0x118>)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	4413      	add	r3, r2
 8006de4:	330c      	adds	r3, #12
 8006de6:	2200      	movs	r2, #0
 8006de8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <inc_lock+0xe0>
 8006df0:	4a12      	ldr	r2, [pc, #72]	@ (8006e3c <inc_lock+0x118>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	4413      	add	r3, r2
 8006df8:	330c      	adds	r3, #12
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <inc_lock+0xe0>
 8006e00:	2300      	movs	r3, #0
 8006e02:	e015      	b.n	8006e30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d108      	bne.n	8006e1c <inc_lock+0xf8>
 8006e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e3c <inc_lock+0x118>)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	4413      	add	r3, r2
 8006e12:	330c      	adds	r3, #12
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	e001      	b.n	8006e20 <inc_lock+0xfc>
 8006e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e20:	4906      	ldr	r1, [pc, #24]	@ (8006e3c <inc_lock+0x118>)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	440b      	add	r3, r1
 8006e28:	330c      	adds	r3, #12
 8006e2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3301      	adds	r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000704 	.word	0x20000704

08006e40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	607b      	str	r3, [r7, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d825      	bhi.n	8006ea0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006e54:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <dec_lock+0x74>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	4413      	add	r3, r2
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006e62:	89fb      	ldrh	r3, [r7, #14]
 8006e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e68:	d101      	bne.n	8006e6e <dec_lock+0x2e>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e6e:	89fb      	ldrh	r3, [r7, #14]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <dec_lock+0x3a>
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8006eb4 <dec_lock+0x74>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	4413      	add	r3, r2
 8006e82:	330c      	adds	r3, #12
 8006e84:	89fa      	ldrh	r2, [r7, #14]
 8006e86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006e88:	89fb      	ldrh	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <dec_lock+0x5a>
 8006e8e:	4a09      	ldr	r2, [pc, #36]	@ (8006eb4 <dec_lock+0x74>)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	4413      	add	r3, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	737b      	strb	r3, [r7, #13]
 8006e9e:	e001      	b.n	8006ea4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006ea4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000704 	.word	0x20000704

08006eb8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e010      	b.n	8006ee8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8006efc <clear_lock+0x44>)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	4413      	add	r3, r2
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d105      	bne.n	8006ee2 <clear_lock+0x2a>
 8006ed6:	4a09      	ldr	r2, [pc, #36]	@ (8006efc <clear_lock+0x44>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4413      	add	r3, r2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d9eb      	bls.n	8006ec6 <clear_lock+0xe>
	}
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20000704 	.word	0x20000704

08006f00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	78db      	ldrb	r3, [r3, #3]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d034      	beq.n	8006f7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7858      	ldrb	r0, [r3, #1]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f24:	2301      	movs	r3, #1
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	f7ff fd40 	bl	80069ac <disk_write>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	73fb      	strb	r3, [r7, #15]
 8006f36:	e022      	b.n	8006f7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	1ad2      	subs	r2, r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d217      	bcs.n	8006f7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	789b      	ldrb	r3, [r3, #2]
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e010      	b.n	8006f78 <sync_window+0x78>
					wsect += fs->fsize;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7858      	ldrb	r0, [r3, #1]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	f7ff fd1d 	bl	80069ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d8eb      	bhi.n	8006f56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d01b      	beq.n	8006fd8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ffad 	bl	8006f00 <sync_window>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d113      	bne.n	8006fd8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7858      	ldrb	r0, [r3, #1]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006fba:	2301      	movs	r3, #1
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	f7ff fcd5 	bl	800696c <disk_read>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d004      	beq.n	8006fd2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fcc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff ff87 	bl	8006f00 <sync_window>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d158      	bne.n	80070ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d148      	bne.n	8007096 <sync_fs+0xb2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	791b      	ldrb	r3, [r3, #4]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d144      	bne.n	8007096 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3334      	adds	r3, #52	@ 0x34
 8007010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fda9 	bl	8006b6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3334      	adds	r3, #52	@ 0x34
 8007020:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007024:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff fd38 	bl	8006a9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3334      	adds	r3, #52	@ 0x34
 8007032:	4921      	ldr	r1, [pc, #132]	@ (80070b8 <sync_fs+0xd4>)
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fd4d 	bl	8006ad4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3334      	adds	r3, #52	@ 0x34
 800703e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007042:	491e      	ldr	r1, [pc, #120]	@ (80070bc <sync_fs+0xd8>)
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff fd45 	bl	8006ad4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3334      	adds	r3, #52	@ 0x34
 800704e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7ff fd3b 	bl	8006ad4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3334      	adds	r3, #52	@ 0x34
 8007062:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f7ff fd31 	bl	8006ad4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	7858      	ldrb	r0, [r3, #1]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800708a:	2301      	movs	r3, #1
 800708c:	f7ff fc8e 	bl	80069ac <disk_write>
			fs->fsi_flag = 0;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2200      	movs	r2, #0
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f7ff fca4 	bl	80069ec <disk_ioctl>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <sync_fs+0xca>
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	41615252 	.word	0x41615252
 80070bc:	61417272 	.word	0x61417272

080070c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	3b02      	subs	r3, #2
 80070ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	3b02      	subs	r3, #2
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d301      	bcc.n	80070e0 <clust2sect+0x20>
 80070dc:	2300      	movs	r3, #0
 80070de:	e008      	b.n	80070f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	895b      	ldrh	r3, [r3, #10]
 80070e4:	461a      	mov	r2, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	fb03 f202 	mul.w	r2, r3, r2
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	4413      	add	r3, r2
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	370c      	adds	r7, #12
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b086      	sub	sp, #24
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d904      	bls.n	800711e <get_fat+0x20>
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d302      	bcc.n	8007124 <get_fat+0x26>
		val = 1;	/* Internal error */
 800711e:	2301      	movs	r3, #1
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e08e      	b.n	8007242 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007124:	f04f 33ff 	mov.w	r3, #4294967295
 8007128:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	2b03      	cmp	r3, #3
 8007130:	d061      	beq.n	80071f6 <get_fat+0xf8>
 8007132:	2b03      	cmp	r3, #3
 8007134:	dc7b      	bgt.n	800722e <get_fat+0x130>
 8007136:	2b01      	cmp	r3, #1
 8007138:	d002      	beq.n	8007140 <get_fat+0x42>
 800713a:	2b02      	cmp	r3, #2
 800713c:	d041      	beq.n	80071c2 <get_fat+0xc4>
 800713e:	e076      	b.n	800722e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	0a5b      	lsrs	r3, r3, #9
 8007156:	4413      	add	r3, r2
 8007158:	4619      	mov	r1, r3
 800715a:	6938      	ldr	r0, [r7, #16]
 800715c:	f7ff ff14 	bl	8006f88 <move_window>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d166      	bne.n	8007234 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	60fa      	str	r2, [r7, #12]
 800716c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007178:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	0a5b      	lsrs	r3, r3, #9
 8007182:	4413      	add	r3, r2
 8007184:	4619      	mov	r1, r3
 8007186:	6938      	ldr	r0, [r7, #16]
 8007188:	f7ff fefe 	bl	8006f88 <move_window>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d152      	bne.n	8007238 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80071a0:	021b      	lsls	r3, r3, #8
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <get_fat+0xba>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	091b      	lsrs	r3, r3, #4
 80071b6:	e002      	b.n	80071be <get_fat+0xc0>
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071be:	617b      	str	r3, [r7, #20]
			break;
 80071c0:	e03f      	b.n	8007242 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	4413      	add	r3, r2
 80071cc:	4619      	mov	r1, r3
 80071ce:	6938      	ldr	r0, [r7, #16]
 80071d0:	f7ff feda 	bl	8006f88 <move_window>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d130      	bne.n	800723c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80071e8:	4413      	add	r3, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fc1c 	bl	8006a28 <ld_word>
 80071f0:	4603      	mov	r3, r0
 80071f2:	617b      	str	r3, [r7, #20]
			break;
 80071f4:	e025      	b.n	8007242 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	09db      	lsrs	r3, r3, #7
 80071fe:	4413      	add	r3, r2
 8007200:	4619      	mov	r1, r3
 8007202:	6938      	ldr	r0, [r7, #16]
 8007204:	f7ff fec0 	bl	8006f88 <move_window>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d118      	bne.n	8007240 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800721c:	4413      	add	r3, r2
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff fc1a 	bl	8006a58 <ld_dword>
 8007224:	4603      	mov	r3, r0
 8007226:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800722a:	617b      	str	r3, [r7, #20]
			break;
 800722c:	e009      	b.n	8007242 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800722e:	2301      	movs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e006      	b.n	8007242 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007234:	bf00      	nop
 8007236:	e004      	b.n	8007242 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007238:	bf00      	nop
 800723a:	e002      	b.n	8007242 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800723c:	bf00      	nop
 800723e:	e000      	b.n	8007242 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007240:	bf00      	nop
		}
	}

	return val;
 8007242:	697b      	ldr	r3, [r7, #20]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800724c:	b590      	push	{r4, r7, lr}
 800724e:	b089      	sub	sp, #36	@ 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007258:	2302      	movs	r3, #2
 800725a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b01      	cmp	r3, #1
 8007260:	f240 80d9 	bls.w	8007416 <put_fat+0x1ca>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	429a      	cmp	r2, r3
 800726c:	f080 80d3 	bcs.w	8007416 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b03      	cmp	r3, #3
 8007276:	f000 8096 	beq.w	80073a6 <put_fat+0x15a>
 800727a:	2b03      	cmp	r3, #3
 800727c:	f300 80cb 	bgt.w	8007416 <put_fat+0x1ca>
 8007280:	2b01      	cmp	r3, #1
 8007282:	d002      	beq.n	800728a <put_fat+0x3e>
 8007284:	2b02      	cmp	r3, #2
 8007286:	d06e      	beq.n	8007366 <put_fat+0x11a>
 8007288:	e0c5      	b.n	8007416 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	4413      	add	r3, r2
 8007296:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	0a5b      	lsrs	r3, r3, #9
 80072a0:	4413      	add	r3, r2
 80072a2:	4619      	mov	r1, r3
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fe6f 	bl	8006f88 <move_window>
 80072aa:	4603      	mov	r3, r0
 80072ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072ae:	7ffb      	ldrb	r3, [r7, #31]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 80a9 	bne.w	8007408 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	61b9      	str	r1, [r7, #24]
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	4413      	add	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00d      	beq.n	80072f0 <put_fat+0xa4>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	b25b      	sxtb	r3, r3
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	b25a      	sxtb	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b25b      	sxtb	r3, r3
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	e001      	b.n	80072f4 <put_fat+0xa8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	0a5b      	lsrs	r3, r3, #9
 8007306:	4413      	add	r3, r2
 8007308:	4619      	mov	r1, r3
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fe3c 	bl	8006f88 <move_window>
 8007310:	4603      	mov	r3, r0
 8007312:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007314:	7ffb      	ldrb	r3, [r7, #31]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d178      	bne.n	800740c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007326:	4413      	add	r3, r2
 8007328:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <put_fat+0xf0>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	091b      	lsrs	r3, r3, #4
 8007338:	b2db      	uxtb	r3, r3
 800733a:	e00e      	b.n	800735a <put_fat+0x10e>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b25b      	sxtb	r3, r3
 8007342:	f023 030f 	bic.w	r3, r3, #15
 8007346:	b25a      	sxtb	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0a1b      	lsrs	r3, r3, #8
 800734c:	b25b      	sxtb	r3, r3
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	b25b      	sxtb	r3, r3
 8007354:	4313      	orrs	r3, r2
 8007356:	b25b      	sxtb	r3, r3
 8007358:	b2db      	uxtb	r3, r3
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	70da      	strb	r2, [r3, #3]
			break;
 8007364:	e057      	b.n	8007416 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	0a1b      	lsrs	r3, r3, #8
 800736e:	4413      	add	r3, r2
 8007370:	4619      	mov	r1, r3
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff fe08 	bl	8006f88 <move_window>
 8007378:	4603      	mov	r3, r0
 800737a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800737c:	7ffb      	ldrb	r3, [r7, #31]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d146      	bne.n	8007410 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007390:	4413      	add	r3, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	b292      	uxth	r2, r2
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fb80 	bl	8006a9e <st_word>
			fs->wflag = 1;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	70da      	strb	r2, [r3, #3]
			break;
 80073a4:	e037      	b.n	8007416 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	09db      	lsrs	r3, r3, #7
 80073ae:	4413      	add	r3, r2
 80073b0:	4619      	mov	r1, r3
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f7ff fde8 	bl	8006f88 <move_window>
 80073b8:	4603      	mov	r3, r0
 80073ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80073bc:	7ffb      	ldrb	r3, [r7, #31]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d128      	bne.n	8007414 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80073d6:	4413      	add	r3, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fb3d 	bl	8006a58 <ld_dword>
 80073de:	4603      	mov	r3, r0
 80073e0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80073e4:	4323      	orrs	r3, r4
 80073e6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80073f6:	4413      	add	r3, r2
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7ff fb6a 	bl	8006ad4 <st_dword>
			fs->wflag = 1;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	70da      	strb	r2, [r3, #3]
			break;
 8007406:	e006      	b.n	8007416 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007408:	bf00      	nop
 800740a:	e004      	b.n	8007416 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800740c:	bf00      	nop
 800740e:	e002      	b.n	8007416 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007414:	bf00      	nop
		}
	}
	return res;
 8007416:	7ffb      	ldrb	r3, [r7, #31]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3724      	adds	r7, #36	@ 0x24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd90      	pop	{r4, r7, pc}

08007420 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d904      	bls.n	8007446 <remove_chain+0x26>
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	429a      	cmp	r2, r3
 8007444:	d301      	bcc.n	800744a <remove_chain+0x2a>
 8007446:	2302      	movs	r3, #2
 8007448:	e04b      	b.n	80074e2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	69b8      	ldr	r0, [r7, #24]
 8007458:	f7ff fef8 	bl	800724c <put_fat>
 800745c:	4603      	mov	r3, r0
 800745e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007460:	7ffb      	ldrb	r3, [r7, #31]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <remove_chain+0x4a>
 8007466:	7ffb      	ldrb	r3, [r7, #31]
 8007468:	e03b      	b.n	80074e2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff fe46 	bl	80070fe <get_fat>
 8007472:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d031      	beq.n	80074de <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <remove_chain+0x64>
 8007480:	2302      	movs	r3, #2
 8007482:	e02e      	b.n	80074e2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748a:	d101      	bne.n	8007490 <remove_chain+0x70>
 800748c:	2301      	movs	r3, #1
 800748e:	e028      	b.n	80074e2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007490:	2200      	movs	r2, #0
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	69b8      	ldr	r0, [r7, #24]
 8007496:	f7ff fed9 	bl	800724c <put_fat>
 800749a:	4603      	mov	r3, r0
 800749c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800749e:	7ffb      	ldrb	r3, [r7, #31]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <remove_chain+0x88>
 80074a4:	7ffb      	ldrb	r3, [r7, #31]
 80074a6:	e01c      	b.n	80074e2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	3b02      	subs	r3, #2
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d20b      	bcs.n	80074ce <remove_chain+0xae>
			fs->free_clst++;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	791b      	ldrb	r3, [r3, #4]
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d3c6      	bcc.n	800746a <remove_chain+0x4a>
 80074dc:	e000      	b.n	80074e0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80074de:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b088      	sub	sp, #32
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10d      	bne.n	800751c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <create_chain+0x2c>
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	429a      	cmp	r2, r3
 8007514:	d31b      	bcc.n	800754e <create_chain+0x64>
 8007516:	2301      	movs	r3, #1
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	e018      	b.n	800754e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff fded 	bl	80070fe <get_fat>
 8007524:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d801      	bhi.n	8007530 <create_chain+0x46>
 800752c:	2301      	movs	r3, #1
 800752e:	e070      	b.n	8007612 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007536:	d101      	bne.n	800753c <create_chain+0x52>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	e06a      	b.n	8007612 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	429a      	cmp	r2, r3
 8007544:	d201      	bcs.n	800754a <create_chain+0x60>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	e063      	b.n	8007612 <create_chain+0x128>
		scl = clst;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	3301      	adds	r3, #1
 8007556:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	429a      	cmp	r2, r3
 8007560:	d307      	bcc.n	8007572 <create_chain+0x88>
				ncl = 2;
 8007562:	2302      	movs	r3, #2
 8007564:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	429a      	cmp	r2, r3
 800756c:	d901      	bls.n	8007572 <create_chain+0x88>
 800756e:	2300      	movs	r3, #0
 8007570:	e04f      	b.n	8007612 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007572:	69f9      	ldr	r1, [r7, #28]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7ff fdc2 	bl	80070fe <get_fat>
 800757a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d003      	beq.n	8007590 <create_chain+0xa6>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758e:	d101      	bne.n	8007594 <create_chain+0xaa>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	e03e      	b.n	8007612 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007594:	69fa      	ldr	r2, [r7, #28]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	429a      	cmp	r2, r3
 800759a:	d1da      	bne.n	8007552 <create_chain+0x68>
 800759c:	2300      	movs	r3, #0
 800759e:	e038      	b.n	8007612 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80075a0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295
 80075a6:	69f9      	ldr	r1, [r7, #28]
 80075a8:	6938      	ldr	r0, [r7, #16]
 80075aa:	f7ff fe4f 	bl	800724c <put_fat>
 80075ae:	4603      	mov	r3, r0
 80075b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d109      	bne.n	80075cc <create_chain+0xe2>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d006      	beq.n	80075cc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6938      	ldr	r0, [r7, #16]
 80075c4:	f7ff fe42 	bl	800724c <put_fat>
 80075c8:	4603      	mov	r3, r0
 80075ca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d116      	bne.n	8007600 <create_chain+0x116>
		fs->last_clst = ncl;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	3b02      	subs	r3, #2
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d804      	bhi.n	80075f0 <create_chain+0x106>
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	791b      	ldrb	r3, [r3, #4]
 80075f4:	f043 0301 	orr.w	r3, r3, #1
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	711a      	strb	r2, [r3, #4]
 80075fe:	e007      	b.n	8007610 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d102      	bne.n	800760c <create_chain+0x122>
 8007606:	f04f 33ff 	mov.w	r3, #4294967295
 800760a:	e000      	b.n	800760e <create_chain+0x124>
 800760c:	2301      	movs	r3, #1
 800760e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007610:	69fb      	ldr	r3, [r7, #28]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3720      	adds	r7, #32
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800761a:	b480      	push	{r7}
 800761c:	b087      	sub	sp, #28
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
 8007622:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762e:	3304      	adds	r3, #4
 8007630:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	0a5b      	lsrs	r3, r3, #9
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	8952      	ldrh	r2, [r2, #10]
 800763a:	fbb3 f3f2 	udiv	r3, r3, r2
 800763e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	613a      	str	r2, [r7, #16]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <clmt_clust+0x3a>
 8007650:	2300      	movs	r3, #0
 8007652:	e010      	b.n	8007676 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	429a      	cmp	r2, r3
 800765a:	d307      	bcc.n	800766c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3304      	adds	r3, #4
 8007668:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800766a:	e7e9      	b.n	8007640 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800766c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4413      	add	r3, r2
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007698:	d204      	bcs.n	80076a4 <dir_sdi+0x22>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80076a4:	2302      	movs	r3, #2
 80076a6:	e063      	b.n	8007770 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <dir_sdi+0x46>
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d902      	bls.n	80076c8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10c      	bne.n	80076e8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	8912      	ldrh	r2, [r2, #8]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d301      	bcc.n	80076de <dir_sdi+0x5c>
 80076da:	2302      	movs	r3, #2
 80076dc:	e048      	b.n	8007770 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	61da      	str	r2, [r3, #28]
 80076e6:	e029      	b.n	800773c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	895b      	ldrh	r3, [r3, #10]
 80076ec:	025b      	lsls	r3, r3, #9
 80076ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80076f0:	e019      	b.n	8007726 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff fd01 	bl	80070fe <get_fat>
 80076fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d101      	bne.n	800770a <dir_sdi+0x88>
 8007706:	2301      	movs	r3, #1
 8007708:	e032      	b.n	8007770 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d904      	bls.n	800771a <dir_sdi+0x98>
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	429a      	cmp	r2, r3
 8007718:	d301      	bcc.n	800771e <dir_sdi+0x9c>
 800771a:	2302      	movs	r3, #2
 800771c:	e028      	b.n	8007770 <dir_sdi+0xee>
			ofs -= csz;
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	429a      	cmp	r2, r3
 800772c:	d2e1      	bcs.n	80076f2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800772e:	6979      	ldr	r1, [r7, #20]
 8007730:	6938      	ldr	r0, [r7, #16]
 8007732:	f7ff fcc5 	bl	80070c0 <clust2sect>
 8007736:	4602      	mov	r2, r0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <dir_sdi+0xcc>
 800774a:	2302      	movs	r3, #2
 800774c:	e010      	b.n	8007770 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69da      	ldr	r2, [r3, #28]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	0a5b      	lsrs	r3, r3, #9
 8007756:	441a      	add	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007768:	441a      	add	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	3320      	adds	r3, #32
 800778e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <dir_next+0x28>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800779e:	d301      	bcc.n	80077a4 <dir_next+0x2c>
 80077a0:	2304      	movs	r3, #4
 80077a2:	e0aa      	b.n	80078fa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 8098 	bne.w	80078e0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	8912      	ldrh	r2, [r2, #8]
 80077ca:	4293      	cmp	r3, r2
 80077cc:	f0c0 8088 	bcc.w	80078e0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	61da      	str	r2, [r3, #28]
 80077d6:	2304      	movs	r3, #4
 80077d8:	e08f      	b.n	80078fa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	0a5b      	lsrs	r3, r3, #9
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	8952      	ldrh	r2, [r2, #10]
 80077e2:	3a01      	subs	r2, #1
 80077e4:	4013      	ands	r3, r2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d17a      	bne.n	80078e0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7ff fc83 	bl	80070fe <get_fat>
 80077f8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d801      	bhi.n	8007804 <dir_next+0x8c>
 8007800:	2302      	movs	r3, #2
 8007802:	e07a      	b.n	80078fa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d101      	bne.n	8007810 <dir_next+0x98>
 800780c:	2301      	movs	r3, #1
 800780e:	e074      	b.n	80078fa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	429a      	cmp	r2, r3
 8007818:	d358      	bcc.n	80078cc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	61da      	str	r2, [r3, #28]
 8007826:	2304      	movs	r3, #4
 8007828:	e067      	b.n	80078fa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7ff fe59 	bl	80074ea <create_chain>
 8007838:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d101      	bne.n	8007844 <dir_next+0xcc>
 8007840:	2307      	movs	r3, #7
 8007842:	e05a      	b.n	80078fa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <dir_next+0xd6>
 800784a:	2302      	movs	r3, #2
 800784c:	e055      	b.n	80078fa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007854:	d101      	bne.n	800785a <dir_next+0xe2>
 8007856:	2301      	movs	r3, #1
 8007858:	e04f      	b.n	80078fa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff fb50 	bl	8006f00 <sync_window>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <dir_next+0xf2>
 8007866:	2301      	movs	r3, #1
 8007868:	e047      	b.n	80078fa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	3334      	adds	r3, #52	@ 0x34
 800786e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007872:	2100      	movs	r1, #0
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff f97a 	bl	8006b6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800787a:	2300      	movs	r3, #0
 800787c:	613b      	str	r3, [r7, #16]
 800787e:	6979      	ldr	r1, [r7, #20]
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fc1d 	bl	80070c0 <clust2sect>
 8007886:	4602      	mov	r2, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	631a      	str	r2, [r3, #48]	@ 0x30
 800788c:	e012      	b.n	80078b4 <dir_next+0x13c>
						fs->wflag = 1;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2201      	movs	r2, #1
 8007892:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fb33 	bl	8006f00 <sync_window>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <dir_next+0x12c>
 80078a0:	2301      	movs	r3, #1
 80078a2:	e02a      	b.n	80078fa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	3301      	adds	r3, #1
 80078a8:	613b      	str	r3, [r7, #16]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	895b      	ldrh	r3, [r3, #10]
 80078b8:	461a      	mov	r2, r3
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4293      	cmp	r3, r2
 80078be:	d3e6      	bcc.n	800788e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80078d2:	6979      	ldr	r1, [r7, #20]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f7ff fbf3 	bl	80070c0 <clust2sect>
 80078da:	4602      	mov	r2, r0
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	441a      	add	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007912:	2100      	movs	r1, #0
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff feb4 	bl	8007682 <dir_sdi>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d12b      	bne.n	800797c <dir_alloc+0x7a>
		n = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	4619      	mov	r1, r3
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7ff fb2a 	bl	8006f88 <move_window>
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d11d      	bne.n	800797a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2be5      	cmp	r3, #229	@ 0xe5
 8007946:	d004      	beq.n	8007952 <dir_alloc+0x50>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d107      	bne.n	8007962 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3301      	adds	r3, #1
 8007956:	613b      	str	r3, [r7, #16]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d102      	bne.n	8007966 <dir_alloc+0x64>
 8007960:	e00c      	b.n	800797c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007962:	2300      	movs	r3, #0
 8007964:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007966:	2101      	movs	r1, #1
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ff05 	bl	8007778 <dir_next>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d0d7      	beq.n	8007928 <dir_alloc+0x26>
 8007978:	e000      	b.n	800797c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800797a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d101      	bne.n	8007986 <dir_alloc+0x84>
 8007982:	2307      	movs	r3, #7
 8007984:	75fb      	strb	r3, [r7, #23]
	return res;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	331a      	adds	r3, #26
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff f842 	bl	8006a28 <ld_word>
 80079a4:	4603      	mov	r3, r0
 80079a6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d109      	bne.n	80079c4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	3314      	adds	r3, #20
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff f837 	bl	8006a28 <ld_word>
 80079ba:	4603      	mov	r3, r0
 80079bc:	041b      	lsls	r3, r3, #16
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	331a      	adds	r3, #26
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	b292      	uxth	r2, r2
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff f85a 	bl	8006a9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d109      	bne.n	8007a06 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f103 0214 	add.w	r2, r3, #20
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	4619      	mov	r1, r3
 8007a00:	4610      	mov	r0, r2
 8007a02:	f7ff f84c 	bl	8006a9e <st_word>
	}
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007a10:	b590      	push	{r4, r7, lr}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	331a      	adds	r3, #26
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff f802 	bl	8006a28 <ld_word>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <cmp_lfn+0x1e>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e059      	b.n	8007ae2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a36:	1e5a      	subs	r2, r3, #1
 8007a38:	4613      	mov	r3, r2
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007a44:	2301      	movs	r3, #1
 8007a46:	81fb      	strh	r3, [r7, #14]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	e033      	b.n	8007ab6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007a4e:	4a27      	ldr	r2, [pc, #156]	@ (8007aec <cmp_lfn+0xdc>)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4413      	add	r3, r2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe ffe3 	bl	8006a28 <ld_word>
 8007a62:	4603      	mov	r3, r0
 8007a64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007a66:	89fb      	ldrh	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01a      	beq.n	8007aa2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007a70:	d812      	bhi.n	8007a98 <cmp_lfn+0x88>
 8007a72:	89bb      	ldrh	r3, [r7, #12]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f002 fb3d 	bl	800a0f4 <ff_wtoupper>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	617a      	str	r2, [r7, #20]
 8007a84:	005b      	lsls	r3, r3, #1
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f002 fb31 	bl	800a0f4 <ff_wtoupper>
 8007a92:	4603      	mov	r3, r0
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d001      	beq.n	8007a9c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007a98:	2300      	movs	r3, #0
 8007a9a:	e022      	b.n	8007ae2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007a9c:	89bb      	ldrh	r3, [r7, #12]
 8007a9e:	81fb      	strh	r3, [r7, #14]
 8007aa0:	e006      	b.n	8007ab0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007aa2:	89bb      	ldrh	r3, [r7, #12]
 8007aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d001      	beq.n	8007ab0 <cmp_lfn+0xa0>
 8007aac:	2300      	movs	r3, #0
 8007aae:	e018      	b.n	8007ae2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	613b      	str	r3, [r7, #16]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	d9c8      	bls.n	8007a4e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <cmp_lfn+0xd0>
 8007ac8:	89fb      	ldrh	r3, [r7, #14]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <cmp_lfn+0xd0>
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <cmp_lfn+0xd0>
 8007adc:	2300      	movs	r3, #0
 8007ade:	e000      	b.n	8007ae2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007ae0:	2301      	movs	r3, #1
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}
 8007aea:	bf00      	nop
 8007aec:	0800b44c 	.word	0x0800b44c

08007af0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	331a      	adds	r3, #26
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe ff92 	bl	8006a28 <ld_word>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <pick_lfn+0x1e>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e04d      	b.n	8007baa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b16:	1e5a      	subs	r2, r3, #1
 8007b18:	4613      	mov	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007b24:	2301      	movs	r3, #1
 8007b26:	81fb      	strh	r3, [r7, #14]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	e028      	b.n	8007b80 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007b2e:	4a21      	ldr	r2, [pc, #132]	@ (8007bb4 <pick_lfn+0xc4>)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4413      	add	r3, r2
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe ff73 	bl	8006a28 <ld_word>
 8007b42:	4603      	mov	r3, r0
 8007b44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b50:	d901      	bls.n	8007b56 <pick_lfn+0x66>
 8007b52:	2300      	movs	r3, #0
 8007b54:	e029      	b.n	8007baa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8007b56:	89bb      	ldrh	r3, [r7, #12]
 8007b58:	81fb      	strh	r3, [r7, #14]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	617a      	str	r2, [r7, #20]
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	4413      	add	r3, r2
 8007b66:	89fa      	ldrh	r2, [r7, #14]
 8007b68:	801a      	strh	r2, [r3, #0]
 8007b6a:	e006      	b.n	8007b7a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007b6c:	89bb      	ldrh	r3, [r7, #12]
 8007b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d001      	beq.n	8007b7a <pick_lfn+0x8a>
 8007b76:	2300      	movs	r3, #0
 8007b78:	e017      	b.n	8007baa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b0c      	cmp	r3, #12
 8007b84:	d9d3      	bls.n	8007b2e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2bfe      	cmp	r3, #254	@ 0xfe
 8007b96:	d901      	bls.n	8007b9c <pick_lfn+0xac>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e006      	b.n	8007baa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8007ba8:	2301      	movs	r3, #1
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	0800b44c 	.word	0x0800b44c

08007bb8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	71fb      	strb	r3, [r7, #7]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	330d      	adds	r3, #13
 8007bd2:	79ba      	ldrb	r2, [r7, #6]
 8007bd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	330b      	adds	r3, #11
 8007bda:	220f      	movs	r2, #15
 8007bdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	330c      	adds	r3, #12
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	331a      	adds	r3, #26
 8007bea:	2100      	movs	r1, #0
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe ff56 	bl	8006a9e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	1e5a      	subs	r2, r3, #1
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	82fb      	strh	r3, [r7, #22]
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007c0a:	8afb      	ldrh	r3, [r7, #22]
 8007c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d007      	beq.n	8007c24 <put_lfn+0x6c>
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	61fa      	str	r2, [r7, #28]
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007c24:	4a17      	ldr	r2, [pc, #92]	@ (8007c84 <put_lfn+0xcc>)
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	4413      	add	r3, r2
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4413      	add	r3, r2
 8007c32:	8afa      	ldrh	r2, [r7, #22]
 8007c34:	4611      	mov	r1, r2
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe ff31 	bl	8006a9e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007c3c:	8afb      	ldrh	r3, [r7, #22]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <put_lfn+0x90>
 8007c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c46:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	61bb      	str	r3, [r7, #24]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2b0c      	cmp	r3, #12
 8007c52:	d9da      	bls.n	8007c0a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007c54:	8afb      	ldrh	r3, [r7, #22]
 8007c56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d006      	beq.n	8007c6c <put_lfn+0xb4>
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d103      	bne.n	8007c74 <put_lfn+0xbc>
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c72:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	79fa      	ldrb	r2, [r7, #7]
 8007c78:	701a      	strb	r2, [r3, #0]
}
 8007c7a:	bf00      	nop
 8007c7c:	3720      	adds	r7, #32
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	0800b44c 	.word	0x0800b44c

08007c88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08c      	sub	sp, #48	@ 0x30
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007c96:	220b      	movs	r2, #11
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7fe ff46 	bl	8006b2c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d929      	bls.n	8007cfa <gen_numname+0x72>
		sr = seq;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007caa:	e020      	b.n	8007cee <gen_numname+0x66>
			wc = *lfn++;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	1c9a      	adds	r2, r3, #2
 8007cb0:	607a      	str	r2, [r7, #4]
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cba:	e015      	b.n	8007ce8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	005a      	lsls	r2, r3, #1
 8007cc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	4413      	add	r3, r2
 8007cc8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007cca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <gen_numname+0x5a>
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	4b30      	ldr	r3, [pc, #192]	@ (8007da0 <gen_numname+0x118>)
 8007cde:	4053      	eors	r3, r2
 8007ce0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	2b0f      	cmp	r3, #15
 8007cec:	d9e6      	bls.n	8007cbc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1da      	bne.n	8007cac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007cfa:	2307      	movs	r3, #7
 8007cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	3330      	adds	r3, #48	@ 0x30
 8007d0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d12:	2b39      	cmp	r3, #57	@ 0x39
 8007d14:	d904      	bls.n	8007d20 <gen_numname+0x98>
 8007d16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d1a:	3307      	adds	r3, #7
 8007d1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	1e5a      	subs	r2, r3, #1
 8007d24:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d26:	3330      	adds	r3, #48	@ 0x30
 8007d28:	443b      	add	r3, r7
 8007d2a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007d2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	091b      	lsrs	r3, r3, #4
 8007d36:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1df      	bne.n	8007cfe <gen_numname+0x76>
	ns[i] = '~';
 8007d3e:	f107 0214 	add.w	r2, r7, #20
 8007d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d44:	4413      	add	r3, r2
 8007d46:	227e      	movs	r2, #126	@ 0x7e
 8007d48:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4e:	e002      	b.n	8007d56 <gen_numname+0xce>
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	3301      	adds	r3, #1
 8007d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d205      	bcs.n	8007d6a <gen_numname+0xe2>
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	4413      	add	r3, r2
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d1f2      	bne.n	8007d50 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	2b07      	cmp	r3, #7
 8007d6e:	d807      	bhi.n	8007d80 <gen_numname+0xf8>
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d76:	3330      	adds	r3, #48	@ 0x30
 8007d78:	443b      	add	r3, r7
 8007d7a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007d7e:	e000      	b.n	8007d82 <gen_numname+0xfa>
 8007d80:	2120      	movs	r1, #32
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	460a      	mov	r2, r1
 8007d8e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	2b07      	cmp	r3, #7
 8007d94:	d9e9      	bls.n	8007d6a <gen_numname+0xe2>
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	3730      	adds	r7, #48	@ 0x30
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	00011021 	.word	0x00011021

08007da4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007db0:	230b      	movs	r3, #11
 8007db2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	0852      	lsrs	r2, r2, #1
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	1c59      	adds	r1, r3, #1
 8007dc4:	6079      	str	r1, [r7, #4]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	4413      	add	r3, r2
 8007dca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1ed      	bne.n	8007db4 <sum_sfn+0x10>
	return sum;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b086      	sub	sp, #24
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007df0:	2304      	movs	r3, #4
 8007df2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007dfa:	23ff      	movs	r3, #255	@ 0xff
 8007dfc:	757b      	strb	r3, [r7, #21]
 8007dfe:	23ff      	movs	r3, #255	@ 0xff
 8007e00:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007e02:	e081      	b.n	8007f08 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6938      	ldr	r0, [r7, #16]
 8007e0c:	f7ff f8bc 	bl	8006f88 <move_window>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d17c      	bne.n	8007f14 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007e22:	7dbb      	ldrb	r3, [r7, #22]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d102      	bne.n	8007e2e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007e28:	2304      	movs	r3, #4
 8007e2a:	75fb      	strb	r3, [r7, #23]
 8007e2c:	e077      	b.n	8007f1e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	330b      	adds	r3, #11
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e3a:	73fb      	strb	r3, [r7, #15]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	7bfa      	ldrb	r2, [r7, #15]
 8007e40:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007e42:	7dbb      	ldrb	r3, [r7, #22]
 8007e44:	2be5      	cmp	r3, #229	@ 0xe5
 8007e46:	d00e      	beq.n	8007e66 <dir_read+0x80>
 8007e48:	7dbb      	ldrb	r3, [r7, #22]
 8007e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e4c:	d00b      	beq.n	8007e66 <dir_read+0x80>
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	f023 0320 	bic.w	r3, r3, #32
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	461a      	mov	r2, r3
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d002      	beq.n	8007e6c <dir_read+0x86>
				ord = 0xFF;
 8007e66:	23ff      	movs	r3, #255	@ 0xff
 8007e68:	757b      	strb	r3, [r7, #21]
 8007e6a:	e044      	b.n	8007ef6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	2b0f      	cmp	r3, #15
 8007e70:	d12f      	bne.n	8007ed2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007e72:	7dbb      	ldrb	r3, [r7, #22]
 8007e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00d      	beq.n	8007e98 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	7b5b      	ldrb	r3, [r3, #13]
 8007e82:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007e84:	7dbb      	ldrb	r3, [r7, #22]
 8007e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e8a:	75bb      	strb	r3, [r7, #22]
 8007e8c:	7dbb      	ldrb	r3, [r7, #22]
 8007e8e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	695a      	ldr	r2, [r3, #20]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007e98:	7dba      	ldrb	r2, [r7, #22]
 8007e9a:	7d7b      	ldrb	r3, [r7, #21]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d115      	bne.n	8007ecc <dir_read+0xe6>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a1b      	ldr	r3, [r3, #32]
 8007ea4:	330d      	adds	r3, #13
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	7d3a      	ldrb	r2, [r7, #20]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d10e      	bne.n	8007ecc <dir_read+0xe6>
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7ff fe19 	bl	8007af0 <pick_lfn>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <dir_read+0xe6>
 8007ec4:	7d7b      	ldrb	r3, [r7, #21]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	e000      	b.n	8007ece <dir_read+0xe8>
 8007ecc:	23ff      	movs	r3, #255	@ 0xff
 8007ece:	757b      	strb	r3, [r7, #21]
 8007ed0:	e011      	b.n	8007ef6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007ed2:	7d7b      	ldrb	r3, [r7, #21]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <dir_read+0x106>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff ff61 	bl	8007da4 <sum_sfn>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	7d3b      	ldrb	r3, [r7, #20]
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d015      	beq.n	8007f18 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8007ef4:	e010      	b.n	8007f18 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fc3d 	bl	8007778 <dir_next>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <dir_read+0x136>
	while (dp->sect) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f47f af79 	bne.w	8007e04 <dir_read+0x1e>
 8007f12:	e004      	b.n	8007f1e <dir_read+0x138>
		if (res != FR_OK) break;
 8007f14:	bf00      	nop
 8007f16:	e002      	b.n	8007f1e <dir_read+0x138>
					break;
 8007f18:	bf00      	nop
 8007f1a:	e000      	b.n	8007f1e <dir_read+0x138>
		if (res != FR_OK) break;
 8007f1c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <dir_read+0x144>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	61da      	str	r2, [r3, #28]
	return res;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f42:	2100      	movs	r1, #0
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff fb9c 	bl	8007682 <dir_sdi>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <dir_find+0x24>
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	e0a9      	b.n	80080ac <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007f58:	23ff      	movs	r3, #255	@ 0xff
 8007f5a:	753b      	strb	r3, [r7, #20]
 8007f5c:	7d3b      	ldrb	r3, [r7, #20]
 8007f5e:	757b      	strb	r3, [r7, #21]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f04f 32ff 	mov.w	r2, #4294967295
 8007f66:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6938      	ldr	r0, [r7, #16]
 8007f70:	f7ff f80a 	bl	8006f88 <move_window>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f040 8090 	bne.w	80080a0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f88:	7dbb      	ldrb	r3, [r7, #22]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d102      	bne.n	8007f94 <dir_find+0x60>
 8007f8e:	2304      	movs	r3, #4
 8007f90:	75fb      	strb	r3, [r7, #23]
 8007f92:	e08a      	b.n	80080aa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	330b      	adds	r3, #11
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	7bfa      	ldrb	r2, [r7, #15]
 8007fa6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007fa8:	7dbb      	ldrb	r3, [r7, #22]
 8007faa:	2be5      	cmp	r3, #229	@ 0xe5
 8007fac:	d007      	beq.n	8007fbe <dir_find+0x8a>
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	f003 0308 	and.w	r3, r3, #8
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d009      	beq.n	8007fcc <dir_find+0x98>
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d006      	beq.n	8007fcc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007fbe:	23ff      	movs	r3, #255	@ 0xff
 8007fc0:	757b      	strb	r3, [r7, #21]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fca:	e05e      	b.n	800808a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b0f      	cmp	r3, #15
 8007fd0:	d136      	bne.n	8008040 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d154      	bne.n	800808a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007fe0:	7dbb      	ldrb	r3, [r7, #22]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00d      	beq.n	8008006 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	7b5b      	ldrb	r3, [r3, #13]
 8007ff0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007ff2:	7dbb      	ldrb	r3, [r7, #22]
 8007ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ff8:	75bb      	strb	r3, [r7, #22]
 8007ffa:	7dbb      	ldrb	r3, [r7, #22]
 8007ffc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695a      	ldr	r2, [r3, #20]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008006:	7dba      	ldrb	r2, [r7, #22]
 8008008:	7d7b      	ldrb	r3, [r7, #21]
 800800a:	429a      	cmp	r2, r3
 800800c:	d115      	bne.n	800803a <dir_find+0x106>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a1b      	ldr	r3, [r3, #32]
 8008012:	330d      	adds	r3, #13
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	7d3a      	ldrb	r2, [r7, #20]
 8008018:	429a      	cmp	r2, r3
 800801a:	d10e      	bne.n	800803a <dir_find+0x106>
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	4619      	mov	r1, r3
 8008026:	4610      	mov	r0, r2
 8008028:	f7ff fcf2 	bl	8007a10 <cmp_lfn>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <dir_find+0x106>
 8008032:	7d7b      	ldrb	r3, [r7, #21]
 8008034:	3b01      	subs	r3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	e000      	b.n	800803c <dir_find+0x108>
 800803a:	23ff      	movs	r3, #255	@ 0xff
 800803c:	757b      	strb	r3, [r7, #21]
 800803e:	e024      	b.n	800808a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008040:	7d7b      	ldrb	r3, [r7, #21]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <dir_find+0x126>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff feaa 	bl	8007da4 <sum_sfn>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	7d3b      	ldrb	r3, [r7, #20]
 8008056:	4293      	cmp	r3, r2
 8008058:	d024      	beq.n	80080a4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <dir_find+0x14a>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a18      	ldr	r0, [r3, #32]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3324      	adds	r3, #36	@ 0x24
 8008070:	220b      	movs	r2, #11
 8008072:	4619      	mov	r1, r3
 8008074:	f7fe fd96 	bl	8006ba4 <mem_cmp>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d014      	beq.n	80080a8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800807e:	23ff      	movs	r3, #255	@ 0xff
 8008080:	757b      	strb	r3, [r7, #21]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fb73 	bl	8007778 <dir_next>
 8008092:	4603      	mov	r3, r0
 8008094:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	2b00      	cmp	r3, #0
 800809a:	f43f af65 	beq.w	8007f68 <dir_find+0x34>
 800809e:	e004      	b.n	80080aa <dir_find+0x176>
		if (res != FR_OK) break;
 80080a0:	bf00      	nop
 80080a2:	e002      	b.n	80080aa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80080a4:	bf00      	nop
 80080a6:	e000      	b.n	80080aa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80080a8:	bf00      	nop

	return res;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	@ 0x30
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80080c8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <dir_register+0x20>
 80080d0:	2306      	movs	r3, #6
 80080d2:	e0e0      	b.n	8008296 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80080d4:	2300      	movs	r3, #0
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080d8:	e002      	b.n	80080e0 <dir_register+0x2c>
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	3301      	adds	r3, #1
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	4413      	add	r3, r2
 80080ea:	881b      	ldrh	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f4      	bne.n	80080da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80080f6:	f107 030c 	add.w	r3, r7, #12
 80080fa:	220c      	movs	r2, #12
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe fd15 	bl	8006b2c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d032      	beq.n	8008172 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2240      	movs	r2, #64	@ 0x40
 8008110:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008114:	2301      	movs	r3, #1
 8008116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008118:	e016      	b.n	8008148 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	f107 010c 	add.w	r1, r7, #12
 8008128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812a:	f7ff fdad 	bl	8007c88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff ff00 	bl	8007f34 <dir_find>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800813a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	3301      	adds	r3, #1
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	2b63      	cmp	r3, #99	@ 0x63
 800814c:	d9e5      	bls.n	800811a <dir_register+0x66>
 800814e:	e000      	b.n	8008152 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008150:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008154:	2b64      	cmp	r3, #100	@ 0x64
 8008156:	d101      	bne.n	800815c <dir_register+0xa8>
 8008158:	2307      	movs	r3, #7
 800815a:	e09c      	b.n	8008296 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800815c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008160:	2b04      	cmp	r3, #4
 8008162:	d002      	beq.n	800816a <dir_register+0xb6>
 8008164:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008168:	e095      	b.n	8008296 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800816a:	7dfa      	ldrb	r2, [r7, #23]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <dir_register+0xd8>
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	330c      	adds	r3, #12
 8008180:	4a47      	ldr	r2, [pc, #284]	@ (80082a0 <dir_register+0x1ec>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	3301      	adds	r3, #1
 800818a:	e000      	b.n	800818e <dir_register+0xda>
 800818c:	2301      	movs	r3, #1
 800818e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008190:	6a39      	ldr	r1, [r7, #32]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fbb5 	bl	8007902 <dir_alloc>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800819e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d148      	bne.n	8008238 <dir_register+0x184>
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	623b      	str	r3, [r7, #32]
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d042      	beq.n	8008238 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	695a      	ldr	r2, [r3, #20]
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	015b      	lsls	r3, r3, #5
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fa5f 	bl	8007682 <dir_sdi>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80081ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d132      	bne.n	8008238 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3324      	adds	r3, #36	@ 0x24
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7ff fde4 	bl	8007da4 <sum_sfn>
 80081dc:	4603      	mov	r3, r0
 80081de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	69db      	ldr	r3, [r3, #28]
 80081e4:	4619      	mov	r1, r3
 80081e6:	69f8      	ldr	r0, [r7, #28]
 80081e8:	f7fe fece 	bl	8006f88 <move_window>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80081f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11d      	bne.n	8008236 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	68d8      	ldr	r0, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a19      	ldr	r1, [r3, #32]
 8008202:	6a3b      	ldr	r3, [r7, #32]
 8008204:	b2da      	uxtb	r2, r3
 8008206:	7efb      	ldrb	r3, [r7, #27]
 8008208:	f7ff fcd6 	bl	8007bb8 <put_lfn>
				fs->wflag = 1;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	2201      	movs	r2, #1
 8008210:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008212:	2100      	movs	r1, #0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7ff faaf 	bl	8007778 <dir_next>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008220:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008224:	2b00      	cmp	r3, #0
 8008226:	d107      	bne.n	8008238 <dir_register+0x184>
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	3b01      	subs	r3, #1
 800822c:	623b      	str	r3, [r7, #32]
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1d5      	bne.n	80081e0 <dir_register+0x12c>
 8008234:	e000      	b.n	8008238 <dir_register+0x184>
				if (res != FR_OK) break;
 8008236:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008238:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800823c:	2b00      	cmp	r3, #0
 800823e:	d128      	bne.n	8008292 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	4619      	mov	r1, r3
 8008246:	69f8      	ldr	r0, [r7, #28]
 8008248:	f7fe fe9e 	bl	8006f88 <move_window>
 800824c:	4603      	mov	r3, r0
 800824e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008256:	2b00      	cmp	r3, #0
 8008258:	d11b      	bne.n	8008292 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	2220      	movs	r2, #32
 8008260:	2100      	movs	r1, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fc83 	bl	8006b6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a18      	ldr	r0, [r3, #32]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3324      	adds	r3, #36	@ 0x24
 8008270:	220b      	movs	r2, #11
 8008272:	4619      	mov	r1, r3
 8008274:	f7fe fc5a 	bl	8006b2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	330c      	adds	r3, #12
 8008284:	f002 0218 	and.w	r2, r2, #24
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2201      	movs	r2, #1
 8008290:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008292:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	@ 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	4ec4ec4f 	.word	0x4ec4ec4f

080082a4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d007      	beq.n	80082d2 <dir_remove+0x2e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff f9da 	bl	8007682 <dir_sdi>
 80082ce:	4603      	mov	r3, r0
 80082d0:	e000      	b.n	80082d4 <dir_remove+0x30>
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d128      	bne.n	800832e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6938      	ldr	r0, [r7, #16]
 80082e4:	f7fe fe50 	bl	8006f88 <move_window>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d115      	bne.n	800831e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	22e5      	movs	r2, #229	@ 0xe5
 80082f8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	2201      	movs	r2, #1
 80082fe:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	429a      	cmp	r2, r3
 8008308:	d90b      	bls.n	8008322 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800830a:	2100      	movs	r1, #0
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff fa33 	bl	8007778 <dir_next>
 8008312:	4603      	mov	r3, r0
 8008314:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0df      	beq.n	80082dc <dir_remove+0x38>
 800831c:	e002      	b.n	8008324 <dir_remove+0x80>
			if (res != FR_OK) break;
 800831e:	bf00      	nop
 8008320:	e000      	b.n	8008324 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008322:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d101      	bne.n	800832e <dir_remove+0x8a>
 800832a:	2302      	movs	r3, #2
 800832c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800832e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 80ca 	beq.w	80084ec <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008360:	d032      	beq.n	80083c8 <get_fileinfo+0x90>
			i = j = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800836a:	e01b      	b.n	80083a4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800836c:	89fb      	ldrh	r3, [r7, #14]
 800836e:	2100      	movs	r1, #0
 8008370:	4618      	mov	r0, r3
 8008372:	f001 fe83 	bl	800a07c <ff_convert>
 8008376:	4603      	mov	r3, r0
 8008378:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800837a:	89fb      	ldrh	r3, [r7, #14]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d102      	bne.n	8008386 <get_fileinfo+0x4e>
 8008380:	2300      	movs	r3, #0
 8008382:	61fb      	str	r3, [r7, #28]
 8008384:	e01a      	b.n	80083bc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	2bfe      	cmp	r3, #254	@ 0xfe
 800838a:	d902      	bls.n	8008392 <get_fileinfo+0x5a>
 800838c:	2300      	movs	r3, #0
 800838e:	61fb      	str	r3, [r7, #28]
 8008390:	e014      	b.n	80083bc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	61fa      	str	r2, [r7, #28]
 8008398:	89fa      	ldrh	r2, [r7, #14]
 800839a:	b2d1      	uxtb	r1, r2
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	4413      	add	r3, r2
 80083a0:	460a      	mov	r2, r1
 80083a2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	1c59      	adds	r1, r3, #1
 80083ac:	61b9      	str	r1, [r7, #24]
 80083ae:	005b      	lsls	r3, r3, #1
 80083b0:	4413      	add	r3, r2
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	81fb      	strh	r3, [r7, #14]
 80083b6:	89fb      	ldrh	r3, [r7, #14]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1d7      	bne.n	800836c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	3316      	adds	r3, #22
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61bb      	str	r3, [r7, #24]
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	4413      	add	r3, r2
 80083d6:	3316      	adds	r3, #22
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80083dc:	e04d      	b.n	800847a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1a      	ldr	r2, [r3, #32]
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	1c59      	adds	r1, r3, #1
 80083e6:	61f9      	str	r1, [r7, #28]
 80083e8:	4413      	add	r3, r2
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d041      	beq.n	8008478 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d101      	bne.n	80083fe <get_fileinfo+0xc6>
 80083fa:	23e5      	movs	r3, #229	@ 0xe5
 80083fc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	2b09      	cmp	r3, #9
 8008402:	d10f      	bne.n	8008424 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8008404:	89bb      	ldrh	r3, [r7, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d105      	bne.n	8008416 <get_fileinfo+0xde>
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	4413      	add	r3, r2
 8008410:	3316      	adds	r3, #22
 8008412:	222e      	movs	r2, #46	@ 0x2e
 8008414:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	61ba      	str	r2, [r7, #24]
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	4413      	add	r3, r2
 8008420:	222e      	movs	r2, #46	@ 0x2e
 8008422:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	4413      	add	r3, r2
 800842a:	3309      	adds	r3, #9
 800842c:	7dfa      	ldrb	r2, [r7, #23]
 800842e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008430:	89bb      	ldrh	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d11c      	bne.n	8008470 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	2b40      	cmp	r3, #64	@ 0x40
 800843a:	d913      	bls.n	8008464 <get_fileinfo+0x12c>
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008440:	d810      	bhi.n	8008464 <get_fileinfo+0x12c>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	330c      	adds	r3, #12
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d901      	bls.n	8008456 <get_fileinfo+0x11e>
 8008452:	2310      	movs	r3, #16
 8008454:	e000      	b.n	8008458 <get_fileinfo+0x120>
 8008456:	2308      	movs	r3, #8
 8008458:	4013      	ands	r3, r2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	3320      	adds	r3, #32
 8008462:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	4413      	add	r3, r2
 800846a:	3316      	adds	r3, #22
 800846c:	7dfa      	ldrb	r2, [r7, #23]
 800846e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	3301      	adds	r3, #1
 8008474:	61bb      	str	r3, [r7, #24]
 8008476:	e000      	b.n	800847a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008478:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	2b0a      	cmp	r3, #10
 800847e:	d9ae      	bls.n	80083de <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008480:	89bb      	ldrh	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	4413      	add	r3, r2
 800848c:	3316      	adds	r3, #22
 800848e:	2200      	movs	r2, #0
 8008490:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	330c      	adds	r3, #12
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <get_fileinfo+0x16a>
 800849e:	2300      	movs	r3, #0
 80084a0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	4413      	add	r3, r2
 80084a8:	3309      	adds	r3, #9
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	7ada      	ldrb	r2, [r3, #11]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	331c      	adds	r3, #28
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe faca 	bl	8006a58 <ld_dword>
 80084c4:	4602      	mov	r2, r0
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a1b      	ldr	r3, [r3, #32]
 80084ce:	3316      	adds	r3, #22
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fac1 	bl	8006a58 <ld_dword>
 80084d6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	80da      	strh	r2, [r3, #6]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	0c1b      	lsrs	r3, r3, #16
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	809a      	strh	r2, [r3, #4]
 80084ea:	e000      	b.n	80084ee <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80084ec:	bf00      	nop
}
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b08a      	sub	sp, #40	@ 0x28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	2300      	movs	r3, #0
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	61ba      	str	r2, [r7, #24]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	4413      	add	r3, r2
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008522:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008524:	2b1f      	cmp	r3, #31
 8008526:	d940      	bls.n	80085aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008528:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800852a:	2b2f      	cmp	r3, #47	@ 0x2f
 800852c:	d006      	beq.n	800853c <create_name+0x48>
 800852e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008530:	2b5c      	cmp	r3, #92	@ 0x5c
 8008532:	d110      	bne.n	8008556 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008534:	e002      	b.n	800853c <create_name+0x48>
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	3301      	adds	r3, #1
 800853a:	61bb      	str	r3, [r7, #24]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	4413      	add	r3, r2
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b2f      	cmp	r3, #47	@ 0x2f
 8008546:	d0f6      	beq.n	8008536 <create_name+0x42>
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	4413      	add	r3, r2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b5c      	cmp	r3, #92	@ 0x5c
 8008552:	d0f0      	beq.n	8008536 <create_name+0x42>
			break;
 8008554:	e02a      	b.n	80085ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2bfe      	cmp	r3, #254	@ 0xfe
 800855a:	d901      	bls.n	8008560 <create_name+0x6c>
 800855c:	2306      	movs	r3, #6
 800855e:	e17d      	b.n	800885c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008562:	b2db      	uxtb	r3, r3
 8008564:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008568:	2101      	movs	r1, #1
 800856a:	4618      	mov	r0, r3
 800856c:	f001 fd86 	bl	800a07c <ff_convert>
 8008570:	4603      	mov	r3, r0
 8008572:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <create_name+0x8a>
 800857a:	2306      	movs	r3, #6
 800857c:	e16e      	b.n	800885c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800857e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008580:	2b7f      	cmp	r3, #127	@ 0x7f
 8008582:	d809      	bhi.n	8008598 <create_name+0xa4>
 8008584:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008586:	4619      	mov	r1, r3
 8008588:	488d      	ldr	r0, [pc, #564]	@ (80087c0 <create_name+0x2cc>)
 800858a:	f7fe fb32 	bl	8006bf2 <chk_chr>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <create_name+0xa4>
 8008594:	2306      	movs	r3, #6
 8008596:	e161      	b.n	800885c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	617a      	str	r2, [r7, #20]
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80085a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80085a8:	e7b4      	b.n	8008514 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80085aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	441a      	add	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80085b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085b8:	2b1f      	cmp	r3, #31
 80085ba:	d801      	bhi.n	80085c0 <create_name+0xcc>
 80085bc:	2304      	movs	r3, #4
 80085be:	e000      	b.n	80085c2 <create_name+0xce>
 80085c0:	2300      	movs	r3, #0
 80085c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80085c6:	e011      	b.n	80085ec <create_name+0xf8>
		w = lfn[di - 1];
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80085ce:	4413      	add	r3, r2
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4413      	add	r3, r2
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80085da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085dc:	2b20      	cmp	r3, #32
 80085de:	d002      	beq.n	80085e6 <create_name+0xf2>
 80085e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80085e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80085e4:	d106      	bne.n	80085f4 <create_name+0x100>
		di--;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1ea      	bne.n	80085c8 <create_name+0xd4>
 80085f2:	e000      	b.n	80085f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80085f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4413      	add	r3, r2
 80085fe:	2200      	movs	r2, #0
 8008600:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <create_name+0x118>
 8008608:	2306      	movs	r3, #6
 800860a:	e127      	b.n	800885c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	3324      	adds	r3, #36	@ 0x24
 8008610:	220b      	movs	r2, #11
 8008612:	2120      	movs	r1, #32
 8008614:	4618      	mov	r0, r3
 8008616:	f7fe faaa 	bl	8006b6e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800861a:	2300      	movs	r3, #0
 800861c:	61bb      	str	r3, [r7, #24]
 800861e:	e002      	b.n	8008626 <create_name+0x132>
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	3301      	adds	r3, #1
 8008624:	61bb      	str	r3, [r7, #24]
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	005b      	lsls	r3, r3, #1
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	2b20      	cmp	r3, #32
 8008632:	d0f5      	beq.n	8008620 <create_name+0x12c>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008640:	d0ee      	beq.n	8008620 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d009      	beq.n	800865c <create_name+0x168>
 8008648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800864c:	f043 0303 	orr.w	r3, r3, #3
 8008650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008654:	e002      	b.n	800865c <create_name+0x168>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	3b01      	subs	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <create_name+0x182>
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008668:	4413      	add	r3, r2
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4413      	add	r3, r2
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	2b2e      	cmp	r3, #46	@ 0x2e
 8008674:	d1ef      	bne.n	8008656 <create_name+0x162>

	i = b = 0; ni = 8;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800867c:	2300      	movs	r3, #0
 800867e:	623b      	str	r3, [r7, #32]
 8008680:	2308      	movs	r3, #8
 8008682:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	61ba      	str	r2, [r7, #24]
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008694:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8090 	beq.w	80087bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800869c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d006      	beq.n	80086b0 <create_name+0x1bc>
 80086a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80086a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80086a6:	d10a      	bne.n	80086be <create_name+0x1ca>
 80086a8:	69ba      	ldr	r2, [r7, #24]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d006      	beq.n	80086be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80086b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086b4:	f043 0303 	orr.w	r3, r3, #3
 80086b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086bc:	e07d      	b.n	80087ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80086be:	6a3a      	ldr	r2, [r7, #32]
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d203      	bcs.n	80086ce <create_name+0x1da>
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d123      	bne.n	8008716 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	2b0b      	cmp	r3, #11
 80086d2:	d106      	bne.n	80086e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80086d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d8:	f043 0303 	orr.w	r3, r3, #3
 80086dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086e0:	e075      	b.n	80087ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d005      	beq.n	80086f6 <create_name+0x202>
 80086ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086ee:	f043 0303 	orr.w	r3, r3, #3
 80086f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d866      	bhi.n	80087cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	61bb      	str	r3, [r7, #24]
 8008702:	2308      	movs	r3, #8
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	230b      	movs	r3, #11
 8008708:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800870a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008714:	e051      	b.n	80087ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008718:	2b7f      	cmp	r3, #127	@ 0x7f
 800871a:	d914      	bls.n	8008746 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800871c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f001 fcab 	bl	800a07c <ff_convert>
 8008726:	4603      	mov	r3, r0
 8008728:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800872a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <create_name+0x246>
 8008730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008732:	3b80      	subs	r3, #128	@ 0x80
 8008734:	4a23      	ldr	r2, [pc, #140]	@ (80087c4 <create_name+0x2d0>)
 8008736:	5cd3      	ldrb	r3, [r2, r3]
 8008738:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800873a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800873e:	f043 0302 	orr.w	r3, r3, #2
 8008742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <create_name+0x268>
 800874c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800874e:	4619      	mov	r1, r3
 8008750:	481d      	ldr	r0, [pc, #116]	@ (80087c8 <create_name+0x2d4>)
 8008752:	f7fe fa4e 	bl	8006bf2 <chk_chr>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d008      	beq.n	800876e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800875c:	235f      	movs	r3, #95	@ 0x5f
 800875e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008764:	f043 0303 	orr.w	r3, r3, #3
 8008768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800876c:	e01b      	b.n	80087a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800876e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	d909      	bls.n	8008788 <create_name+0x294>
 8008774:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008776:	2b5a      	cmp	r3, #90	@ 0x5a
 8008778:	d806      	bhi.n	8008788 <create_name+0x294>
					b |= 2;
 800877a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800877e:	f043 0302 	orr.w	r3, r3, #2
 8008782:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008786:	e00e      	b.n	80087a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008788:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800878a:	2b60      	cmp	r3, #96	@ 0x60
 800878c:	d90b      	bls.n	80087a6 <create_name+0x2b2>
 800878e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008790:	2b7a      	cmp	r3, #122	@ 0x7a
 8008792:	d808      	bhi.n	80087a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008794:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008798:	f043 0301 	orr.w	r3, r3, #1
 800879c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80087a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087a2:	3b20      	subs	r3, #32
 80087a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	623a      	str	r2, [r7, #32]
 80087ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80087ae:	b2d1      	uxtb	r1, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	460a      	mov	r2, r1
 80087b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80087ba:	e763      	b.n	8008684 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80087bc:	bf00      	nop
 80087be:	e006      	b.n	80087ce <create_name+0x2da>
 80087c0:	0800b350 	.word	0x0800b350
 80087c4:	0800b3cc 	.word	0x0800b3cc
 80087c8:	0800b35c 	.word	0x0800b35c
			if (si > di) break;			/* No extension */
 80087cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80087d4:	2be5      	cmp	r3, #229	@ 0xe5
 80087d6:	d103      	bne.n	80087e0 <create_name+0x2ec>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2205      	movs	r2, #5
 80087dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	2b08      	cmp	r3, #8
 80087e4:	d104      	bne.n	80087f0 <create_name+0x2fc>
 80087e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80087f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087f4:	f003 030c 	and.w	r3, r3, #12
 80087f8:	2b0c      	cmp	r3, #12
 80087fa:	d005      	beq.n	8008808 <create_name+0x314>
 80087fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	2b03      	cmp	r3, #3
 8008806:	d105      	bne.n	8008814 <create_name+0x320>
 8008808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800880c:	f043 0302 	orr.w	r3, r3, #2
 8008810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d117      	bne.n	8008850 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008824:	f003 0303 	and.w	r3, r3, #3
 8008828:	2b01      	cmp	r3, #1
 800882a:	d105      	bne.n	8008838 <create_name+0x344>
 800882c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008830:	f043 0310 	orr.w	r3, r3, #16
 8008834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008838:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800883c:	f003 030c 	and.w	r3, r3, #12
 8008840:	2b04      	cmp	r3, #4
 8008842:	d105      	bne.n	8008850 <create_name+0x35c>
 8008844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008848:	f043 0308 	orr.w	r3, r3, #8
 800884c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008856:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800885a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	@ 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008878:	e002      	b.n	8008880 <follow_path+0x1c>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b2f      	cmp	r3, #47	@ 0x2f
 8008886:	d0f8      	beq.n	800887a <follow_path+0x16>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b5c      	cmp	r3, #92	@ 0x5c
 800888e:	d0f4      	beq.n	800887a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	2200      	movs	r2, #0
 8008894:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b1f      	cmp	r3, #31
 800889c:	d80a      	bhi.n	80088b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2280      	movs	r2, #128	@ 0x80
 80088a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80088a6:	2100      	movs	r1, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fe feea 	bl	8007682 <dir_sdi>
 80088ae:	4603      	mov	r3, r0
 80088b0:	75fb      	strb	r3, [r7, #23]
 80088b2:	e043      	b.n	800893c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088b4:	463b      	mov	r3, r7
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fe1b 	bl	80084f4 <create_name>
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d134      	bne.n	8008932 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7ff fb33 	bl	8007f34 <dir_find>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80088d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80088da:	7dfb      	ldrb	r3, [r7, #23]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d127      	bne.n	8008936 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d122      	bne.n	8008936 <follow_path+0xd2>
 80088f0:	2305      	movs	r3, #5
 80088f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80088f4:	e01f      	b.n	8008936 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088f6:	7afb      	ldrb	r3, [r7, #11]
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d11c      	bne.n	800893a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	799b      	ldrb	r3, [r3, #6]
 8008904:	f003 0310 	and.w	r3, r3, #16
 8008908:	2b00      	cmp	r3, #0
 800890a:	d102      	bne.n	8008912 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800890c:	2305      	movs	r3, #5
 800890e:	75fb      	strb	r3, [r7, #23]
 8008910:	e014      	b.n	800893c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008920:	4413      	add	r3, r2
 8008922:	4619      	mov	r1, r3
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff f833 	bl	8007990 <ld_clust>
 800892a:	4602      	mov	r2, r0
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008930:	e7c0      	b.n	80088b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008932:	bf00      	nop
 8008934:	e002      	b.n	800893c <follow_path+0xd8>
				break;
 8008936:	bf00      	nop
 8008938:	e000      	b.n	800893c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800893a:	bf00      	nop
			}
		}
	}

	return res;
 800893c:	7dfb      	ldrb	r3, [r7, #23]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800894e:	f04f 33ff 	mov.w	r3, #4294967295
 8008952:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d031      	beq.n	80089c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	e002      	b.n	800896a <get_ldnumber+0x24>
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	3301      	adds	r3, #1
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b1f      	cmp	r3, #31
 8008970:	d903      	bls.n	800897a <get_ldnumber+0x34>
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	2b3a      	cmp	r3, #58	@ 0x3a
 8008978:	d1f4      	bne.n	8008964 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008980:	d11c      	bne.n	80089bc <get_ldnumber+0x76>
			tp = *path;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	60fa      	str	r2, [r7, #12]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	3b30      	subs	r3, #48	@ 0x30
 8008992:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b09      	cmp	r3, #9
 8008998:	d80e      	bhi.n	80089b8 <get_ldnumber+0x72>
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d10a      	bne.n	80089b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <get_ldnumber+0x72>
					vol = (int)i;
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3301      	adds	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	e002      	b.n	80089c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80089c0:	693b      	ldr	r3, [r7, #16]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	70da      	strb	r2, [r3, #3]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295
 80089e6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7fe facc 	bl	8006f88 <move_window>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <check_fs+0x2a>
 80089f6:	2304      	movs	r3, #4
 80089f8:	e038      	b.n	8008a6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3334      	adds	r3, #52	@ 0x34
 80089fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe f810 	bl	8006a28 <ld_word>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d001      	beq.n	8008a18 <check_fs+0x48>
 8008a14:	2303      	movs	r3, #3
 8008a16:	e029      	b.n	8008a6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a1e:	2be9      	cmp	r3, #233	@ 0xe9
 8008a20:	d009      	beq.n	8008a36 <check_fs+0x66>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a28:	2beb      	cmp	r3, #235	@ 0xeb
 8008a2a:	d11e      	bne.n	8008a6a <check_fs+0x9a>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008a32:	2b90      	cmp	r3, #144	@ 0x90
 8008a34:	d119      	bne.n	8008a6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3334      	adds	r3, #52	@ 0x34
 8008a3a:	3336      	adds	r3, #54	@ 0x36
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fe f80b 	bl	8006a58 <ld_dword>
 8008a42:	4603      	mov	r3, r0
 8008a44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a48:	4a0a      	ldr	r2, [pc, #40]	@ (8008a74 <check_fs+0xa4>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d101      	bne.n	8008a52 <check_fs+0x82>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e00c      	b.n	8008a6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3334      	adds	r3, #52	@ 0x34
 8008a56:	3352      	adds	r3, #82	@ 0x52
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fd fffd 	bl	8006a58 <ld_dword>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	4a05      	ldr	r2, [pc, #20]	@ (8008a78 <check_fs+0xa8>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d101      	bne.n	8008a6a <check_fs+0x9a>
 8008a66:	2300      	movs	r3, #0
 8008a68:	e000      	b.n	8008a6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008a6a:	2302      	movs	r3, #2
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	00544146 	.word	0x00544146
 8008a78:	33544146 	.word	0x33544146

08008a7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b096      	sub	sp, #88	@ 0x58
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff ff58 	bl	8008946 <get_ldnumber>
 8008a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	da01      	bge.n	8008aa2 <find_volume+0x26>
 8008a9e:	230b      	movs	r3, #11
 8008aa0:	e22d      	b.n	8008efe <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008aa2:	4aa1      	ldr	r2, [pc, #644]	@ (8008d28 <find_volume+0x2ac>)
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <find_volume+0x3a>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	e223      	b.n	8008efe <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008aba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01a      	beq.n	8008b02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fd ff0b 	bl	80068ec <disk_status>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008adc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10c      	bne.n	8008b02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <find_volume+0x82>
 8008aee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008af2:	f003 0304 	and.w	r3, r3, #4
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008afa:	230a      	movs	r3, #10
 8008afc:	e1ff      	b.n	8008efe <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008afe:	2300      	movs	r3, #0
 8008b00:	e1fd      	b.n	8008efe <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	785b      	ldrb	r3, [r3, #1]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fd ff03 	bl	8006920 <disk_initialize>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e1e6      	b.n	8008efe <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <find_volume+0xca>
 8008b36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008b42:	230a      	movs	r3, #10
 8008b44:	e1db      	b.n	8008efe <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008b4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008b4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b4e:	f7ff ff3f 	bl	80089d0 <check_fs>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008b58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d149      	bne.n	8008bf4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b60:	2300      	movs	r3, #0
 8008b62:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b64:	e01e      	b.n	8008ba4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b6e:	011b      	lsls	r3, r3, #4
 8008b70:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008b74:	4413      	add	r3, r2
 8008b76:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d006      	beq.n	8008b90 <find_volume+0x114>
 8008b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b84:	3308      	adds	r3, #8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd ff66 	bl	8006a58 <ld_dword>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	e000      	b.n	8008b92 <find_volume+0x116>
 8008b90:	2200      	movs	r2, #0
 8008b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	3358      	adds	r3, #88	@ 0x58
 8008b98:	443b      	add	r3, r7
 8008b9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ba4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d9dd      	bls.n	8008b66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008baa:	2300      	movs	r3, #0
 8008bac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <find_volume+0x13e>
 8008bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	3358      	adds	r3, #88	@ 0x58
 8008bc0:	443b      	add	r3, r7
 8008bc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008bc6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <find_volume+0x15e>
 8008bce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008bd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bd2:	f7ff fefd 	bl	80089d0 <check_fs>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	e000      	b.n	8008bdc <find_volume+0x160>
 8008bda:	2303      	movs	r3, #3
 8008bdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008be0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d905      	bls.n	8008bf4 <find_volume+0x178>
 8008be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bea:	3301      	adds	r3, #1
 8008bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d9e2      	bls.n	8008bba <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d101      	bne.n	8008c00 <find_volume+0x184>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e17e      	b.n	8008efe <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d901      	bls.n	8008c0c <find_volume+0x190>
 8008c08:	230d      	movs	r3, #13
 8008c0a:	e178      	b.n	8008efe <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0e:	3334      	adds	r3, #52	@ 0x34
 8008c10:	330b      	adds	r3, #11
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd ff08 	bl	8006a28 <ld_word>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c1e:	d001      	beq.n	8008c24 <find_volume+0x1a8>
 8008c20:	230d      	movs	r3, #13
 8008c22:	e16c      	b.n	8008efe <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c26:	3334      	adds	r3, #52	@ 0x34
 8008c28:	3316      	adds	r3, #22
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fd fefc 	bl	8006a28 <ld_word>
 8008c30:	4603      	mov	r3, r0
 8008c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d106      	bne.n	8008c48 <find_volume+0x1cc>
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	3334      	adds	r3, #52	@ 0x34
 8008c3e:	3324      	adds	r3, #36	@ 0x24
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fd ff09 	bl	8006a58 <ld_dword>
 8008c46:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c4c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c50:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5a:	789b      	ldrb	r3, [r3, #2]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d005      	beq.n	8008c6c <find_volume+0x1f0>
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	789b      	ldrb	r3, [r3, #2]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d001      	beq.n	8008c6c <find_volume+0x1f0>
 8008c68:	230d      	movs	r3, #13
 8008c6a:	e148      	b.n	8008efe <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	789b      	ldrb	r3, [r3, #2]
 8008c70:	461a      	mov	r2, r3
 8008c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c74:	fb02 f303 	mul.w	r3, r2, r3
 8008c78:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c80:	461a      	mov	r2, r3
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	895b      	ldrh	r3, [r3, #10]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d008      	beq.n	8008ca0 <find_volume+0x224>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	895b      	ldrh	r3, [r3, #10]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c96:	895b      	ldrh	r3, [r3, #10]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <find_volume+0x228>
 8008ca0:	230d      	movs	r3, #13
 8008ca2:	e12c      	b.n	8008efe <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca6:	3334      	adds	r3, #52	@ 0x34
 8008ca8:	3311      	adds	r3, #17
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fd febc 	bl	8006a28 <ld_word>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	f003 030f 	and.w	r3, r3, #15
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <find_volume+0x24e>
 8008cc6:	230d      	movs	r3, #13
 8008cc8:	e119      	b.n	8008efe <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ccc:	3334      	adds	r3, #52	@ 0x34
 8008cce:	3313      	adds	r3, #19
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fd fea9 	bl	8006a28 <ld_word>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d106      	bne.n	8008cee <find_volume+0x272>
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce2:	3334      	adds	r3, #52	@ 0x34
 8008ce4:	3320      	adds	r3, #32
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fd feb6 	bl	8006a58 <ld_dword>
 8008cec:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf0:	3334      	adds	r3, #52	@ 0x34
 8008cf2:	330e      	adds	r3, #14
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fe97 	bl	8006a28 <ld_word>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008cfe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <find_volume+0x28c>
 8008d04:	230d      	movs	r3, #13
 8008d06:	e0fa      	b.n	8008efe <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008d08:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d0c:	4413      	add	r3, r2
 8008d0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d10:	8912      	ldrh	r2, [r2, #8]
 8008d12:	0912      	lsrs	r2, r2, #4
 8008d14:	b292      	uxth	r2, r2
 8008d16:	4413      	add	r3, r2
 8008d18:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d204      	bcs.n	8008d2c <find_volume+0x2b0>
 8008d22:	230d      	movs	r3, #13
 8008d24:	e0eb      	b.n	8008efe <find_volume+0x482>
 8008d26:	bf00      	nop
 8008d28:	200006fc 	.word	0x200006fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d34:	8952      	ldrh	r2, [r2, #10]
 8008d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d3a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <find_volume+0x2ca>
 8008d42:	230d      	movs	r3, #13
 8008d44:	e0db      	b.n	8008efe <find_volume+0x482>
		fmt = FS_FAT32;
 8008d46:	2303      	movs	r3, #3
 8008d48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d802      	bhi.n	8008d5c <find_volume+0x2e0>
 8008d56:	2302      	movs	r3, #2
 8008d58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d802      	bhi.n	8008d6c <find_volume+0x2f0>
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	1c9a      	adds	r2, r3, #2
 8008d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d72:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d78:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d7e:	441a      	add	r2, r3
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008d84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d88:	441a      	add	r2, r3
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d11e      	bne.n	8008dd4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d98:	3334      	adds	r3, #52	@ 0x34
 8008d9a:	332a      	adds	r3, #42	@ 0x2a
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fd fe43 	bl	8006a28 <ld_word>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <find_volume+0x330>
 8008da8:	230d      	movs	r3, #13
 8008daa:	e0a8      	b.n	8008efe <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dae:	891b      	ldrh	r3, [r3, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <find_volume+0x33c>
 8008db4:	230d      	movs	r3, #13
 8008db6:	e0a2      	b.n	8008efe <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	3334      	adds	r3, #52	@ 0x34
 8008dbc:	332c      	adds	r3, #44	@ 0x2c
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fd fe4a 	bl	8006a58 <ld_dword>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dd2:	e01f      	b.n	8008e14 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	891b      	ldrh	r3, [r3, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <find_volume+0x364>
 8008ddc:	230d      	movs	r3, #13
 8008dde:	e08e      	b.n	8008efe <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de6:	441a      	add	r2, r3
 8008de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dea:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008dec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d103      	bne.n	8008dfc <find_volume+0x380>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	e00a      	b.n	8008e12 <find_volume+0x396>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	699a      	ldr	r2, [r3, #24]
 8008e00:	4613      	mov	r3, r2
 8008e02:	005b      	lsls	r3, r3, #1
 8008e04:	4413      	add	r3, r2
 8008e06:	085a      	lsrs	r2, r3, #1
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008e12:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	69da      	ldr	r2, [r3, #28]
 8008e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e1a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008e1e:	0a5b      	lsrs	r3, r3, #9
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d201      	bcs.n	8008e28 <find_volume+0x3ac>
 8008e24:	230d      	movs	r3, #13
 8008e26:	e06a      	b.n	8008efe <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2e:	615a      	str	r2, [r3, #20]
 8008e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3a:	2280      	movs	r2, #128	@ 0x80
 8008e3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d149      	bne.n	8008eda <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	3334      	adds	r3, #52	@ 0x34
 8008e4a:	3330      	adds	r3, #48	@ 0x30
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd fdeb 	bl	8006a28 <ld_word>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d140      	bne.n	8008eda <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e60:	f7fe f892 	bl	8006f88 <move_window>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d137      	bne.n	8008eda <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e72:	3334      	adds	r3, #52	@ 0x34
 8008e74:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fd fdd5 	bl	8006a28 <ld_word>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d127      	bne.n	8008eda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8c:	3334      	adds	r3, #52	@ 0x34
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fd fde2 	bl	8006a58 <ld_dword>
 8008e94:	4603      	mov	r3, r0
 8008e96:	4a1c      	ldr	r2, [pc, #112]	@ (8008f08 <find_volume+0x48c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d11e      	bne.n	8008eda <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9e:	3334      	adds	r3, #52	@ 0x34
 8008ea0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fd fdd7 	bl	8006a58 <ld_dword>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4a17      	ldr	r2, [pc, #92]	@ (8008f0c <find_volume+0x490>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d113      	bne.n	8008eda <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	3334      	adds	r3, #52	@ 0x34
 8008eb6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fd fdcc 	bl	8006a58 <ld_dword>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	3334      	adds	r3, #52	@ 0x34
 8008eca:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd fdc2 	bl	8006a58 <ld_dword>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008ee0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <find_volume+0x494>)
 8008ee4:	881b      	ldrh	r3, [r3, #0]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <find_volume+0x494>)
 8008eec:	801a      	strh	r2, [r3, #0]
 8008eee:	4b08      	ldr	r3, [pc, #32]	@ (8008f10 <find_volume+0x494>)
 8008ef0:	881a      	ldrh	r2, [r3, #0]
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ef8:	f7fd ffde 	bl	8006eb8 <clear_lock>
#endif
	return FR_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3758      	adds	r7, #88	@ 0x58
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	41615252 	.word	0x41615252
 8008f0c:	61417272 	.word	0x61417272
 8008f10:	20000700 	.word	0x20000700

08008f14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008f1e:	2309      	movs	r3, #9
 8008f20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01c      	beq.n	8008f62 <validate+0x4e>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d018      	beq.n	8008f62 <validate+0x4e>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d013      	beq.n	8008f62 <validate+0x4e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	889a      	ldrh	r2, [r3, #4]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	88db      	ldrh	r3, [r3, #6]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d10c      	bne.n	8008f62 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	785b      	ldrb	r3, [r3, #1]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fd fccc 	bl	80068ec <disk_status>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <validate+0x4e>
			res = FR_OK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <validate+0x5a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	e000      	b.n	8008f70 <validate+0x5c>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	6013      	str	r3, [r2, #0]
	return res;
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f92:	f107 0310 	add.w	r3, r7, #16
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fcd5 	bl	8008946 <get_ldnumber>
 8008f9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	da01      	bge.n	8008fa8 <f_mount+0x28>
 8008fa4:	230b      	movs	r3, #11
 8008fa6:	e02b      	b.n	8009000 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fa8:	4a17      	ldr	r2, [pc, #92]	@ (8009008 <f_mount+0x88>)
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d005      	beq.n	8008fc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008fb8:	69b8      	ldr	r0, [r7, #24]
 8008fba:	f7fd ff7d 	bl	8006eb8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	490d      	ldr	r1, [pc, #52]	@ (8009008 <f_mount+0x88>)
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d002      	beq.n	8008fe6 <f_mount+0x66>
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d001      	beq.n	8008fea <f_mount+0x6a>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e00a      	b.n	8009000 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008fea:	f107 010c 	add.w	r1, r7, #12
 8008fee:	f107 0308 	add.w	r3, r7, #8
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fd41 	bl	8008a7c <find_volume>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	200006fc 	.word	0x200006fc

0800900c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 8009012:	af00      	add	r7, sp, #0
 8009014:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009018:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800901c:	6018      	str	r0, [r3, #0]
 800901e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009022:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8009026:	6019      	str	r1, [r3, #0]
 8009028:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800902c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009030:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009032:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009036:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <f_open+0x38>
 8009040:	2309      	movs	r3, #9
 8009042:	e291      	b.n	8009568 <f_open+0x55c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009044:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009048:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800904c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009050:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800905a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800905c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009060:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009064:	781a      	ldrb	r2, [r3, #0]
 8009066:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff fd04 	bl	8008a7c <find_volume>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800907a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800907e:	2b00      	cmp	r3, #0
 8009080:	f040 8265 	bne.w	800954e <f_open+0x542>
		dj.obj.fs = fs;
 8009084:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009088:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800908c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009090:	f107 0214 	add.w	r2, r7, #20
 8009094:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009096:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800909a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fbdc 	bl	8008864 <follow_path>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80090b2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d11c      	bne.n	80090f4 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80090ba:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80090be:	b25b      	sxtb	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	da03      	bge.n	80090cc <f_open+0xc0>
				res = FR_INVALID_NAME;
 80090c4:	2306      	movs	r3, #6
 80090c6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80090ca:	e013      	b.n	80090f4 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090d0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	bf8c      	ite	hi
 80090da:	2301      	movhi	r3, #1
 80090dc:	2300      	movls	r3, #0
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fd fd9d 	bl	8006c28 <chk_lock>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80090f4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090f8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 031c 	and.w	r3, r3, #28
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 80a7 	beq.w	8009256 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8009108:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800910c:	2b00      	cmp	r3, #0
 800910e:	d01f      	beq.n	8009150 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009110:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009114:	2b04      	cmp	r3, #4
 8009116:	d10e      	bne.n	8009136 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009118:	f7fd fde2 	bl	8006ce0 <enq_lock>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d006      	beq.n	8009130 <f_open+0x124>
 8009122:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009126:	4618      	mov	r0, r3
 8009128:	f7fe ffc4 	bl	80080b4 <dir_register>
 800912c:	4603      	mov	r3, r0
 800912e:	e000      	b.n	8009132 <f_open+0x126>
 8009130:	2312      	movs	r3, #18
 8009132:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009136:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800913a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800913e:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8009142:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8009146:	7812      	ldrb	r2, [r2, #0]
 8009148:	f042 0208 	orr.w	r2, r2, #8
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	e015      	b.n	800917c <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009150:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009154:	f003 0311 	and.w	r3, r3, #17
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <f_open+0x158>
					res = FR_DENIED;
 800915c:	2307      	movs	r3, #7
 800915e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009162:	e00b      	b.n	800917c <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009164:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009168:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	f003 0304 	and.w	r3, r3, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <f_open+0x170>
 8009176:	2308      	movs	r3, #8
 8009178:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800917c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009180:	2b00      	cmp	r3, #0
 8009182:	f040 8088 	bne.w	8009296 <f_open+0x28a>
 8009186:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800918a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0308 	and.w	r3, r3, #8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d07e      	beq.n	8009296 <f_open+0x28a>
				dw = GET_FATTIME();
 8009198:	f7fd f982 	bl	80064a0 <get_fattime>
 800919c:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80091a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80091a4:	330e      	adds	r3, #14
 80091a6:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd fc92 	bl	8006ad4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80091b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80091b4:	3316      	adds	r3, #22
 80091b6:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fd fc8a 	bl	8006ad4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80091c0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80091c4:	330b      	adds	r3, #11
 80091c6:	2220      	movs	r2, #32
 80091c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80091ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80091ce:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fbdb 	bl	8007990 <ld_clust>
 80091da:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80091de:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80091e2:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 80091e6:	2200      	movs	r2, #0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fbf0 	bl	80079ce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80091ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80091f2:	331c      	adds	r3, #28
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fd fc6c 	bl	8006ad4 <st_dword>
					fs->wflag = 1;
 80091fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009200:	2201      	movs	r2, #1
 8009202:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009204:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8009208:	2b00      	cmp	r3, #0
 800920a:	d044      	beq.n	8009296 <f_open+0x28a>
						dw = fs->winsect;
 800920c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009212:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8009216:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800921a:	2200      	movs	r2, #0
 800921c:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe f8fd 	bl	8007420 <remove_chain>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800922c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009230:	2b00      	cmp	r3, #0
 8009232:	d130      	bne.n	8009296 <f_open+0x28a>
							res = move_window(fs, dw);
 8009234:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009238:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800923c:	4618      	mov	r0, r3
 800923e:	f7fd fea3 	bl	8006f88 <move_window>
 8009242:	4603      	mov	r3, r0
 8009244:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009248:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800924c:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8009250:	3a01      	subs	r2, #1
 8009252:	611a      	str	r2, [r3, #16]
 8009254:	e01f      	b.n	8009296 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009256:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800925a:	2b00      	cmp	r3, #0
 800925c:	d11b      	bne.n	8009296 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800925e:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <f_open+0x266>
					res = FR_NO_FILE;
 800926a:	2304      	movs	r3, #4
 800926c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009270:	e011      	b.n	8009296 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009272:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009276:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	f003 0302 	and.w	r3, r3, #2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <f_open+0x28a>
 8009284:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8009288:	f003 0301 	and.w	r3, r3, #1
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <f_open+0x28a>
						res = FR_DENIED;
 8009290:	2307      	movs	r3, #7
 8009292:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8009296:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800929a:	2b00      	cmp	r3, #0
 800929c:	d148      	bne.n	8009330 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800929e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092a2:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 80092b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092b4:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80092b8:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80092bc:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092c6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80092c8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80092cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092d2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80092da:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80092de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092e2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80092ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092ee:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	bf8c      	ite	hi
 80092f8:	2301      	movhi	r3, #1
 80092fa:	2300      	movls	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f7fd fd0c 	bl	8006d24 <inc_lock>
 800930c:	4602      	mov	r2, r0
 800930e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009312:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800931a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800931e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <f_open+0x324>
 800932a:	2302      	movs	r3, #2
 800932c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009330:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009334:	2b00      	cmp	r3, #0
 8009336:	f040 810a 	bne.w	800954e <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800933a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800933e:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe fb23 	bl	8007990 <ld_clust>
 800934a:	4602      	mov	r2, r0
 800934c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009350:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009358:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800935c:	331c      	adds	r3, #28
 800935e:	4618      	mov	r0, r3
 8009360:	f7fd fb7a 	bl	8006a58 <ld_dword>
 8009364:	4602      	mov	r2, r0
 8009366:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800936a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009372:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009376:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2200      	movs	r2, #0
 800937e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009380:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8009384:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009388:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009390:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009394:	88da      	ldrh	r2, [r3, #6]
 8009396:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800939a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80093a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80093b0:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80093b4:	7812      	ldrb	r2, [r2, #0]
 80093b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80093b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2200      	movs	r2, #0
 80093c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80093c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093ca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2200      	movs	r2, #0
 80093d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093d8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2200      	movs	r2, #0
 80093e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093e6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3330      	adds	r3, #48	@ 0x30
 80093ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093f2:	2100      	movs	r1, #0
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fd fbba 	bl	8006b6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80093fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093fe:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 80a0 	beq.w	800954e <f_open+0x542>
 800940e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009412:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 8097 	beq.w	800954e <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009420:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009424:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009430:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009438:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800943c:	895b      	ldrh	r3, [r3, #10]
 800943e:	025b      	lsls	r3, r3, #9
 8009440:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009444:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009448:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009454:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009458:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8009464:	e021      	b.n	80094aa <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 8009466:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800946a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8009474:	4618      	mov	r0, r3
 8009476:	f7fd fe42 	bl	80070fe <get_fat>
 800947a:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800947e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009482:	2b01      	cmp	r3, #1
 8009484:	d802      	bhi.n	800948c <f_open+0x480>
 8009486:	2302      	movs	r3, #2
 8009488:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800948c:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009494:	d102      	bne.n	800949c <f_open+0x490>
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800949c:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80094a0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80094aa:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d105      	bne.n	80094be <f_open+0x4b2>
 80094b2:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80094b6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d8d3      	bhi.n	8009466 <f_open+0x45a>
				}
				fp->clust = clst;
 80094be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80094cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80094ce:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d13b      	bne.n	800954e <f_open+0x542>
 80094d6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d035      	beq.n	800954e <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80094e2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80094e6:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fde8 	bl	80070c0 <clust2sect>
 80094f0:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 80094f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d103      	bne.n	8009504 <f_open+0x4f8>
						res = FR_INT_ERR;
 80094fc:	2302      	movs	r3, #2
 80094fe:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8009502:	e024      	b.n	800954e <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009504:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009508:	0a5a      	lsrs	r2, r3, #9
 800950a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800950e:	441a      	add	r2, r3
 8009510:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009514:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800951c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8009520:	7858      	ldrb	r0, [r3, #1]
 8009522:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009526:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009530:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009534:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6a1a      	ldr	r2, [r3, #32]
 800953c:	2301      	movs	r3, #1
 800953e:	f7fd fa15 	bl	800696c <disk_read>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <f_open+0x542>
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800954e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8009552:	2b00      	cmp	r3, #0
 8009554:	d006      	beq.n	8009564 <f_open+0x558>
 8009556:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800955a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2200      	movs	r2, #0
 8009562:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009564:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8009568:	4618      	mov	r0, r3
 800956a:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b08e      	sub	sp, #56	@ 0x38
 8009576:	af00      	add	r7, sp, #0
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f107 0214 	add.w	r2, r7, #20
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff fcbe 	bl	8008f14 <validate>
 8009598:	4603      	mov	r3, r0
 800959a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800959e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d107      	bne.n	80095b6 <f_read+0x44>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7d5b      	ldrb	r3, [r3, #21]
 80095aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80095ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <f_read+0x4a>
 80095b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80095ba:	e115      	b.n	80097e8 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	7d1b      	ldrb	r3, [r3, #20]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <f_read+0x5a>
 80095c8:	2307      	movs	r3, #7
 80095ca:	e10d      	b.n	80097e8 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	68da      	ldr	r2, [r3, #12]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6a3b      	ldr	r3, [r7, #32]
 80095dc:	429a      	cmp	r2, r3
 80095de:	f240 80fe 	bls.w	80097de <f_read+0x26c>
 80095e2:	6a3b      	ldr	r3, [r7, #32]
 80095e4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80095e6:	e0fa      	b.n	80097de <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f040 80c6 	bne.w	8009782 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	0a5b      	lsrs	r3, r3, #9
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	8952      	ldrh	r2, [r2, #10]
 8009600:	3a01      	subs	r2, #1
 8009602:	4013      	ands	r3, r2
 8009604:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d12f      	bne.n	800966c <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	633b      	str	r3, [r7, #48]	@ 0x30
 800961a:	e013      	b.n	8009644 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	4619      	mov	r1, r3
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7fd fff5 	bl	800761a <clmt_clust>
 8009630:	6338      	str	r0, [r7, #48]	@ 0x30
 8009632:	e007      	b.n	8009644 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7fd fd5e 	bl	80070fe <get_fat>
 8009642:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	2b01      	cmp	r3, #1
 8009648:	d804      	bhi.n	8009654 <f_read+0xe2>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2202      	movs	r2, #2
 800964e:	755a      	strb	r2, [r3, #21]
 8009650:	2302      	movs	r3, #2
 8009652:	e0c9      	b.n	80097e8 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d104      	bne.n	8009666 <f_read+0xf4>
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2201      	movs	r2, #1
 8009660:	755a      	strb	r2, [r3, #21]
 8009662:	2301      	movs	r3, #1
 8009664:	e0c0      	b.n	80097e8 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800966a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	4619      	mov	r1, r3
 8009674:	4610      	mov	r0, r2
 8009676:	f7fd fd23 	bl	80070c0 <clust2sect>
 800967a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d104      	bne.n	800968c <f_read+0x11a>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2202      	movs	r2, #2
 8009686:	755a      	strb	r2, [r3, #21]
 8009688:	2302      	movs	r3, #2
 800968a:	e0ad      	b.n	80097e8 <f_read+0x276>
			sect += csect;
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	0a5b      	lsrs	r3, r3, #9
 8009698:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800969a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969c:	2b00      	cmp	r3, #0
 800969e:	d039      	beq.n	8009714 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a4:	4413      	add	r3, r2
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	8952      	ldrh	r2, [r2, #10]
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d905      	bls.n	80096ba <f_read+0x148>
					cc = fs->csize - csect;
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	895b      	ldrh	r3, [r3, #10]
 80096b2:	461a      	mov	r2, r3
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	7858      	ldrb	r0, [r3, #1]
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096c4:	f7fd f952 	bl	800696c <disk_read>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <f_read+0x166>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	755a      	strb	r2, [r3, #21]
 80096d4:	2301      	movs	r3, #1
 80096d6:	e087      	b.n	80097e8 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	7d1b      	ldrb	r3, [r3, #20]
 80096dc:	b25b      	sxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	da14      	bge.n	800970c <f_read+0x19a>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d90d      	bls.n	800970c <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	025b      	lsls	r3, r3, #9
 80096fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096fc:	18d0      	adds	r0, r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3330      	adds	r3, #48	@ 0x30
 8009702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009706:	4619      	mov	r1, r3
 8009708:	f7fd fa10 	bl	8006b2c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800970c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970e:	025b      	lsls	r3, r3, #9
 8009710:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009712:	e050      	b.n	80097b6 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	429a      	cmp	r2, r3
 800971c:	d02e      	beq.n	800977c <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	7d1b      	ldrb	r3, [r3, #20]
 8009722:	b25b      	sxtb	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	da18      	bge.n	800975a <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	7858      	ldrb	r0, [r3, #1]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1a      	ldr	r2, [r3, #32]
 8009736:	2301      	movs	r3, #1
 8009738:	f7fd f938 	bl	80069ac <disk_write>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d004      	beq.n	800974c <f_read+0x1da>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2201      	movs	r2, #1
 8009746:	755a      	strb	r2, [r3, #21]
 8009748:	2301      	movs	r3, #1
 800974a:	e04d      	b.n	80097e8 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	7d1b      	ldrb	r3, [r3, #20]
 8009750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009754:	b2da      	uxtb	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	7858      	ldrb	r0, [r3, #1]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009764:	2301      	movs	r3, #1
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	f7fd f900 	bl	800696c <disk_read>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <f_read+0x20a>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	755a      	strb	r2, [r3, #21]
 8009778:	2301      	movs	r3, #1
 800977a:	e035      	b.n	80097e8 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800978e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	429a      	cmp	r2, r3
 8009796:	d901      	bls.n	800979c <f_read+0x22a>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097aa:	4413      	add	r3, r2
 80097ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097ae:	4619      	mov	r1, r3
 80097b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097b2:	f7fd f9bb 	bl	8006b2c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80097b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ba:	4413      	add	r3, r2
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	441a      	add	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	619a      	str	r2, [r3, #24]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d0:	441a      	add	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f af01 	bne.w	80095e8 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3738      	adds	r7, #56	@ 0x38
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f107 0208 	add.w	r2, r7, #8
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff fb87 	bl	8008f14 <validate>
 8009806:	4603      	mov	r3, r0
 8009808:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d168      	bne.n	80098e2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7d1b      	ldrb	r3, [r3, #20]
 8009814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009818:	2b00      	cmp	r3, #0
 800981a:	d062      	beq.n	80098e2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7d1b      	ldrb	r3, [r3, #20]
 8009820:	b25b      	sxtb	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	da15      	bge.n	8009852 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	7858      	ldrb	r0, [r3, #1]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1a      	ldr	r2, [r3, #32]
 8009834:	2301      	movs	r3, #1
 8009836:	f7fd f8b9 	bl	80069ac <disk_write>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <f_sync+0x54>
 8009840:	2301      	movs	r3, #1
 8009842:	e04f      	b.n	80098e4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7d1b      	ldrb	r3, [r3, #20]
 8009848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800984c:	b2da      	uxtb	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009852:	f7fc fe25 	bl	80064a0 <get_fattime>
 8009856:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f7fd fb91 	bl	8006f88 <move_window>
 8009866:	4603      	mov	r3, r0
 8009868:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d138      	bne.n	80098e2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	330b      	adds	r3, #11
 800987a:	781a      	ldrb	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	330b      	adds	r3, #11
 8009880:	f042 0220 	orr.w	r2, r2, #32
 8009884:	b2d2      	uxtb	r2, r2
 8009886:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	461a      	mov	r2, r3
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	f7fe f89b 	bl	80079ce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f103 021c 	add.w	r2, r3, #28
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fd f915 	bl	8006ad4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3316      	adds	r3, #22
 80098ae:	6939      	ldr	r1, [r7, #16]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fd f90f 	bl	8006ad4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3312      	adds	r3, #18
 80098ba:	2100      	movs	r1, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd f8ee 	bl	8006a9e <st_word>
					fs->wflag = 1;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2201      	movs	r2, #1
 80098c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fd fb8a 	bl	8006fe4 <sync_fs>
 80098d0:	4603      	mov	r3, r0
 80098d2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	7d1b      	ldrb	r3, [r3, #20]
 80098d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098dc:	b2da      	uxtb	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff ff7b 	bl	80097f0 <f_sync>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d118      	bne.n	8009936 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f107 0208 	add.w	r2, r7, #8
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7ff fb01 	bl	8008f14 <validate>
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10c      	bne.n	8009936 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	4618      	mov	r0, r3
 8009922:	f7fd fa8d 	bl	8006e40 <dec_lock>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8009946:	af00      	add	r7, sp, #0
 8009948:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800994c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009956:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800995a:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800995c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009960:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <f_opendir+0x2e>
 800996a:	2309      	movs	r3, #9
 800996c:	e0a0      	b.n	8009ab0 <f_opendir+0x170>

	/* Get logical drive */
	obj = &dp->obj;
 800996e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009972:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 800997c:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8009980:	463b      	mov	r3, r7
 8009982:	2200      	movs	r2, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff f879 	bl	8008a7c <find_volume>
 800998a:	4603      	mov	r3, r0
 800998c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8009990:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 8081 	bne.w	8009a9c <f_opendir+0x15c>
		obj->fs = fs;
 800999a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800999e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80099a2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80099a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80099a8:	f107 020c 	add.w	r2, r7, #12
 80099ac:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80099ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80099b2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80099bc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80099c0:	4611      	mov	r1, r2
 80099c2:	6818      	ldr	r0, [r3, #0]
 80099c4:	f7fe ff4e 	bl	8008864 <follow_path>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 80099ce:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d15b      	bne.n	8009a8e <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80099d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80099da:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80099e4:	b25b      	sxtb	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	db1a      	blt.n	8009a20 <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80099ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 80099ee:	799b      	ldrb	r3, [r3, #6]
 80099f0:	f003 0310 	and.w	r3, r3, #16
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d010      	beq.n	8009a1a <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80099f8:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80099fc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009a00:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7fd ffc0 	bl	8007990 <ld_clust>
 8009a10:	4602      	mov	r2, r0
 8009a12:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	e002      	b.n	8009a20 <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8009a1a:	2305      	movs	r3, #5
 8009a1c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8009a20:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d132      	bne.n	8009a8e <f_opendir+0x14e>
				obj->id = fs->id;
 8009a28:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009a2c:	88da      	ldrh	r2, [r3, #6]
 8009a2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009a32:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8009a34:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009a38:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	f7fd fe1f 	bl	8007682 <dir_sdi>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8009a4a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d11d      	bne.n	8009a8e <f_opendir+0x14e>
					if (obj->sclust) {
 8009a52:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d014      	beq.n	8009a86 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8009a5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8009a60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8009a64:	2100      	movs	r1, #0
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	f7fd f95c 	bl	8006d24 <inc_lock>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009a72:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8009a74:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d107      	bne.n	8009a8e <f_opendir+0x14e>
 8009a7e:	2312      	movs	r3, #18
 8009a80:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8009a84:	e003      	b.n	8009a8e <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8009a86:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8009a8e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d102      	bne.n	8009a9c <f_opendir+0x15c>
 8009a96:	2305      	movs	r3, #5
 8009a98:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8009a9c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d003      	beq.n	8009aac <f_opendir+0x16c>
 8009aa4:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009aac:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f107 0208 	add.w	r2, r7, #8
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff fa22 	bl	8008f14 <validate>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d110      	bne.n	8009afc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d006      	beq.n	8009af0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fd f9aa 	bl	8006e40 <dec_lock>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009b12:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009b16:	6018      	str	r0, [r3, #0]
 8009b18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009b1c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8009b20:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8009b22:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009b26:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009b30:	4611      	mov	r1, r2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff f9ee 	bl	8008f14 <validate>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 8009b3e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d14b      	bne.n	8009bde <f_readdir+0xd8>
		if (!fno) {
 8009b46:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009b4a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d10b      	bne.n	8009b6c <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009b54:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009b58:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	f7fd fd8f 	bl	8007682 <dir_sdi>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8009b6a:	e038      	b.n	8009bde <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8009b6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8009b70:	f107 0208 	add.w	r2, r7, #8
 8009b74:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8009b76:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009b7a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009b7e:	2100      	movs	r1, #0
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	f7fe f930 	bl	8007de6 <dir_read>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8009b8c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d102      	bne.n	8009b9a <f_readdir+0x94>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8009b9a:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d11d      	bne.n	8009bde <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8009ba2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009ba6:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8009baa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009bae:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009bb2:	6811      	ldr	r1, [r2, #0]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f7fe fbbf 	bl	8008338 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8009bba:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009bbe:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	f7fd fdd7 	bl	8007778 <dir_next>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8009bd0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d102      	bne.n	8009bde <f_readdir+0xd8>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8009bde:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	f5ad 7d20 	sub.w	sp, sp, #640	@ 0x280
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8009bf8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8009bfc:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009c04:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8009c08:	1d3b      	adds	r3, r7, #4
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe ff35 	bl	8008a7c <find_volume>
 8009c12:	4603      	mov	r3, r0
 8009c14:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
	dj.obj.fs = fs;
 8009c18:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009c1c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
	if (res == FR_OK) {
 8009c20:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 80a1 	bne.w	8009d6c <f_unlink+0x180>
		INIT_NAMBUF(fs);
 8009c2a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009c2e:	f107 020c 	add.w	r2, r7, #12
 8009c32:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8009c34:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8009c38:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8009c42:	4611      	mov	r1, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fe0d 	bl	8008864 <follow_path>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009c50:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d108      	bne.n	8009c6a <f_unlink+0x7e>
 8009c58:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fc ffe2 	bl	8006c28 <chk_lock>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009c6a:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d17c      	bne.n	8009d6c <f_unlink+0x180>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009c72:	f897 3273 	ldrb.w	r3, [r7, #627]	@ 0x273
 8009c76:	b25b      	sxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	da03      	bge.n	8009c84 <f_unlink+0x98>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009c7c:	2306      	movs	r3, #6
 8009c7e:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
 8009c82:	e008      	b.n	8009c96 <f_unlink+0xaa>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009c84:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <f_unlink+0xaa>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009c90:	2307      	movs	r3, #7
 8009c92:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
				}
			}
			if (res == FR_OK) {
 8009c96:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d13b      	bne.n	8009d16 <f_unlink+0x12a>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009c9e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009ca2:	f8d7 2264 	ldr.w	r2, [r7, #612]	@ 0x264
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fd fe71 	bl	8007990 <ld_clust>
 8009cae:	f8c7 0278 	str.w	r0, [r7, #632]	@ 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009cb2:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8009cb6:	f003 0310 	and.w	r3, r3, #16
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d02b      	beq.n	8009d16 <f_unlink+0x12a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009cbe:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009cc2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
						sdj.obj.sclust = dclst;
 8009cc6:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8009cca:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009cce:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fd fcd4 	bl	8007682 <dir_sdi>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
						if (res == FR_OK) {
 8009ce0:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d116      	bne.n	8009d16 <f_unlink+0x12a>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009ce8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8009cec:	2100      	movs	r1, #0
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe f879 	bl	8007de6 <dir_read>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009cfa:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <f_unlink+0x11c>
 8009d02:	2307      	movs	r3, #7
 8009d04:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009d08:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009d0c:	2b04      	cmp	r3, #4
 8009d0e:	d102      	bne.n	8009d16 <f_unlink+0x12a>
 8009d10:	2300      	movs	r3, #0
 8009d12:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 8009d16:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d126      	bne.n	8009d6c <f_unlink+0x180>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009d1e:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fabe 	bl	80082a4 <dir_remove>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009d2e:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10e      	bne.n	8009d54 <f_unlink+0x168>
 8009d36:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <f_unlink+0x168>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009d3e:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8d7 1278 	ldr.w	r1, [r7, #632]	@ 0x278
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fd fb69 	bl	8007420 <remove_chain>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009d54:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d107      	bne.n	8009d6c <f_unlink+0x180>
 8009d5c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fd f93f 	bl	8006fe4 <sync_fs>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 327f 	strb.w	r3, [r7, #639]	@ 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009d6c:	f897 327f 	ldrb.w	r3, [r7, #639]	@ 0x27f
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	f507 7720 	add.w	r7, r7, #640	@ 0x280
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 8009d7a:	b590      	push	{r4, r7, lr}
 8009d7c:	f5ad 7d27 	sub.w	sp, sp, #668	@ 0x29c
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8009d86:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8009d8a:	6018      	str	r0, [r3, #0]
 8009d8c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8009d90:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8009d94:	6019      	str	r1, [r3, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 8009d96:	463b      	mov	r3, r7
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fe fdd4 	bl	8008946 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 8009d9e:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8009da2:	1d3b      	adds	r3, r7, #4
 8009da4:	2202      	movs	r2, #2
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe fe68 	bl	8008a7c <find_volume>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
	if (res == FR_OK) {
 8009db2:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f040 80fc 	bne.w	8009fb4 <f_rename+0x23a>
		djo.obj.fs = fs;
 8009dbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009dc0:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
		INIT_NAMBUF(fs);
 8009dc4:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009dc8:	f107 0208 	add.w	r2, r7, #8
 8009dcc:	60da      	str	r2, [r3, #12]
		res = follow_path(&djo, path_old);		/* Check old object */
 8009dce:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8009dd2:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fd40 	bl	8008864 <follow_path>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8009dea:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d108      	bne.n	8009e04 <f_rename+0x8a>
 8009df2:	f897 3287 	ldrb.w	r3, [r7, #647]	@ 0x287
 8009df6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <f_rename+0x8a>
 8009dfe:	2306      	movs	r3, #6
 8009e00:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
#if _FS_LOCK != 0
		if (res == FR_OK) {
 8009e04:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d108      	bne.n	8009e1e <f_rename+0xa4>
			res = chk_lock(&djo, 2);
 8009e0c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8009e10:	2102      	movs	r1, #2
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fc ff08 	bl	8006c28 <chk_lock>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 8009e1e:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 80c6 	bne.w	8009fb4 <f_rename+0x23a>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 8009e28:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
 8009e2c:	f103 010b 	add.w	r1, r3, #11
 8009e30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e34:	2215      	movs	r2, #21
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fc fe78 	bl	8006b2c <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 8009e3c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8009e40:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8009e44:	2234      	movs	r2, #52	@ 0x34
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fc fe70 	bl	8006b2c <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8009e4c:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8009e50:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe fd01 	bl	8008864 <follow_path>
 8009e62:	4603      	mov	r3, r0
 8009e64:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8009e68:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d110      	bne.n	8009e92 <f_rename+0x118>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8009e70:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8009e74:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d107      	bne.n	8009e8c <f_rename+0x112>
 8009e7c:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8009e80:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d101      	bne.n	8009e8c <f_rename+0x112>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	e000      	b.n	8009e8e <f_rename+0x114>
 8009e8c:	2308      	movs	r3, #8
 8009e8e:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8009e92:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009e96:	2b04      	cmp	r3, #4
 8009e98:	d174      	bne.n	8009f84 <f_rename+0x20a>
					res = dir_register(&djn);			/* Register the new entry */
 8009e9a:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe f908 	bl	80080b4 <dir_register>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
					if (res == FR_OK) {
 8009eaa:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d168      	bne.n	8009f84 <f_rename+0x20a>
						dir = djn.dir;					/* Copy information about object except name */
 8009eb2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8009eb6:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
						mem_cpy(dir + 13, buf + 2, 19);
 8009eba:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8009ebe:	f103 000d 	add.w	r0, r3, #13
 8009ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ec6:	3302      	adds	r3, #2
 8009ec8:	2213      	movs	r2, #19
 8009eca:	4619      	mov	r1, r3
 8009ecc:	f7fc fe2e 	bl	8006b2c <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8009ed0:	f897 2208 	ldrb.w	r2, [r7, #520]	@ 0x208
 8009ed4:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8009ed8:	330b      	adds	r3, #11
 8009eda:	f042 0220 	orr.w	r2, r2, #32
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8009ee2:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8009eea:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8009eee:	330b      	adds	r3, #11
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	f003 0310 	and.w	r3, r3, #16
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d044      	beq.n	8009f84 <f_rename+0x20a>
 8009efa:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8009efe:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d03e      	beq.n	8009f84 <f_rename+0x20a>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8009f06:	f8d7 4220 	ldr.w	r4, [r7, #544]	@ 0x220
 8009f0a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009f0e:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fd3c 	bl	8007990 <ld_clust>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7fd f8cf 	bl	80070c0 <clust2sect>
 8009f22:	f8c7 028c 	str.w	r0, [r7, #652]	@ 0x28c
							if (!dw) {
 8009f26:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d103      	bne.n	8009f36 <f_rename+0x1bc>
								res = FR_INT_ERR;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
 8009f34:	e026      	b.n	8009f84 <f_rename+0x20a>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 8009f36:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009f3a:	f8d7 128c 	ldr.w	r1, [r7, #652]	@ 0x28c
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fd f822 	bl	8006f88 <move_window>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 8009f4a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009f4e:	3334      	adds	r3, #52	@ 0x34
 8009f50:	3320      	adds	r3, #32
 8009f52:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
								if (res == FR_OK && dir[1] == '.') {
 8009f56:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d112      	bne.n	8009f84 <f_rename+0x20a>
 8009f5e:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 8009f62:	3301      	adds	r3, #1
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f68:	d10c      	bne.n	8009f84 <f_rename+0x20a>
									st_clust(fs, dir, djn.obj.sclust);
 8009f6a:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009f6e:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8009f72:	f8d7 1290 	ldr.w	r1, [r7, #656]	@ 0x290
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd fd29 	bl	80079ce <st_clust>
									fs->wflag = 1;
 8009f7c:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009f80:	2201      	movs	r2, #1
 8009f82:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8009f84:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d113      	bne.n	8009fb4 <f_rename+0x23a>
				res = dir_remove(&djo);		/* Remove old entry */
 8009f8c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fe f987 	bl	80082a4 <dir_remove>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
				if (res == FR_OK) {
 8009f9c:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <f_rename+0x23a>
					res = sync_fs(fs);
 8009fa4:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fd f81b 	bl	8006fe4 <sync_fs>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 3297 	strb.w	r3, [r7, #663]	@ 0x297
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009fb4:	f897 3297 	ldrb.w	r3, [r7, #663]	@ 0x297
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f507 7727 	add.w	r7, r7, #668	@ 0x29c
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd90      	pop	{r4, r7, pc}
	...

08009fc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009fda:	4b1f      	ldr	r3, [pc, #124]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 8009fdc:	7a5b      	ldrb	r3, [r3, #9]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d131      	bne.n	800a048 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009fe4:	4b1c      	ldr	r3, [pc, #112]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 8009fe6:	7a5b      	ldrb	r3, [r3, #9]
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	4b1a      	ldr	r3, [pc, #104]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 8009fee:	2100      	movs	r1, #0
 8009ff0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ff2:	4b19      	ldr	r3, [pc, #100]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 8009ff4:	7a5b      	ldrb	r3, [r3, #9]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	4a17      	ldr	r2, [pc, #92]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a002:	4b15      	ldr	r3, [pc, #84]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 800a004:	7a5b      	ldrb	r3, [r3, #9]
 800a006:	b2db      	uxtb	r3, r3
 800a008:	461a      	mov	r2, r3
 800a00a:	4b13      	ldr	r3, [pc, #76]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 800a00c:	4413      	add	r3, r2
 800a00e:	79fa      	ldrb	r2, [r7, #7]
 800a010:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a012:	4b11      	ldr	r3, [pc, #68]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 800a014:	7a5b      	ldrb	r3, [r3, #9]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	b2d1      	uxtb	r1, r2
 800a01c:	4a0e      	ldr	r2, [pc, #56]	@ (800a058 <FATFS_LinkDriverEx+0x94>)
 800a01e:	7251      	strb	r1, [r2, #9]
 800a020:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a022:	7dbb      	ldrb	r3, [r7, #22]
 800a024:	3330      	adds	r3, #48	@ 0x30
 800a026:	b2da      	uxtb	r2, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	3301      	adds	r3, #1
 800a030:	223a      	movs	r2, #58	@ 0x3a
 800a032:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	3302      	adds	r3, #2
 800a038:	222f      	movs	r2, #47	@ 0x2f
 800a03a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	3303      	adds	r3, #3
 800a040:	2200      	movs	r2, #0
 800a042:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	371c      	adds	r7, #28
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	20000724 	.word	0x20000724

0800a05c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a066:	2200      	movs	r2, #0
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff ffaa 	bl	8009fc4 <FATFS_LinkDriverEx>
 800a070:	4603      	mov	r3, r0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	6039      	str	r1, [r7, #0]
 800a086:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a088:	88fb      	ldrh	r3, [r7, #6]
 800a08a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a08c:	d802      	bhi.n	800a094 <ff_convert+0x18>
		c = chr;
 800a08e:	88fb      	ldrh	r3, [r7, #6]
 800a090:	81fb      	strh	r3, [r7, #14]
 800a092:	e025      	b.n	800a0e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00b      	beq.n	800a0b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	2bff      	cmp	r3, #255	@ 0xff
 800a09e:	d805      	bhi.n	800a0ac <ff_convert+0x30>
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	3b80      	subs	r3, #128	@ 0x80
 800a0a4:	4a12      	ldr	r2, [pc, #72]	@ (800a0f0 <ff_convert+0x74>)
 800a0a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0aa:	e000      	b.n	800a0ae <ff_convert+0x32>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	81fb      	strh	r3, [r7, #14]
 800a0b0:	e016      	b.n	800a0e0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	81fb      	strh	r3, [r7, #14]
 800a0b6:	e009      	b.n	800a0cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a0b8:	89fb      	ldrh	r3, [r7, #14]
 800a0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f0 <ff_convert+0x74>)
 800a0bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c0:	88fa      	ldrh	r2, [r7, #6]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d006      	beq.n	800a0d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a0c6:	89fb      	ldrh	r3, [r7, #14]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	81fb      	strh	r3, [r7, #14]
 800a0cc:	89fb      	ldrh	r3, [r7, #14]
 800a0ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0d0:	d9f2      	bls.n	800a0b8 <ff_convert+0x3c>
 800a0d2:	e000      	b.n	800a0d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a0d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a0d6:	89fb      	ldrh	r3, [r7, #14]
 800a0d8:	3380      	adds	r3, #128	@ 0x80
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	0800b45c 	.word	0x0800b45c

0800a0f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b087      	sub	sp, #28
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a0fe:	88fb      	ldrh	r3, [r7, #6]
 800a100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a104:	d201      	bcs.n	800a10a <ff_wtoupper+0x16>
 800a106:	4b3e      	ldr	r3, [pc, #248]	@ (800a200 <ff_wtoupper+0x10c>)
 800a108:	e000      	b.n	800a10c <ff_wtoupper+0x18>
 800a10a:	4b3e      	ldr	r3, [pc, #248]	@ (800a204 <ff_wtoupper+0x110>)
 800a10c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	1c9a      	adds	r2, r3, #2
 800a112:	617a      	str	r2, [r7, #20]
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a118:	8a7b      	ldrh	r3, [r7, #18]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d068      	beq.n	800a1f0 <ff_wtoupper+0xfc>
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	8a7b      	ldrh	r3, [r7, #18]
 800a122:	429a      	cmp	r2, r3
 800a124:	d364      	bcc.n	800a1f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	1c9a      	adds	r2, r3, #2
 800a12a:	617a      	str	r2, [r7, #20]
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	823b      	strh	r3, [r7, #16]
 800a130:	8a3b      	ldrh	r3, [r7, #16]
 800a132:	0a1b      	lsrs	r3, r3, #8
 800a134:	81fb      	strh	r3, [r7, #14]
 800a136:	8a3b      	ldrh	r3, [r7, #16]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a13c:	88fa      	ldrh	r2, [r7, #6]
 800a13e:	8a79      	ldrh	r1, [r7, #18]
 800a140:	8a3b      	ldrh	r3, [r7, #16]
 800a142:	440b      	add	r3, r1
 800a144:	429a      	cmp	r2, r3
 800a146:	da49      	bge.n	800a1dc <ff_wtoupper+0xe8>
			switch (cmd) {
 800a148:	89fb      	ldrh	r3, [r7, #14]
 800a14a:	2b08      	cmp	r3, #8
 800a14c:	d84f      	bhi.n	800a1ee <ff_wtoupper+0xfa>
 800a14e:	a201      	add	r2, pc, #4	@ (adr r2, 800a154 <ff_wtoupper+0x60>)
 800a150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a154:	0800a179 	.word	0x0800a179
 800a158:	0800a18b 	.word	0x0800a18b
 800a15c:	0800a1a1 	.word	0x0800a1a1
 800a160:	0800a1a9 	.word	0x0800a1a9
 800a164:	0800a1b1 	.word	0x0800a1b1
 800a168:	0800a1b9 	.word	0x0800a1b9
 800a16c:	0800a1c1 	.word	0x0800a1c1
 800a170:	0800a1c9 	.word	0x0800a1c9
 800a174:	0800a1d1 	.word	0x0800a1d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a178:	88fa      	ldrh	r2, [r7, #6]
 800a17a:	8a7b      	ldrh	r3, [r7, #18]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	80fb      	strh	r3, [r7, #6]
 800a188:	e027      	b.n	800a1da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a18a:	88fa      	ldrh	r2, [r7, #6]
 800a18c:	8a7b      	ldrh	r3, [r7, #18]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	b29b      	uxth	r3, r3
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	b29b      	uxth	r3, r3
 800a198:	88fa      	ldrh	r2, [r7, #6]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	80fb      	strh	r3, [r7, #6]
 800a19e:	e01c      	b.n	800a1da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a1a0:	88fb      	ldrh	r3, [r7, #6]
 800a1a2:	3b10      	subs	r3, #16
 800a1a4:	80fb      	strh	r3, [r7, #6]
 800a1a6:	e018      	b.n	800a1da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a1a8:	88fb      	ldrh	r3, [r7, #6]
 800a1aa:	3b20      	subs	r3, #32
 800a1ac:	80fb      	strh	r3, [r7, #6]
 800a1ae:	e014      	b.n	800a1da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	3b30      	subs	r3, #48	@ 0x30
 800a1b4:	80fb      	strh	r3, [r7, #6]
 800a1b6:	e010      	b.n	800a1da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	3b1a      	subs	r3, #26
 800a1bc:	80fb      	strh	r3, [r7, #6]
 800a1be:	e00c      	b.n	800a1da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	3308      	adds	r3, #8
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	e008      	b.n	800a1da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
 800a1ca:	3b50      	subs	r3, #80	@ 0x50
 800a1cc:	80fb      	strh	r3, [r7, #6]
 800a1ce:	e004      	b.n	800a1da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a1d6:	80fb      	strh	r3, [r7, #6]
 800a1d8:	bf00      	nop
			}
			break;
 800a1da:	e008      	b.n	800a1ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a1dc:	89fb      	ldrh	r3, [r7, #14]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d195      	bne.n	800a10e <ff_wtoupper+0x1a>
 800a1e2:	8a3b      	ldrh	r3, [r7, #16]
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a1ec:	e78f      	b.n	800a10e <ff_wtoupper+0x1a>
			break;
 800a1ee:	bf00      	nop
	}

	return chr;
 800a1f0:	88fb      	ldrh	r3, [r7, #6]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	0800b55c 	.word	0x0800b55c
 800a204:	0800b750 	.word	0x0800b750

0800a208 <__sflush_r>:
 800a208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	0716      	lsls	r6, r2, #28
 800a212:	4605      	mov	r5, r0
 800a214:	460c      	mov	r4, r1
 800a216:	d454      	bmi.n	800a2c2 <__sflush_r+0xba>
 800a218:	684b      	ldr	r3, [r1, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	dc02      	bgt.n	800a224 <__sflush_r+0x1c>
 800a21e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a220:	2b00      	cmp	r3, #0
 800a222:	dd48      	ble.n	800a2b6 <__sflush_r+0xae>
 800a224:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a226:	2e00      	cmp	r6, #0
 800a228:	d045      	beq.n	800a2b6 <__sflush_r+0xae>
 800a22a:	2300      	movs	r3, #0
 800a22c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a230:	682f      	ldr	r7, [r5, #0]
 800a232:	6a21      	ldr	r1, [r4, #32]
 800a234:	602b      	str	r3, [r5, #0]
 800a236:	d030      	beq.n	800a29a <__sflush_r+0x92>
 800a238:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	0759      	lsls	r1, r3, #29
 800a23e:	d505      	bpl.n	800a24c <__sflush_r+0x44>
 800a240:	6863      	ldr	r3, [r4, #4]
 800a242:	1ad2      	subs	r2, r2, r3
 800a244:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a246:	b10b      	cbz	r3, 800a24c <__sflush_r+0x44>
 800a248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a24a:	1ad2      	subs	r2, r2, r3
 800a24c:	2300      	movs	r3, #0
 800a24e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a250:	6a21      	ldr	r1, [r4, #32]
 800a252:	4628      	mov	r0, r5
 800a254:	47b0      	blx	r6
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	89a3      	ldrh	r3, [r4, #12]
 800a25a:	d106      	bne.n	800a26a <__sflush_r+0x62>
 800a25c:	6829      	ldr	r1, [r5, #0]
 800a25e:	291d      	cmp	r1, #29
 800a260:	d82b      	bhi.n	800a2ba <__sflush_r+0xb2>
 800a262:	4a2a      	ldr	r2, [pc, #168]	@ (800a30c <__sflush_r+0x104>)
 800a264:	410a      	asrs	r2, r1
 800a266:	07d6      	lsls	r6, r2, #31
 800a268:	d427      	bmi.n	800a2ba <__sflush_r+0xb2>
 800a26a:	2200      	movs	r2, #0
 800a26c:	6062      	str	r2, [r4, #4]
 800a26e:	04d9      	lsls	r1, r3, #19
 800a270:	6922      	ldr	r2, [r4, #16]
 800a272:	6022      	str	r2, [r4, #0]
 800a274:	d504      	bpl.n	800a280 <__sflush_r+0x78>
 800a276:	1c42      	adds	r2, r0, #1
 800a278:	d101      	bne.n	800a27e <__sflush_r+0x76>
 800a27a:	682b      	ldr	r3, [r5, #0]
 800a27c:	b903      	cbnz	r3, 800a280 <__sflush_r+0x78>
 800a27e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a282:	602f      	str	r7, [r5, #0]
 800a284:	b1b9      	cbz	r1, 800a2b6 <__sflush_r+0xae>
 800a286:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a28a:	4299      	cmp	r1, r3
 800a28c:	d002      	beq.n	800a294 <__sflush_r+0x8c>
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 fb08 	bl	800a8a4 <_free_r>
 800a294:	2300      	movs	r3, #0
 800a296:	6363      	str	r3, [r4, #52]	@ 0x34
 800a298:	e00d      	b.n	800a2b6 <__sflush_r+0xae>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b0      	blx	r6
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	1c50      	adds	r0, r2, #1
 800a2a4:	d1c9      	bne.n	800a23a <__sflush_r+0x32>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0c6      	beq.n	800a23a <__sflush_r+0x32>
 800a2ac:	2b1d      	cmp	r3, #29
 800a2ae:	d001      	beq.n	800a2b4 <__sflush_r+0xac>
 800a2b0:	2b16      	cmp	r3, #22
 800a2b2:	d11e      	bne.n	800a2f2 <__sflush_r+0xea>
 800a2b4:	602f      	str	r7, [r5, #0]
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	e022      	b.n	800a300 <__sflush_r+0xf8>
 800a2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2be:	b21b      	sxth	r3, r3
 800a2c0:	e01b      	b.n	800a2fa <__sflush_r+0xf2>
 800a2c2:	690f      	ldr	r7, [r1, #16]
 800a2c4:	2f00      	cmp	r7, #0
 800a2c6:	d0f6      	beq.n	800a2b6 <__sflush_r+0xae>
 800a2c8:	0793      	lsls	r3, r2, #30
 800a2ca:	680e      	ldr	r6, [r1, #0]
 800a2cc:	bf08      	it	eq
 800a2ce:	694b      	ldreq	r3, [r1, #20]
 800a2d0:	600f      	str	r7, [r1, #0]
 800a2d2:	bf18      	it	ne
 800a2d4:	2300      	movne	r3, #0
 800a2d6:	eba6 0807 	sub.w	r8, r6, r7
 800a2da:	608b      	str	r3, [r1, #8]
 800a2dc:	f1b8 0f00 	cmp.w	r8, #0
 800a2e0:	dde9      	ble.n	800a2b6 <__sflush_r+0xae>
 800a2e2:	6a21      	ldr	r1, [r4, #32]
 800a2e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2e6:	4643      	mov	r3, r8
 800a2e8:	463a      	mov	r2, r7
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b0      	blx	r6
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	dc08      	bgt.n	800a304 <__sflush_r+0xfc>
 800a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a304:	4407      	add	r7, r0
 800a306:	eba8 0800 	sub.w	r8, r8, r0
 800a30a:	e7e7      	b.n	800a2dc <__sflush_r+0xd4>
 800a30c:	dfbffffe 	.word	0xdfbffffe

0800a310 <_fflush_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	690b      	ldr	r3, [r1, #16]
 800a314:	4605      	mov	r5, r0
 800a316:	460c      	mov	r4, r1
 800a318:	b913      	cbnz	r3, 800a320 <_fflush_r+0x10>
 800a31a:	2500      	movs	r5, #0
 800a31c:	4628      	mov	r0, r5
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	b118      	cbz	r0, 800a32a <_fflush_r+0x1a>
 800a322:	6a03      	ldr	r3, [r0, #32]
 800a324:	b90b      	cbnz	r3, 800a32a <_fflush_r+0x1a>
 800a326:	f000 f8bb 	bl	800a4a0 <__sinit>
 800a32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f3      	beq.n	800a31a <_fflush_r+0xa>
 800a332:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a334:	07d0      	lsls	r0, r2, #31
 800a336:	d404      	bmi.n	800a342 <_fflush_r+0x32>
 800a338:	0599      	lsls	r1, r3, #22
 800a33a:	d402      	bmi.n	800a342 <_fflush_r+0x32>
 800a33c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a33e:	f000 faae 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a342:	4628      	mov	r0, r5
 800a344:	4621      	mov	r1, r4
 800a346:	f7ff ff5f 	bl	800a208 <__sflush_r>
 800a34a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a34c:	07da      	lsls	r2, r3, #31
 800a34e:	4605      	mov	r5, r0
 800a350:	d4e4      	bmi.n	800a31c <_fflush_r+0xc>
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	059b      	lsls	r3, r3, #22
 800a356:	d4e1      	bmi.n	800a31c <_fflush_r+0xc>
 800a358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a35a:	f000 faa1 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a35e:	e7dd      	b.n	800a31c <_fflush_r+0xc>

0800a360 <fflush>:
 800a360:	4601      	mov	r1, r0
 800a362:	b920      	cbnz	r0, 800a36e <fflush+0xe>
 800a364:	4a04      	ldr	r2, [pc, #16]	@ (800a378 <fflush+0x18>)
 800a366:	4905      	ldr	r1, [pc, #20]	@ (800a37c <fflush+0x1c>)
 800a368:	4805      	ldr	r0, [pc, #20]	@ (800a380 <fflush+0x20>)
 800a36a:	f000 b8b1 	b.w	800a4d0 <_fwalk_sglue>
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <fflush+0x24>)
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f7ff bfcd 	b.w	800a310 <_fflush_r>
 800a376:	bf00      	nop
 800a378:	2000000c 	.word	0x2000000c
 800a37c:	0800a311 	.word	0x0800a311
 800a380:	2000001c 	.word	0x2000001c
 800a384:	20000018 	.word	0x20000018

0800a388 <std>:
 800a388:	2300      	movs	r3, #0
 800a38a:	b510      	push	{r4, lr}
 800a38c:	4604      	mov	r4, r0
 800a38e:	e9c0 3300 	strd	r3, r3, [r0]
 800a392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a396:	6083      	str	r3, [r0, #8]
 800a398:	8181      	strh	r1, [r0, #12]
 800a39a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a39c:	81c2      	strh	r2, [r0, #14]
 800a39e:	6183      	str	r3, [r0, #24]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	2208      	movs	r2, #8
 800a3a4:	305c      	adds	r0, #92	@ 0x5c
 800a3a6:	f000 fa01 	bl	800a7ac <memset>
 800a3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e0 <std+0x58>)
 800a3ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e4 <std+0x5c>)
 800a3b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a3e8 <std+0x60>)
 800a3b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ec <std+0x64>)
 800a3b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a3f0 <std+0x68>)
 800a3bc:	6224      	str	r4, [r4, #32]
 800a3be:	429c      	cmp	r4, r3
 800a3c0:	d006      	beq.n	800a3d0 <std+0x48>
 800a3c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a3c6:	4294      	cmp	r4, r2
 800a3c8:	d002      	beq.n	800a3d0 <std+0x48>
 800a3ca:	33d0      	adds	r3, #208	@ 0xd0
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d105      	bne.n	800a3dc <std+0x54>
 800a3d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d8:	f000 ba60 	b.w	800a89c <__retarget_lock_init_recursive>
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	bf00      	nop
 800a3e0:	0800a5fd 	.word	0x0800a5fd
 800a3e4:	0800a61f 	.word	0x0800a61f
 800a3e8:	0800a657 	.word	0x0800a657
 800a3ec:	0800a67b 	.word	0x0800a67b
 800a3f0:	20000730 	.word	0x20000730

0800a3f4 <stdio_exit_handler>:
 800a3f4:	4a02      	ldr	r2, [pc, #8]	@ (800a400 <stdio_exit_handler+0xc>)
 800a3f6:	4903      	ldr	r1, [pc, #12]	@ (800a404 <stdio_exit_handler+0x10>)
 800a3f8:	4803      	ldr	r0, [pc, #12]	@ (800a408 <stdio_exit_handler+0x14>)
 800a3fa:	f000 b869 	b.w	800a4d0 <_fwalk_sglue>
 800a3fe:	bf00      	nop
 800a400:	2000000c 	.word	0x2000000c
 800a404:	0800a311 	.word	0x0800a311
 800a408:	2000001c 	.word	0x2000001c

0800a40c <cleanup_stdio>:
 800a40c:	6841      	ldr	r1, [r0, #4]
 800a40e:	4b0c      	ldr	r3, [pc, #48]	@ (800a440 <cleanup_stdio+0x34>)
 800a410:	4299      	cmp	r1, r3
 800a412:	b510      	push	{r4, lr}
 800a414:	4604      	mov	r4, r0
 800a416:	d001      	beq.n	800a41c <cleanup_stdio+0x10>
 800a418:	f7ff ff7a 	bl	800a310 <_fflush_r>
 800a41c:	68a1      	ldr	r1, [r4, #8]
 800a41e:	4b09      	ldr	r3, [pc, #36]	@ (800a444 <cleanup_stdio+0x38>)
 800a420:	4299      	cmp	r1, r3
 800a422:	d002      	beq.n	800a42a <cleanup_stdio+0x1e>
 800a424:	4620      	mov	r0, r4
 800a426:	f7ff ff73 	bl	800a310 <_fflush_r>
 800a42a:	68e1      	ldr	r1, [r4, #12]
 800a42c:	4b06      	ldr	r3, [pc, #24]	@ (800a448 <cleanup_stdio+0x3c>)
 800a42e:	4299      	cmp	r1, r3
 800a430:	d004      	beq.n	800a43c <cleanup_stdio+0x30>
 800a432:	4620      	mov	r0, r4
 800a434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a438:	f7ff bf6a 	b.w	800a310 <_fflush_r>
 800a43c:	bd10      	pop	{r4, pc}
 800a43e:	bf00      	nop
 800a440:	20000730 	.word	0x20000730
 800a444:	20000798 	.word	0x20000798
 800a448:	20000800 	.word	0x20000800

0800a44c <global_stdio_init.part.0>:
 800a44c:	b510      	push	{r4, lr}
 800a44e:	4b0b      	ldr	r3, [pc, #44]	@ (800a47c <global_stdio_init.part.0+0x30>)
 800a450:	4c0b      	ldr	r4, [pc, #44]	@ (800a480 <global_stdio_init.part.0+0x34>)
 800a452:	4a0c      	ldr	r2, [pc, #48]	@ (800a484 <global_stdio_init.part.0+0x38>)
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	4620      	mov	r0, r4
 800a458:	2200      	movs	r2, #0
 800a45a:	2104      	movs	r1, #4
 800a45c:	f7ff ff94 	bl	800a388 <std>
 800a460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a464:	2201      	movs	r2, #1
 800a466:	2109      	movs	r1, #9
 800a468:	f7ff ff8e 	bl	800a388 <std>
 800a46c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a470:	2202      	movs	r2, #2
 800a472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a476:	2112      	movs	r1, #18
 800a478:	f7ff bf86 	b.w	800a388 <std>
 800a47c:	20000868 	.word	0x20000868
 800a480:	20000730 	.word	0x20000730
 800a484:	0800a3f5 	.word	0x0800a3f5

0800a488 <__sfp_lock_acquire>:
 800a488:	4801      	ldr	r0, [pc, #4]	@ (800a490 <__sfp_lock_acquire+0x8>)
 800a48a:	f000 ba08 	b.w	800a89e <__retarget_lock_acquire_recursive>
 800a48e:	bf00      	nop
 800a490:	20000871 	.word	0x20000871

0800a494 <__sfp_lock_release>:
 800a494:	4801      	ldr	r0, [pc, #4]	@ (800a49c <__sfp_lock_release+0x8>)
 800a496:	f000 ba03 	b.w	800a8a0 <__retarget_lock_release_recursive>
 800a49a:	bf00      	nop
 800a49c:	20000871 	.word	0x20000871

0800a4a0 <__sinit>:
 800a4a0:	b510      	push	{r4, lr}
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	f7ff fff0 	bl	800a488 <__sfp_lock_acquire>
 800a4a8:	6a23      	ldr	r3, [r4, #32]
 800a4aa:	b11b      	cbz	r3, 800a4b4 <__sinit+0x14>
 800a4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b0:	f7ff bff0 	b.w	800a494 <__sfp_lock_release>
 800a4b4:	4b04      	ldr	r3, [pc, #16]	@ (800a4c8 <__sinit+0x28>)
 800a4b6:	6223      	str	r3, [r4, #32]
 800a4b8:	4b04      	ldr	r3, [pc, #16]	@ (800a4cc <__sinit+0x2c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1f5      	bne.n	800a4ac <__sinit+0xc>
 800a4c0:	f7ff ffc4 	bl	800a44c <global_stdio_init.part.0>
 800a4c4:	e7f2      	b.n	800a4ac <__sinit+0xc>
 800a4c6:	bf00      	nop
 800a4c8:	0800a40d 	.word	0x0800a40d
 800a4cc:	20000868 	.word	0x20000868

0800a4d0 <_fwalk_sglue>:
 800a4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	4688      	mov	r8, r1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	2600      	movs	r6, #0
 800a4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a4e4:	d505      	bpl.n	800a4f2 <_fwalk_sglue+0x22>
 800a4e6:	6824      	ldr	r4, [r4, #0]
 800a4e8:	2c00      	cmp	r4, #0
 800a4ea:	d1f7      	bne.n	800a4dc <_fwalk_sglue+0xc>
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f2:	89ab      	ldrh	r3, [r5, #12]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d907      	bls.n	800a508 <_fwalk_sglue+0x38>
 800a4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	d003      	beq.n	800a508 <_fwalk_sglue+0x38>
 800a500:	4629      	mov	r1, r5
 800a502:	4638      	mov	r0, r7
 800a504:	47c0      	blx	r8
 800a506:	4306      	orrs	r6, r0
 800a508:	3568      	adds	r5, #104	@ 0x68
 800a50a:	e7e9      	b.n	800a4e0 <_fwalk_sglue+0x10>

0800a50c <iprintf>:
 800a50c:	b40f      	push	{r0, r1, r2, r3}
 800a50e:	b507      	push	{r0, r1, r2, lr}
 800a510:	4906      	ldr	r1, [pc, #24]	@ (800a52c <iprintf+0x20>)
 800a512:	ab04      	add	r3, sp, #16
 800a514:	6808      	ldr	r0, [r1, #0]
 800a516:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51a:	6881      	ldr	r1, [r0, #8]
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	f000 fae3 	bl	800aae8 <_vfiprintf_r>
 800a522:	b003      	add	sp, #12
 800a524:	f85d eb04 	ldr.w	lr, [sp], #4
 800a528:	b004      	add	sp, #16
 800a52a:	4770      	bx	lr
 800a52c:	20000018 	.word	0x20000018

0800a530 <putchar>:
 800a530:	4b02      	ldr	r3, [pc, #8]	@ (800a53c <putchar+0xc>)
 800a532:	4601      	mov	r1, r0
 800a534:	6818      	ldr	r0, [r3, #0]
 800a536:	6882      	ldr	r2, [r0, #8]
 800a538:	f000 bdde 	b.w	800b0f8 <_putc_r>
 800a53c:	20000018 	.word	0x20000018

0800a540 <_puts_r>:
 800a540:	6a03      	ldr	r3, [r0, #32]
 800a542:	b570      	push	{r4, r5, r6, lr}
 800a544:	6884      	ldr	r4, [r0, #8]
 800a546:	4605      	mov	r5, r0
 800a548:	460e      	mov	r6, r1
 800a54a:	b90b      	cbnz	r3, 800a550 <_puts_r+0x10>
 800a54c:	f7ff ffa8 	bl	800a4a0 <__sinit>
 800a550:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a552:	07db      	lsls	r3, r3, #31
 800a554:	d405      	bmi.n	800a562 <_puts_r+0x22>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	0598      	lsls	r0, r3, #22
 800a55a:	d402      	bmi.n	800a562 <_puts_r+0x22>
 800a55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a55e:	f000 f99e 	bl	800a89e <__retarget_lock_acquire_recursive>
 800a562:	89a3      	ldrh	r3, [r4, #12]
 800a564:	0719      	lsls	r1, r3, #28
 800a566:	d502      	bpl.n	800a56e <_puts_r+0x2e>
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d135      	bne.n	800a5da <_puts_r+0x9a>
 800a56e:	4621      	mov	r1, r4
 800a570:	4628      	mov	r0, r5
 800a572:	f000 f8c5 	bl	800a700 <__swsetup_r>
 800a576:	b380      	cbz	r0, 800a5da <_puts_r+0x9a>
 800a578:	f04f 35ff 	mov.w	r5, #4294967295
 800a57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a57e:	07da      	lsls	r2, r3, #31
 800a580:	d405      	bmi.n	800a58e <_puts_r+0x4e>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	059b      	lsls	r3, r3, #22
 800a586:	d402      	bmi.n	800a58e <_puts_r+0x4e>
 800a588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a58a:	f000 f989 	bl	800a8a0 <__retarget_lock_release_recursive>
 800a58e:	4628      	mov	r0, r5
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	2b00      	cmp	r3, #0
 800a594:	da04      	bge.n	800a5a0 <_puts_r+0x60>
 800a596:	69a2      	ldr	r2, [r4, #24]
 800a598:	429a      	cmp	r2, r3
 800a59a:	dc17      	bgt.n	800a5cc <_puts_r+0x8c>
 800a59c:	290a      	cmp	r1, #10
 800a59e:	d015      	beq.n	800a5cc <_puts_r+0x8c>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	6022      	str	r2, [r4, #0]
 800a5a6:	7019      	strb	r1, [r3, #0]
 800a5a8:	68a3      	ldr	r3, [r4, #8]
 800a5aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	60a3      	str	r3, [r4, #8]
 800a5b2:	2900      	cmp	r1, #0
 800a5b4:	d1ed      	bne.n	800a592 <_puts_r+0x52>
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	da11      	bge.n	800a5de <_puts_r+0x9e>
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	210a      	movs	r1, #10
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 f85f 	bl	800a682 <__swbuf_r>
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d0d7      	beq.n	800a578 <_puts_r+0x38>
 800a5c8:	250a      	movs	r5, #10
 800a5ca:	e7d7      	b.n	800a57c <_puts_r+0x3c>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f857 	bl	800a682 <__swbuf_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1e7      	bne.n	800a5a8 <_puts_r+0x68>
 800a5d8:	e7ce      	b.n	800a578 <_puts_r+0x38>
 800a5da:	3e01      	subs	r6, #1
 800a5dc:	e7e4      	b.n	800a5a8 <_puts_r+0x68>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	701a      	strb	r2, [r3, #0]
 800a5e8:	e7ee      	b.n	800a5c8 <_puts_r+0x88>
	...

0800a5ec <puts>:
 800a5ec:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <puts+0xc>)
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	f7ff bfa5 	b.w	800a540 <_puts_r>
 800a5f6:	bf00      	nop
 800a5f8:	20000018 	.word	0x20000018

0800a5fc <__sread>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	460c      	mov	r4, r1
 800a600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a604:	f000 f8fc 	bl	800a800 <_read_r>
 800a608:	2800      	cmp	r0, #0
 800a60a:	bfab      	itete	ge
 800a60c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a60e:	89a3      	ldrhlt	r3, [r4, #12]
 800a610:	181b      	addge	r3, r3, r0
 800a612:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a616:	bfac      	ite	ge
 800a618:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a61a:	81a3      	strhlt	r3, [r4, #12]
 800a61c:	bd10      	pop	{r4, pc}

0800a61e <__swrite>:
 800a61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a622:	461f      	mov	r7, r3
 800a624:	898b      	ldrh	r3, [r1, #12]
 800a626:	05db      	lsls	r3, r3, #23
 800a628:	4605      	mov	r5, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	4616      	mov	r6, r2
 800a62e:	d505      	bpl.n	800a63c <__swrite+0x1e>
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	2302      	movs	r3, #2
 800a636:	2200      	movs	r2, #0
 800a638:	f000 f8d0 	bl	800a7dc <_lseek_r>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a642:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a646:	81a3      	strh	r3, [r4, #12]
 800a648:	4632      	mov	r2, r6
 800a64a:	463b      	mov	r3, r7
 800a64c:	4628      	mov	r0, r5
 800a64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	f000 b8e7 	b.w	800a824 <_write_r>

0800a656 <__sseek>:
 800a656:	b510      	push	{r4, lr}
 800a658:	460c      	mov	r4, r1
 800a65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65e:	f000 f8bd 	bl	800a7dc <_lseek_r>
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	bf15      	itete	ne
 800a668:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a66a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a66e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a672:	81a3      	strheq	r3, [r4, #12]
 800a674:	bf18      	it	ne
 800a676:	81a3      	strhne	r3, [r4, #12]
 800a678:	bd10      	pop	{r4, pc}

0800a67a <__sclose>:
 800a67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a67e:	f000 b89d 	b.w	800a7bc <_close_r>

0800a682 <__swbuf_r>:
 800a682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a684:	460e      	mov	r6, r1
 800a686:	4614      	mov	r4, r2
 800a688:	4605      	mov	r5, r0
 800a68a:	b118      	cbz	r0, 800a694 <__swbuf_r+0x12>
 800a68c:	6a03      	ldr	r3, [r0, #32]
 800a68e:	b90b      	cbnz	r3, 800a694 <__swbuf_r+0x12>
 800a690:	f7ff ff06 	bl	800a4a0 <__sinit>
 800a694:	69a3      	ldr	r3, [r4, #24]
 800a696:	60a3      	str	r3, [r4, #8]
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	071a      	lsls	r2, r3, #28
 800a69c:	d501      	bpl.n	800a6a2 <__swbuf_r+0x20>
 800a69e:	6923      	ldr	r3, [r4, #16]
 800a6a0:	b943      	cbnz	r3, 800a6b4 <__swbuf_r+0x32>
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f000 f82b 	bl	800a700 <__swsetup_r>
 800a6aa:	b118      	cbz	r0, 800a6b4 <__swbuf_r+0x32>
 800a6ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	6922      	ldr	r2, [r4, #16]
 800a6b8:	1a98      	subs	r0, r3, r2
 800a6ba:	6963      	ldr	r3, [r4, #20]
 800a6bc:	b2f6      	uxtb	r6, r6
 800a6be:	4283      	cmp	r3, r0
 800a6c0:	4637      	mov	r7, r6
 800a6c2:	dc05      	bgt.n	800a6d0 <__swbuf_r+0x4e>
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f7ff fe22 	bl	800a310 <_fflush_r>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d1ed      	bne.n	800a6ac <__swbuf_r+0x2a>
 800a6d0:	68a3      	ldr	r3, [r4, #8]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	60a3      	str	r3, [r4, #8]
 800a6d6:	6823      	ldr	r3, [r4, #0]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	6022      	str	r2, [r4, #0]
 800a6dc:	701e      	strb	r6, [r3, #0]
 800a6de:	6962      	ldr	r2, [r4, #20]
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d004      	beq.n	800a6f0 <__swbuf_r+0x6e>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	07db      	lsls	r3, r3, #31
 800a6ea:	d5e1      	bpl.n	800a6b0 <__swbuf_r+0x2e>
 800a6ec:	2e0a      	cmp	r6, #10
 800a6ee:	d1df      	bne.n	800a6b0 <__swbuf_r+0x2e>
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f7ff fe0c 	bl	800a310 <_fflush_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d0d9      	beq.n	800a6b0 <__swbuf_r+0x2e>
 800a6fc:	e7d6      	b.n	800a6ac <__swbuf_r+0x2a>
	...

0800a700 <__swsetup_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4b29      	ldr	r3, [pc, #164]	@ (800a7a8 <__swsetup_r+0xa8>)
 800a704:	4605      	mov	r5, r0
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	460c      	mov	r4, r1
 800a70a:	b118      	cbz	r0, 800a714 <__swsetup_r+0x14>
 800a70c:	6a03      	ldr	r3, [r0, #32]
 800a70e:	b90b      	cbnz	r3, 800a714 <__swsetup_r+0x14>
 800a710:	f7ff fec6 	bl	800a4a0 <__sinit>
 800a714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a718:	0719      	lsls	r1, r3, #28
 800a71a:	d422      	bmi.n	800a762 <__swsetup_r+0x62>
 800a71c:	06da      	lsls	r2, r3, #27
 800a71e:	d407      	bmi.n	800a730 <__swsetup_r+0x30>
 800a720:	2209      	movs	r2, #9
 800a722:	602a      	str	r2, [r5, #0]
 800a724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	e033      	b.n	800a798 <__swsetup_r+0x98>
 800a730:	0758      	lsls	r0, r3, #29
 800a732:	d512      	bpl.n	800a75a <__swsetup_r+0x5a>
 800a734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a736:	b141      	cbz	r1, 800a74a <__swsetup_r+0x4a>
 800a738:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a73c:	4299      	cmp	r1, r3
 800a73e:	d002      	beq.n	800a746 <__swsetup_r+0x46>
 800a740:	4628      	mov	r0, r5
 800a742:	f000 f8af 	bl	800a8a4 <_free_r>
 800a746:	2300      	movs	r3, #0
 800a748:	6363      	str	r3, [r4, #52]	@ 0x34
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	2300      	movs	r3, #0
 800a754:	6063      	str	r3, [r4, #4]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f043 0308 	orr.w	r3, r3, #8
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	6923      	ldr	r3, [r4, #16]
 800a764:	b94b      	cbnz	r3, 800a77a <__swsetup_r+0x7a>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a770:	d003      	beq.n	800a77a <__swsetup_r+0x7a>
 800a772:	4621      	mov	r1, r4
 800a774:	4628      	mov	r0, r5
 800a776:	f000 fc83 	bl	800b080 <__smakebuf_r>
 800a77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a77e:	f013 0201 	ands.w	r2, r3, #1
 800a782:	d00a      	beq.n	800a79a <__swsetup_r+0x9a>
 800a784:	2200      	movs	r2, #0
 800a786:	60a2      	str	r2, [r4, #8]
 800a788:	6962      	ldr	r2, [r4, #20]
 800a78a:	4252      	negs	r2, r2
 800a78c:	61a2      	str	r2, [r4, #24]
 800a78e:	6922      	ldr	r2, [r4, #16]
 800a790:	b942      	cbnz	r2, 800a7a4 <__swsetup_r+0xa4>
 800a792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a796:	d1c5      	bne.n	800a724 <__swsetup_r+0x24>
 800a798:	bd38      	pop	{r3, r4, r5, pc}
 800a79a:	0799      	lsls	r1, r3, #30
 800a79c:	bf58      	it	pl
 800a79e:	6962      	ldrpl	r2, [r4, #20]
 800a7a0:	60a2      	str	r2, [r4, #8]
 800a7a2:	e7f4      	b.n	800a78e <__swsetup_r+0x8e>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	e7f7      	b.n	800a798 <__swsetup_r+0x98>
 800a7a8:	20000018 	.word	0x20000018

0800a7ac <memset>:
 800a7ac:	4402      	add	r2, r0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d100      	bne.n	800a7b6 <memset+0xa>
 800a7b4:	4770      	bx	lr
 800a7b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7ba:	e7f9      	b.n	800a7b0 <memset+0x4>

0800a7bc <_close_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	@ (800a7d8 <_close_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f6 fe47 	bl	800145a <_close>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_close_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_close_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	2000086c 	.word	0x2000086c

0800a7dc <_lseek_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	@ (800a7fc <_lseek_r+0x20>)
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	4608      	mov	r0, r1
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	602a      	str	r2, [r5, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f7f6 fe5c 	bl	80014a8 <_lseek>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_lseek_r+0x1e>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_lseek_r+0x1e>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	2000086c 	.word	0x2000086c

0800a800 <_read_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	@ (800a820 <_read_r+0x20>)
 800a804:	4604      	mov	r4, r0
 800a806:	4608      	mov	r0, r1
 800a808:	4611      	mov	r1, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7f6 fdea 	bl	80013e8 <_read>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_read_r+0x1e>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_read_r+0x1e>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	2000086c 	.word	0x2000086c

0800a824 <_write_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	@ (800a844 <_write_r+0x20>)
 800a828:	4604      	mov	r4, r0
 800a82a:	4608      	mov	r0, r1
 800a82c:	4611      	mov	r1, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	602a      	str	r2, [r5, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f7f6 fdf5 	bl	8001422 <_write>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_write_r+0x1e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_write_r+0x1e>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	2000086c 	.word	0x2000086c

0800a848 <__errno>:
 800a848:	4b01      	ldr	r3, [pc, #4]	@ (800a850 <__errno+0x8>)
 800a84a:	6818      	ldr	r0, [r3, #0]
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	20000018 	.word	0x20000018

0800a854 <__libc_init_array>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4d0d      	ldr	r5, [pc, #52]	@ (800a88c <__libc_init_array+0x38>)
 800a858:	4c0d      	ldr	r4, [pc, #52]	@ (800a890 <__libc_init_array+0x3c>)
 800a85a:	1b64      	subs	r4, r4, r5
 800a85c:	10a4      	asrs	r4, r4, #2
 800a85e:	2600      	movs	r6, #0
 800a860:	42a6      	cmp	r6, r4
 800a862:	d109      	bne.n	800a878 <__libc_init_array+0x24>
 800a864:	4d0b      	ldr	r5, [pc, #44]	@ (800a894 <__libc_init_array+0x40>)
 800a866:	4c0c      	ldr	r4, [pc, #48]	@ (800a898 <__libc_init_array+0x44>)
 800a868:	f000 fcac 	bl	800b1c4 <_init>
 800a86c:	1b64      	subs	r4, r4, r5
 800a86e:	10a4      	asrs	r4, r4, #2
 800a870:	2600      	movs	r6, #0
 800a872:	42a6      	cmp	r6, r4
 800a874:	d105      	bne.n	800a882 <__libc_init_array+0x2e>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	f855 3b04 	ldr.w	r3, [r5], #4
 800a87c:	4798      	blx	r3
 800a87e:	3601      	adds	r6, #1
 800a880:	e7ee      	b.n	800a860 <__libc_init_array+0xc>
 800a882:	f855 3b04 	ldr.w	r3, [r5], #4
 800a886:	4798      	blx	r3
 800a888:	3601      	adds	r6, #1
 800a88a:	e7f2      	b.n	800a872 <__libc_init_array+0x1e>
 800a88c:	0800b848 	.word	0x0800b848
 800a890:	0800b848 	.word	0x0800b848
 800a894:	0800b848 	.word	0x0800b848
 800a898:	0800b84c 	.word	0x0800b84c

0800a89c <__retarget_lock_init_recursive>:
 800a89c:	4770      	bx	lr

0800a89e <__retarget_lock_acquire_recursive>:
 800a89e:	4770      	bx	lr

0800a8a0 <__retarget_lock_release_recursive>:
 800a8a0:	4770      	bx	lr
	...

0800a8a4 <_free_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	2900      	cmp	r1, #0
 800a8aa:	d041      	beq.n	800a930 <_free_r+0x8c>
 800a8ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8b0:	1f0c      	subs	r4, r1, #4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfb8      	it	lt
 800a8b6:	18e4      	addlt	r4, r4, r3
 800a8b8:	f000 f8e0 	bl	800aa7c <__malloc_lock>
 800a8bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a934 <_free_r+0x90>)
 800a8be:	6813      	ldr	r3, [r2, #0]
 800a8c0:	b933      	cbnz	r3, 800a8d0 <_free_r+0x2c>
 800a8c2:	6063      	str	r3, [r4, #4]
 800a8c4:	6014      	str	r4, [r2, #0]
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8cc:	f000 b8dc 	b.w	800aa88 <__malloc_unlock>
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	d908      	bls.n	800a8e6 <_free_r+0x42>
 800a8d4:	6820      	ldr	r0, [r4, #0]
 800a8d6:	1821      	adds	r1, r4, r0
 800a8d8:	428b      	cmp	r3, r1
 800a8da:	bf01      	itttt	eq
 800a8dc:	6819      	ldreq	r1, [r3, #0]
 800a8de:	685b      	ldreq	r3, [r3, #4]
 800a8e0:	1809      	addeq	r1, r1, r0
 800a8e2:	6021      	streq	r1, [r4, #0]
 800a8e4:	e7ed      	b.n	800a8c2 <_free_r+0x1e>
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	b10b      	cbz	r3, 800a8f0 <_free_r+0x4c>
 800a8ec:	42a3      	cmp	r3, r4
 800a8ee:	d9fa      	bls.n	800a8e6 <_free_r+0x42>
 800a8f0:	6811      	ldr	r1, [r2, #0]
 800a8f2:	1850      	adds	r0, r2, r1
 800a8f4:	42a0      	cmp	r0, r4
 800a8f6:	d10b      	bne.n	800a910 <_free_r+0x6c>
 800a8f8:	6820      	ldr	r0, [r4, #0]
 800a8fa:	4401      	add	r1, r0
 800a8fc:	1850      	adds	r0, r2, r1
 800a8fe:	4283      	cmp	r3, r0
 800a900:	6011      	str	r1, [r2, #0]
 800a902:	d1e0      	bne.n	800a8c6 <_free_r+0x22>
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	6053      	str	r3, [r2, #4]
 800a90a:	4408      	add	r0, r1
 800a90c:	6010      	str	r0, [r2, #0]
 800a90e:	e7da      	b.n	800a8c6 <_free_r+0x22>
 800a910:	d902      	bls.n	800a918 <_free_r+0x74>
 800a912:	230c      	movs	r3, #12
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	e7d6      	b.n	800a8c6 <_free_r+0x22>
 800a918:	6820      	ldr	r0, [r4, #0]
 800a91a:	1821      	adds	r1, r4, r0
 800a91c:	428b      	cmp	r3, r1
 800a91e:	bf04      	itt	eq
 800a920:	6819      	ldreq	r1, [r3, #0]
 800a922:	685b      	ldreq	r3, [r3, #4]
 800a924:	6063      	str	r3, [r4, #4]
 800a926:	bf04      	itt	eq
 800a928:	1809      	addeq	r1, r1, r0
 800a92a:	6021      	streq	r1, [r4, #0]
 800a92c:	6054      	str	r4, [r2, #4]
 800a92e:	e7ca      	b.n	800a8c6 <_free_r+0x22>
 800a930:	bd38      	pop	{r3, r4, r5, pc}
 800a932:	bf00      	nop
 800a934:	20000878 	.word	0x20000878

0800a938 <sbrk_aligned>:
 800a938:	b570      	push	{r4, r5, r6, lr}
 800a93a:	4e0f      	ldr	r6, [pc, #60]	@ (800a978 <sbrk_aligned+0x40>)
 800a93c:	460c      	mov	r4, r1
 800a93e:	6831      	ldr	r1, [r6, #0]
 800a940:	4605      	mov	r5, r0
 800a942:	b911      	cbnz	r1, 800a94a <sbrk_aligned+0x12>
 800a944:	f000 fc2e 	bl	800b1a4 <_sbrk_r>
 800a948:	6030      	str	r0, [r6, #0]
 800a94a:	4621      	mov	r1, r4
 800a94c:	4628      	mov	r0, r5
 800a94e:	f000 fc29 	bl	800b1a4 <_sbrk_r>
 800a952:	1c43      	adds	r3, r0, #1
 800a954:	d103      	bne.n	800a95e <sbrk_aligned+0x26>
 800a956:	f04f 34ff 	mov.w	r4, #4294967295
 800a95a:	4620      	mov	r0, r4
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	1cc4      	adds	r4, r0, #3
 800a960:	f024 0403 	bic.w	r4, r4, #3
 800a964:	42a0      	cmp	r0, r4
 800a966:	d0f8      	beq.n	800a95a <sbrk_aligned+0x22>
 800a968:	1a21      	subs	r1, r4, r0
 800a96a:	4628      	mov	r0, r5
 800a96c:	f000 fc1a 	bl	800b1a4 <_sbrk_r>
 800a970:	3001      	adds	r0, #1
 800a972:	d1f2      	bne.n	800a95a <sbrk_aligned+0x22>
 800a974:	e7ef      	b.n	800a956 <sbrk_aligned+0x1e>
 800a976:	bf00      	nop
 800a978:	20000874 	.word	0x20000874

0800a97c <_malloc_r>:
 800a97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a980:	1ccd      	adds	r5, r1, #3
 800a982:	f025 0503 	bic.w	r5, r5, #3
 800a986:	3508      	adds	r5, #8
 800a988:	2d0c      	cmp	r5, #12
 800a98a:	bf38      	it	cc
 800a98c:	250c      	movcc	r5, #12
 800a98e:	2d00      	cmp	r5, #0
 800a990:	4606      	mov	r6, r0
 800a992:	db01      	blt.n	800a998 <_malloc_r+0x1c>
 800a994:	42a9      	cmp	r1, r5
 800a996:	d904      	bls.n	800a9a2 <_malloc_r+0x26>
 800a998:	230c      	movs	r3, #12
 800a99a:	6033      	str	r3, [r6, #0]
 800a99c:	2000      	movs	r0, #0
 800a99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa78 <_malloc_r+0xfc>
 800a9a6:	f000 f869 	bl	800aa7c <__malloc_lock>
 800a9aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ae:	461c      	mov	r4, r3
 800a9b0:	bb44      	cbnz	r4, 800aa04 <_malloc_r+0x88>
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff ffbf 	bl	800a938 <sbrk_aligned>
 800a9ba:	1c43      	adds	r3, r0, #1
 800a9bc:	4604      	mov	r4, r0
 800a9be:	d158      	bne.n	800aa72 <_malloc_r+0xf6>
 800a9c0:	f8d8 4000 	ldr.w	r4, [r8]
 800a9c4:	4627      	mov	r7, r4
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	d143      	bne.n	800aa52 <_malloc_r+0xd6>
 800a9ca:	2c00      	cmp	r4, #0
 800a9cc:	d04b      	beq.n	800aa66 <_malloc_r+0xea>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	eb04 0903 	add.w	r9, r4, r3
 800a9d8:	f000 fbe4 	bl	800b1a4 <_sbrk_r>
 800a9dc:	4581      	cmp	r9, r0
 800a9de:	d142      	bne.n	800aa66 <_malloc_r+0xea>
 800a9e0:	6821      	ldr	r1, [r4, #0]
 800a9e2:	1a6d      	subs	r5, r5, r1
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ffa6 	bl	800a938 <sbrk_aligned>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d03a      	beq.n	800aa66 <_malloc_r+0xea>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	442b      	add	r3, r5
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	bb62      	cbnz	r2, 800aa58 <_malloc_r+0xdc>
 800a9fe:	f8c8 7000 	str.w	r7, [r8]
 800aa02:	e00f      	b.n	800aa24 <_malloc_r+0xa8>
 800aa04:	6822      	ldr	r2, [r4, #0]
 800aa06:	1b52      	subs	r2, r2, r5
 800aa08:	d420      	bmi.n	800aa4c <_malloc_r+0xd0>
 800aa0a:	2a0b      	cmp	r2, #11
 800aa0c:	d917      	bls.n	800aa3e <_malloc_r+0xc2>
 800aa0e:	1961      	adds	r1, r4, r5
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	6025      	str	r5, [r4, #0]
 800aa14:	bf18      	it	ne
 800aa16:	6059      	strne	r1, [r3, #4]
 800aa18:	6863      	ldr	r3, [r4, #4]
 800aa1a:	bf08      	it	eq
 800aa1c:	f8c8 1000 	streq.w	r1, [r8]
 800aa20:	5162      	str	r2, [r4, r5]
 800aa22:	604b      	str	r3, [r1, #4]
 800aa24:	4630      	mov	r0, r6
 800aa26:	f000 f82f 	bl	800aa88 <__malloc_unlock>
 800aa2a:	f104 000b 	add.w	r0, r4, #11
 800aa2e:	1d23      	adds	r3, r4, #4
 800aa30:	f020 0007 	bic.w	r0, r0, #7
 800aa34:	1ac2      	subs	r2, r0, r3
 800aa36:	bf1c      	itt	ne
 800aa38:	1a1b      	subne	r3, r3, r0
 800aa3a:	50a3      	strne	r3, [r4, r2]
 800aa3c:	e7af      	b.n	800a99e <_malloc_r+0x22>
 800aa3e:	6862      	ldr	r2, [r4, #4]
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	bf0c      	ite	eq
 800aa44:	f8c8 2000 	streq.w	r2, [r8]
 800aa48:	605a      	strne	r2, [r3, #4]
 800aa4a:	e7eb      	b.n	800aa24 <_malloc_r+0xa8>
 800aa4c:	4623      	mov	r3, r4
 800aa4e:	6864      	ldr	r4, [r4, #4]
 800aa50:	e7ae      	b.n	800a9b0 <_malloc_r+0x34>
 800aa52:	463c      	mov	r4, r7
 800aa54:	687f      	ldr	r7, [r7, #4]
 800aa56:	e7b6      	b.n	800a9c6 <_malloc_r+0x4a>
 800aa58:	461a      	mov	r2, r3
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d1fb      	bne.n	800aa58 <_malloc_r+0xdc>
 800aa60:	2300      	movs	r3, #0
 800aa62:	6053      	str	r3, [r2, #4]
 800aa64:	e7de      	b.n	800aa24 <_malloc_r+0xa8>
 800aa66:	230c      	movs	r3, #12
 800aa68:	6033      	str	r3, [r6, #0]
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f000 f80c 	bl	800aa88 <__malloc_unlock>
 800aa70:	e794      	b.n	800a99c <_malloc_r+0x20>
 800aa72:	6005      	str	r5, [r0, #0]
 800aa74:	e7d6      	b.n	800aa24 <_malloc_r+0xa8>
 800aa76:	bf00      	nop
 800aa78:	20000878 	.word	0x20000878

0800aa7c <__malloc_lock>:
 800aa7c:	4801      	ldr	r0, [pc, #4]	@ (800aa84 <__malloc_lock+0x8>)
 800aa7e:	f7ff bf0e 	b.w	800a89e <__retarget_lock_acquire_recursive>
 800aa82:	bf00      	nop
 800aa84:	20000870 	.word	0x20000870

0800aa88 <__malloc_unlock>:
 800aa88:	4801      	ldr	r0, [pc, #4]	@ (800aa90 <__malloc_unlock+0x8>)
 800aa8a:	f7ff bf09 	b.w	800a8a0 <__retarget_lock_release_recursive>
 800aa8e:	bf00      	nop
 800aa90:	20000870 	.word	0x20000870

0800aa94 <__sfputc_r>:
 800aa94:	6893      	ldr	r3, [r2, #8]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	b410      	push	{r4}
 800aa9c:	6093      	str	r3, [r2, #8]
 800aa9e:	da08      	bge.n	800aab2 <__sfputc_r+0x1e>
 800aaa0:	6994      	ldr	r4, [r2, #24]
 800aaa2:	42a3      	cmp	r3, r4
 800aaa4:	db01      	blt.n	800aaaa <__sfputc_r+0x16>
 800aaa6:	290a      	cmp	r1, #10
 800aaa8:	d103      	bne.n	800aab2 <__sfputc_r+0x1e>
 800aaaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaae:	f7ff bde8 	b.w	800a682 <__swbuf_r>
 800aab2:	6813      	ldr	r3, [r2, #0]
 800aab4:	1c58      	adds	r0, r3, #1
 800aab6:	6010      	str	r0, [r2, #0]
 800aab8:	7019      	strb	r1, [r3, #0]
 800aaba:	4608      	mov	r0, r1
 800aabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <__sfputs_r>:
 800aac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac4:	4606      	mov	r6, r0
 800aac6:	460f      	mov	r7, r1
 800aac8:	4614      	mov	r4, r2
 800aaca:	18d5      	adds	r5, r2, r3
 800aacc:	42ac      	cmp	r4, r5
 800aace:	d101      	bne.n	800aad4 <__sfputs_r+0x12>
 800aad0:	2000      	movs	r0, #0
 800aad2:	e007      	b.n	800aae4 <__sfputs_r+0x22>
 800aad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad8:	463a      	mov	r2, r7
 800aada:	4630      	mov	r0, r6
 800aadc:	f7ff ffda 	bl	800aa94 <__sfputc_r>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d1f3      	bne.n	800aacc <__sfputs_r+0xa>
 800aae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aae8 <_vfiprintf_r>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	460d      	mov	r5, r1
 800aaee:	b09d      	sub	sp, #116	@ 0x74
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	4698      	mov	r8, r3
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	b118      	cbz	r0, 800ab00 <_vfiprintf_r+0x18>
 800aaf8:	6a03      	ldr	r3, [r0, #32]
 800aafa:	b90b      	cbnz	r3, 800ab00 <_vfiprintf_r+0x18>
 800aafc:	f7ff fcd0 	bl	800a4a0 <__sinit>
 800ab00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab02:	07d9      	lsls	r1, r3, #31
 800ab04:	d405      	bmi.n	800ab12 <_vfiprintf_r+0x2a>
 800ab06:	89ab      	ldrh	r3, [r5, #12]
 800ab08:	059a      	lsls	r2, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_vfiprintf_r+0x2a>
 800ab0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0e:	f7ff fec6 	bl	800a89e <__retarget_lock_acquire_recursive>
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	071b      	lsls	r3, r3, #28
 800ab16:	d501      	bpl.n	800ab1c <_vfiprintf_r+0x34>
 800ab18:	692b      	ldr	r3, [r5, #16]
 800ab1a:	b99b      	cbnz	r3, 800ab44 <_vfiprintf_r+0x5c>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f7ff fdee 	bl	800a700 <__swsetup_r>
 800ab24:	b170      	cbz	r0, 800ab44 <_vfiprintf_r+0x5c>
 800ab26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab28:	07dc      	lsls	r4, r3, #31
 800ab2a:	d504      	bpl.n	800ab36 <_vfiprintf_r+0x4e>
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab30:	b01d      	add	sp, #116	@ 0x74
 800ab32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	0598      	lsls	r0, r3, #22
 800ab3a:	d4f7      	bmi.n	800ab2c <_vfiprintf_r+0x44>
 800ab3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab3e:	f7ff feaf 	bl	800a8a0 <__retarget_lock_release_recursive>
 800ab42:	e7f3      	b.n	800ab2c <_vfiprintf_r+0x44>
 800ab44:	2300      	movs	r3, #0
 800ab46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab48:	2320      	movs	r3, #32
 800ab4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab52:	2330      	movs	r3, #48	@ 0x30
 800ab54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad04 <_vfiprintf_r+0x21c>
 800ab58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab5c:	f04f 0901 	mov.w	r9, #1
 800ab60:	4623      	mov	r3, r4
 800ab62:	469a      	mov	sl, r3
 800ab64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab68:	b10a      	cbz	r2, 800ab6e <_vfiprintf_r+0x86>
 800ab6a:	2a25      	cmp	r2, #37	@ 0x25
 800ab6c:	d1f9      	bne.n	800ab62 <_vfiprintf_r+0x7a>
 800ab6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab72:	d00b      	beq.n	800ab8c <_vfiprintf_r+0xa4>
 800ab74:	465b      	mov	r3, fp
 800ab76:	4622      	mov	r2, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7ff ffa1 	bl	800aac2 <__sfputs_r>
 800ab80:	3001      	adds	r0, #1
 800ab82:	f000 80a7 	beq.w	800acd4 <_vfiprintf_r+0x1ec>
 800ab86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab88:	445a      	add	r2, fp
 800ab8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 809f 	beq.w	800acd4 <_vfiprintf_r+0x1ec>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba0:	f10a 0a01 	add.w	sl, sl, #1
 800aba4:	9304      	str	r3, [sp, #16]
 800aba6:	9307      	str	r3, [sp, #28]
 800aba8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abac:	931a      	str	r3, [sp, #104]	@ 0x68
 800abae:	4654      	mov	r4, sl
 800abb0:	2205      	movs	r2, #5
 800abb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb6:	4853      	ldr	r0, [pc, #332]	@ (800ad04 <_vfiprintf_r+0x21c>)
 800abb8:	f7f5 fb42 	bl	8000240 <memchr>
 800abbc:	9a04      	ldr	r2, [sp, #16]
 800abbe:	b9d8      	cbnz	r0, 800abf8 <_vfiprintf_r+0x110>
 800abc0:	06d1      	lsls	r1, r2, #27
 800abc2:	bf44      	itt	mi
 800abc4:	2320      	movmi	r3, #32
 800abc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abca:	0713      	lsls	r3, r2, #28
 800abcc:	bf44      	itt	mi
 800abce:	232b      	movmi	r3, #43	@ 0x2b
 800abd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abda:	d015      	beq.n	800ac08 <_vfiprintf_r+0x120>
 800abdc:	9a07      	ldr	r2, [sp, #28]
 800abde:	4654      	mov	r4, sl
 800abe0:	2000      	movs	r0, #0
 800abe2:	f04f 0c0a 	mov.w	ip, #10
 800abe6:	4621      	mov	r1, r4
 800abe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abec:	3b30      	subs	r3, #48	@ 0x30
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d94b      	bls.n	800ac8a <_vfiprintf_r+0x1a2>
 800abf2:	b1b0      	cbz	r0, 800ac22 <_vfiprintf_r+0x13a>
 800abf4:	9207      	str	r2, [sp, #28]
 800abf6:	e014      	b.n	800ac22 <_vfiprintf_r+0x13a>
 800abf8:	eba0 0308 	sub.w	r3, r0, r8
 800abfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ac00:	4313      	orrs	r3, r2
 800ac02:	9304      	str	r3, [sp, #16]
 800ac04:	46a2      	mov	sl, r4
 800ac06:	e7d2      	b.n	800abae <_vfiprintf_r+0xc6>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	1d19      	adds	r1, r3, #4
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	9103      	str	r1, [sp, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfbb      	ittet	lt
 800ac14:	425b      	neglt	r3, r3
 800ac16:	f042 0202 	orrlt.w	r2, r2, #2
 800ac1a:	9307      	strge	r3, [sp, #28]
 800ac1c:	9307      	strlt	r3, [sp, #28]
 800ac1e:	bfb8      	it	lt
 800ac20:	9204      	strlt	r2, [sp, #16]
 800ac22:	7823      	ldrb	r3, [r4, #0]
 800ac24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac26:	d10a      	bne.n	800ac3e <_vfiprintf_r+0x156>
 800ac28:	7863      	ldrb	r3, [r4, #1]
 800ac2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2c:	d132      	bne.n	800ac94 <_vfiprintf_r+0x1ac>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	9203      	str	r2, [sp, #12]
 800ac36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac3a:	3402      	adds	r4, #2
 800ac3c:	9305      	str	r3, [sp, #20]
 800ac3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad14 <_vfiprintf_r+0x22c>
 800ac42:	7821      	ldrb	r1, [r4, #0]
 800ac44:	2203      	movs	r2, #3
 800ac46:	4650      	mov	r0, sl
 800ac48:	f7f5 fafa 	bl	8000240 <memchr>
 800ac4c:	b138      	cbz	r0, 800ac5e <_vfiprintf_r+0x176>
 800ac4e:	9b04      	ldr	r3, [sp, #16]
 800ac50:	eba0 000a 	sub.w	r0, r0, sl
 800ac54:	2240      	movs	r2, #64	@ 0x40
 800ac56:	4082      	lsls	r2, r0
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	3401      	adds	r4, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac62:	4829      	ldr	r0, [pc, #164]	@ (800ad08 <_vfiprintf_r+0x220>)
 800ac64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac68:	2206      	movs	r2, #6
 800ac6a:	f7f5 fae9 	bl	8000240 <memchr>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d03f      	beq.n	800acf2 <_vfiprintf_r+0x20a>
 800ac72:	4b26      	ldr	r3, [pc, #152]	@ (800ad0c <_vfiprintf_r+0x224>)
 800ac74:	bb1b      	cbnz	r3, 800acbe <_vfiprintf_r+0x1d6>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	3307      	adds	r3, #7
 800ac7a:	f023 0307 	bic.w	r3, r3, #7
 800ac7e:	3308      	adds	r3, #8
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac84:	443b      	add	r3, r7
 800ac86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac88:	e76a      	b.n	800ab60 <_vfiprintf_r+0x78>
 800ac8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8e:	460c      	mov	r4, r1
 800ac90:	2001      	movs	r0, #1
 800ac92:	e7a8      	b.n	800abe6 <_vfiprintf_r+0xfe>
 800ac94:	2300      	movs	r3, #0
 800ac96:	3401      	adds	r4, #1
 800ac98:	9305      	str	r3, [sp, #20]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f04f 0c0a 	mov.w	ip, #10
 800aca0:	4620      	mov	r0, r4
 800aca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca6:	3a30      	subs	r2, #48	@ 0x30
 800aca8:	2a09      	cmp	r2, #9
 800acaa:	d903      	bls.n	800acb4 <_vfiprintf_r+0x1cc>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0c6      	beq.n	800ac3e <_vfiprintf_r+0x156>
 800acb0:	9105      	str	r1, [sp, #20]
 800acb2:	e7c4      	b.n	800ac3e <_vfiprintf_r+0x156>
 800acb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb8:	4604      	mov	r4, r0
 800acba:	2301      	movs	r3, #1
 800acbc:	e7f0      	b.n	800aca0 <_vfiprintf_r+0x1b8>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4b12      	ldr	r3, [pc, #72]	@ (800ad10 <_vfiprintf_r+0x228>)
 800acc6:	a904      	add	r1, sp, #16
 800acc8:	4630      	mov	r0, r6
 800acca:	f3af 8000 	nop.w
 800acce:	4607      	mov	r7, r0
 800acd0:	1c78      	adds	r0, r7, #1
 800acd2:	d1d6      	bne.n	800ac82 <_vfiprintf_r+0x19a>
 800acd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acd6:	07d9      	lsls	r1, r3, #31
 800acd8:	d405      	bmi.n	800ace6 <_vfiprintf_r+0x1fe>
 800acda:	89ab      	ldrh	r3, [r5, #12]
 800acdc:	059a      	lsls	r2, r3, #22
 800acde:	d402      	bmi.n	800ace6 <_vfiprintf_r+0x1fe>
 800ace0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ace2:	f7ff fddd 	bl	800a8a0 <__retarget_lock_release_recursive>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	065b      	lsls	r3, r3, #25
 800acea:	f53f af1f 	bmi.w	800ab2c <_vfiprintf_r+0x44>
 800acee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf0:	e71e      	b.n	800ab30 <_vfiprintf_r+0x48>
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	462a      	mov	r2, r5
 800acf8:	4b05      	ldr	r3, [pc, #20]	@ (800ad10 <_vfiprintf_r+0x228>)
 800acfa:	a904      	add	r1, sp, #16
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 f879 	bl	800adf4 <_printf_i>
 800ad02:	e7e4      	b.n	800acce <_vfiprintf_r+0x1e6>
 800ad04:	0800b80c 	.word	0x0800b80c
 800ad08:	0800b816 	.word	0x0800b816
 800ad0c:	00000000 	.word	0x00000000
 800ad10:	0800aac3 	.word	0x0800aac3
 800ad14:	0800b812 	.word	0x0800b812

0800ad18 <_printf_common>:
 800ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	4616      	mov	r6, r2
 800ad1e:	4698      	mov	r8, r3
 800ad20:	688a      	ldr	r2, [r1, #8]
 800ad22:	690b      	ldr	r3, [r1, #16]
 800ad24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	bfb8      	it	lt
 800ad2c:	4613      	movlt	r3, r2
 800ad2e:	6033      	str	r3, [r6, #0]
 800ad30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad34:	4607      	mov	r7, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	b10a      	cbz	r2, 800ad3e <_printf_common+0x26>
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	6033      	str	r3, [r6, #0]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	0699      	lsls	r1, r3, #26
 800ad42:	bf42      	ittt	mi
 800ad44:	6833      	ldrmi	r3, [r6, #0]
 800ad46:	3302      	addmi	r3, #2
 800ad48:	6033      	strmi	r3, [r6, #0]
 800ad4a:	6825      	ldr	r5, [r4, #0]
 800ad4c:	f015 0506 	ands.w	r5, r5, #6
 800ad50:	d106      	bne.n	800ad60 <_printf_common+0x48>
 800ad52:	f104 0a19 	add.w	sl, r4, #25
 800ad56:	68e3      	ldr	r3, [r4, #12]
 800ad58:	6832      	ldr	r2, [r6, #0]
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	42ab      	cmp	r3, r5
 800ad5e:	dc26      	bgt.n	800adae <_printf_common+0x96>
 800ad60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	3b00      	subs	r3, #0
 800ad68:	bf18      	it	ne
 800ad6a:	2301      	movne	r3, #1
 800ad6c:	0692      	lsls	r2, r2, #26
 800ad6e:	d42b      	bmi.n	800adc8 <_printf_common+0xb0>
 800ad70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad74:	4641      	mov	r1, r8
 800ad76:	4638      	mov	r0, r7
 800ad78:	47c8      	blx	r9
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d01e      	beq.n	800adbc <_printf_common+0xa4>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	6922      	ldr	r2, [r4, #16]
 800ad82:	f003 0306 	and.w	r3, r3, #6
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	bf02      	ittt	eq
 800ad8a:	68e5      	ldreq	r5, [r4, #12]
 800ad8c:	6833      	ldreq	r3, [r6, #0]
 800ad8e:	1aed      	subeq	r5, r5, r3
 800ad90:	68a3      	ldr	r3, [r4, #8]
 800ad92:	bf0c      	ite	eq
 800ad94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad98:	2500      	movne	r5, #0
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	bfc4      	itt	gt
 800ad9e:	1a9b      	subgt	r3, r3, r2
 800ada0:	18ed      	addgt	r5, r5, r3
 800ada2:	2600      	movs	r6, #0
 800ada4:	341a      	adds	r4, #26
 800ada6:	42b5      	cmp	r5, r6
 800ada8:	d11a      	bne.n	800ade0 <_printf_common+0xc8>
 800adaa:	2000      	movs	r0, #0
 800adac:	e008      	b.n	800adc0 <_printf_common+0xa8>
 800adae:	2301      	movs	r3, #1
 800adb0:	4652      	mov	r2, sl
 800adb2:	4641      	mov	r1, r8
 800adb4:	4638      	mov	r0, r7
 800adb6:	47c8      	blx	r9
 800adb8:	3001      	adds	r0, #1
 800adba:	d103      	bne.n	800adc4 <_printf_common+0xac>
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc4:	3501      	adds	r5, #1
 800adc6:	e7c6      	b.n	800ad56 <_printf_common+0x3e>
 800adc8:	18e1      	adds	r1, r4, r3
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	2030      	movs	r0, #48	@ 0x30
 800adce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800add2:	4422      	add	r2, r4
 800add4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800add8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800addc:	3302      	adds	r3, #2
 800adde:	e7c7      	b.n	800ad70 <_printf_common+0x58>
 800ade0:	2301      	movs	r3, #1
 800ade2:	4622      	mov	r2, r4
 800ade4:	4641      	mov	r1, r8
 800ade6:	4638      	mov	r0, r7
 800ade8:	47c8      	blx	r9
 800adea:	3001      	adds	r0, #1
 800adec:	d0e6      	beq.n	800adbc <_printf_common+0xa4>
 800adee:	3601      	adds	r6, #1
 800adf0:	e7d9      	b.n	800ada6 <_printf_common+0x8e>
	...

0800adf4 <_printf_i>:
 800adf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adf8:	7e0f      	ldrb	r7, [r1, #24]
 800adfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adfc:	2f78      	cmp	r7, #120	@ 0x78
 800adfe:	4691      	mov	r9, r2
 800ae00:	4680      	mov	r8, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	469a      	mov	sl, r3
 800ae06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae0a:	d807      	bhi.n	800ae1c <_printf_i+0x28>
 800ae0c:	2f62      	cmp	r7, #98	@ 0x62
 800ae0e:	d80a      	bhi.n	800ae26 <_printf_i+0x32>
 800ae10:	2f00      	cmp	r7, #0
 800ae12:	f000 80d2 	beq.w	800afba <_printf_i+0x1c6>
 800ae16:	2f58      	cmp	r7, #88	@ 0x58
 800ae18:	f000 80b9 	beq.w	800af8e <_printf_i+0x19a>
 800ae1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae24:	e03a      	b.n	800ae9c <_printf_i+0xa8>
 800ae26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae2a:	2b15      	cmp	r3, #21
 800ae2c:	d8f6      	bhi.n	800ae1c <_printf_i+0x28>
 800ae2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ae34 <_printf_i+0x40>)
 800ae30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800aea1 	.word	0x0800aea1
 800ae3c:	0800ae1d 	.word	0x0800ae1d
 800ae40:	0800ae1d 	.word	0x0800ae1d
 800ae44:	0800ae1d 	.word	0x0800ae1d
 800ae48:	0800ae1d 	.word	0x0800ae1d
 800ae4c:	0800aea1 	.word	0x0800aea1
 800ae50:	0800ae1d 	.word	0x0800ae1d
 800ae54:	0800ae1d 	.word	0x0800ae1d
 800ae58:	0800ae1d 	.word	0x0800ae1d
 800ae5c:	0800ae1d 	.word	0x0800ae1d
 800ae60:	0800afa1 	.word	0x0800afa1
 800ae64:	0800aecb 	.word	0x0800aecb
 800ae68:	0800af5b 	.word	0x0800af5b
 800ae6c:	0800ae1d 	.word	0x0800ae1d
 800ae70:	0800ae1d 	.word	0x0800ae1d
 800ae74:	0800afc3 	.word	0x0800afc3
 800ae78:	0800ae1d 	.word	0x0800ae1d
 800ae7c:	0800aecb 	.word	0x0800aecb
 800ae80:	0800ae1d 	.word	0x0800ae1d
 800ae84:	0800ae1d 	.word	0x0800ae1d
 800ae88:	0800af63 	.word	0x0800af63
 800ae8c:	6833      	ldr	r3, [r6, #0]
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6032      	str	r2, [r6, #0]
 800ae94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e09d      	b.n	800afdc <_printf_i+0x1e8>
 800aea0:	6833      	ldr	r3, [r6, #0]
 800aea2:	6820      	ldr	r0, [r4, #0]
 800aea4:	1d19      	adds	r1, r3, #4
 800aea6:	6031      	str	r1, [r6, #0]
 800aea8:	0606      	lsls	r6, r0, #24
 800aeaa:	d501      	bpl.n	800aeb0 <_printf_i+0xbc>
 800aeac:	681d      	ldr	r5, [r3, #0]
 800aeae:	e003      	b.n	800aeb8 <_printf_i+0xc4>
 800aeb0:	0645      	lsls	r5, r0, #25
 800aeb2:	d5fb      	bpl.n	800aeac <_printf_i+0xb8>
 800aeb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aeb8:	2d00      	cmp	r5, #0
 800aeba:	da03      	bge.n	800aec4 <_printf_i+0xd0>
 800aebc:	232d      	movs	r3, #45	@ 0x2d
 800aebe:	426d      	negs	r5, r5
 800aec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec4:	4859      	ldr	r0, [pc, #356]	@ (800b02c <_printf_i+0x238>)
 800aec6:	230a      	movs	r3, #10
 800aec8:	e011      	b.n	800aeee <_printf_i+0xfa>
 800aeca:	6821      	ldr	r1, [r4, #0]
 800aecc:	6833      	ldr	r3, [r6, #0]
 800aece:	0608      	lsls	r0, r1, #24
 800aed0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aed4:	d402      	bmi.n	800aedc <_printf_i+0xe8>
 800aed6:	0649      	lsls	r1, r1, #25
 800aed8:	bf48      	it	mi
 800aeda:	b2ad      	uxthmi	r5, r5
 800aedc:	2f6f      	cmp	r7, #111	@ 0x6f
 800aede:	4853      	ldr	r0, [pc, #332]	@ (800b02c <_printf_i+0x238>)
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	bf14      	ite	ne
 800aee4:	230a      	movne	r3, #10
 800aee6:	2308      	moveq	r3, #8
 800aee8:	2100      	movs	r1, #0
 800aeea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeee:	6866      	ldr	r6, [r4, #4]
 800aef0:	60a6      	str	r6, [r4, #8]
 800aef2:	2e00      	cmp	r6, #0
 800aef4:	bfa2      	ittt	ge
 800aef6:	6821      	ldrge	r1, [r4, #0]
 800aef8:	f021 0104 	bicge.w	r1, r1, #4
 800aefc:	6021      	strge	r1, [r4, #0]
 800aefe:	b90d      	cbnz	r5, 800af04 <_printf_i+0x110>
 800af00:	2e00      	cmp	r6, #0
 800af02:	d04b      	beq.n	800af9c <_printf_i+0x1a8>
 800af04:	4616      	mov	r6, r2
 800af06:	fbb5 f1f3 	udiv	r1, r5, r3
 800af0a:	fb03 5711 	mls	r7, r3, r1, r5
 800af0e:	5dc7      	ldrb	r7, [r0, r7]
 800af10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af14:	462f      	mov	r7, r5
 800af16:	42bb      	cmp	r3, r7
 800af18:	460d      	mov	r5, r1
 800af1a:	d9f4      	bls.n	800af06 <_printf_i+0x112>
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d10b      	bne.n	800af38 <_printf_i+0x144>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	07df      	lsls	r7, r3, #31
 800af24:	d508      	bpl.n	800af38 <_printf_i+0x144>
 800af26:	6923      	ldr	r3, [r4, #16]
 800af28:	6861      	ldr	r1, [r4, #4]
 800af2a:	4299      	cmp	r1, r3
 800af2c:	bfde      	ittt	le
 800af2e:	2330      	movle	r3, #48	@ 0x30
 800af30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af38:	1b92      	subs	r2, r2, r6
 800af3a:	6122      	str	r2, [r4, #16]
 800af3c:	f8cd a000 	str.w	sl, [sp]
 800af40:	464b      	mov	r3, r9
 800af42:	aa03      	add	r2, sp, #12
 800af44:	4621      	mov	r1, r4
 800af46:	4640      	mov	r0, r8
 800af48:	f7ff fee6 	bl	800ad18 <_printf_common>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d14a      	bne.n	800afe6 <_printf_i+0x1f2>
 800af50:	f04f 30ff 	mov.w	r0, #4294967295
 800af54:	b004      	add	sp, #16
 800af56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	f043 0320 	orr.w	r3, r3, #32
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	4833      	ldr	r0, [pc, #204]	@ (800b030 <_printf_i+0x23c>)
 800af64:	2778      	movs	r7, #120	@ 0x78
 800af66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	6831      	ldr	r1, [r6, #0]
 800af6e:	061f      	lsls	r7, r3, #24
 800af70:	f851 5b04 	ldr.w	r5, [r1], #4
 800af74:	d402      	bmi.n	800af7c <_printf_i+0x188>
 800af76:	065f      	lsls	r7, r3, #25
 800af78:	bf48      	it	mi
 800af7a:	b2ad      	uxthmi	r5, r5
 800af7c:	6031      	str	r1, [r6, #0]
 800af7e:	07d9      	lsls	r1, r3, #31
 800af80:	bf44      	itt	mi
 800af82:	f043 0320 	orrmi.w	r3, r3, #32
 800af86:	6023      	strmi	r3, [r4, #0]
 800af88:	b11d      	cbz	r5, 800af92 <_printf_i+0x19e>
 800af8a:	2310      	movs	r3, #16
 800af8c:	e7ac      	b.n	800aee8 <_printf_i+0xf4>
 800af8e:	4827      	ldr	r0, [pc, #156]	@ (800b02c <_printf_i+0x238>)
 800af90:	e7e9      	b.n	800af66 <_printf_i+0x172>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	f023 0320 	bic.w	r3, r3, #32
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	e7f6      	b.n	800af8a <_printf_i+0x196>
 800af9c:	4616      	mov	r6, r2
 800af9e:	e7bd      	b.n	800af1c <_printf_i+0x128>
 800afa0:	6833      	ldr	r3, [r6, #0]
 800afa2:	6825      	ldr	r5, [r4, #0]
 800afa4:	6961      	ldr	r1, [r4, #20]
 800afa6:	1d18      	adds	r0, r3, #4
 800afa8:	6030      	str	r0, [r6, #0]
 800afaa:	062e      	lsls	r6, r5, #24
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	d501      	bpl.n	800afb4 <_printf_i+0x1c0>
 800afb0:	6019      	str	r1, [r3, #0]
 800afb2:	e002      	b.n	800afba <_printf_i+0x1c6>
 800afb4:	0668      	lsls	r0, r5, #25
 800afb6:	d5fb      	bpl.n	800afb0 <_printf_i+0x1bc>
 800afb8:	8019      	strh	r1, [r3, #0]
 800afba:	2300      	movs	r3, #0
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	4616      	mov	r6, r2
 800afc0:	e7bc      	b.n	800af3c <_printf_i+0x148>
 800afc2:	6833      	ldr	r3, [r6, #0]
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	6032      	str	r2, [r6, #0]
 800afc8:	681e      	ldr	r6, [r3, #0]
 800afca:	6862      	ldr	r2, [r4, #4]
 800afcc:	2100      	movs	r1, #0
 800afce:	4630      	mov	r0, r6
 800afd0:	f7f5 f936 	bl	8000240 <memchr>
 800afd4:	b108      	cbz	r0, 800afda <_printf_i+0x1e6>
 800afd6:	1b80      	subs	r0, r0, r6
 800afd8:	6060      	str	r0, [r4, #4]
 800afda:	6863      	ldr	r3, [r4, #4]
 800afdc:	6123      	str	r3, [r4, #16]
 800afde:	2300      	movs	r3, #0
 800afe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe4:	e7aa      	b.n	800af3c <_printf_i+0x148>
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	4632      	mov	r2, r6
 800afea:	4649      	mov	r1, r9
 800afec:	4640      	mov	r0, r8
 800afee:	47d0      	blx	sl
 800aff0:	3001      	adds	r0, #1
 800aff2:	d0ad      	beq.n	800af50 <_printf_i+0x15c>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	079b      	lsls	r3, r3, #30
 800aff8:	d413      	bmi.n	800b022 <_printf_i+0x22e>
 800affa:	68e0      	ldr	r0, [r4, #12]
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	4298      	cmp	r0, r3
 800b000:	bfb8      	it	lt
 800b002:	4618      	movlt	r0, r3
 800b004:	e7a6      	b.n	800af54 <_printf_i+0x160>
 800b006:	2301      	movs	r3, #1
 800b008:	4632      	mov	r2, r6
 800b00a:	4649      	mov	r1, r9
 800b00c:	4640      	mov	r0, r8
 800b00e:	47d0      	blx	sl
 800b010:	3001      	adds	r0, #1
 800b012:	d09d      	beq.n	800af50 <_printf_i+0x15c>
 800b014:	3501      	adds	r5, #1
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	9903      	ldr	r1, [sp, #12]
 800b01a:	1a5b      	subs	r3, r3, r1
 800b01c:	42ab      	cmp	r3, r5
 800b01e:	dcf2      	bgt.n	800b006 <_printf_i+0x212>
 800b020:	e7eb      	b.n	800affa <_printf_i+0x206>
 800b022:	2500      	movs	r5, #0
 800b024:	f104 0619 	add.w	r6, r4, #25
 800b028:	e7f5      	b.n	800b016 <_printf_i+0x222>
 800b02a:	bf00      	nop
 800b02c:	0800b81d 	.word	0x0800b81d
 800b030:	0800b82e 	.word	0x0800b82e

0800b034 <__swhatbuf_r>:
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	460c      	mov	r4, r1
 800b038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03c:	2900      	cmp	r1, #0
 800b03e:	b096      	sub	sp, #88	@ 0x58
 800b040:	4615      	mov	r5, r2
 800b042:	461e      	mov	r6, r3
 800b044:	da0d      	bge.n	800b062 <__swhatbuf_r+0x2e>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b04c:	f04f 0100 	mov.w	r1, #0
 800b050:	bf14      	ite	ne
 800b052:	2340      	movne	r3, #64	@ 0x40
 800b054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b058:	2000      	movs	r0, #0
 800b05a:	6031      	str	r1, [r6, #0]
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	b016      	add	sp, #88	@ 0x58
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	466a      	mov	r2, sp
 800b064:	f000 f87c 	bl	800b160 <_fstat_r>
 800b068:	2800      	cmp	r0, #0
 800b06a:	dbec      	blt.n	800b046 <__swhatbuf_r+0x12>
 800b06c:	9901      	ldr	r1, [sp, #4]
 800b06e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b076:	4259      	negs	r1, r3
 800b078:	4159      	adcs	r1, r3
 800b07a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b07e:	e7eb      	b.n	800b058 <__swhatbuf_r+0x24>

0800b080 <__smakebuf_r>:
 800b080:	898b      	ldrh	r3, [r1, #12]
 800b082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b084:	079d      	lsls	r5, r3, #30
 800b086:	4606      	mov	r6, r0
 800b088:	460c      	mov	r4, r1
 800b08a:	d507      	bpl.n	800b09c <__smakebuf_r+0x1c>
 800b08c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	2301      	movs	r3, #1
 800b096:	6163      	str	r3, [r4, #20]
 800b098:	b003      	add	sp, #12
 800b09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b09c:	ab01      	add	r3, sp, #4
 800b09e:	466a      	mov	r2, sp
 800b0a0:	f7ff ffc8 	bl	800b034 <__swhatbuf_r>
 800b0a4:	9f00      	ldr	r7, [sp, #0]
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	4639      	mov	r1, r7
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7ff fc66 	bl	800a97c <_malloc_r>
 800b0b0:	b948      	cbnz	r0, 800b0c6 <__smakebuf_r+0x46>
 800b0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b6:	059a      	lsls	r2, r3, #22
 800b0b8:	d4ee      	bmi.n	800b098 <__smakebuf_r+0x18>
 800b0ba:	f023 0303 	bic.w	r3, r3, #3
 800b0be:	f043 0302 	orr.w	r3, r3, #2
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	e7e2      	b.n	800b08c <__smakebuf_r+0xc>
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	6020      	str	r0, [r4, #0]
 800b0ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0d6:	b15b      	cbz	r3, 800b0f0 <__smakebuf_r+0x70>
 800b0d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f000 f851 	bl	800b184 <_isatty_r>
 800b0e2:	b128      	cbz	r0, 800b0f0 <__smakebuf_r+0x70>
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f023 0303 	bic.w	r3, r3, #3
 800b0ea:	f043 0301 	orr.w	r3, r3, #1
 800b0ee:	81a3      	strh	r3, [r4, #12]
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	431d      	orrs	r5, r3
 800b0f4:	81a5      	strh	r5, [r4, #12]
 800b0f6:	e7cf      	b.n	800b098 <__smakebuf_r+0x18>

0800b0f8 <_putc_r>:
 800b0f8:	b570      	push	{r4, r5, r6, lr}
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	4614      	mov	r4, r2
 800b0fe:	4606      	mov	r6, r0
 800b100:	b118      	cbz	r0, 800b10a <_putc_r+0x12>
 800b102:	6a03      	ldr	r3, [r0, #32]
 800b104:	b90b      	cbnz	r3, 800b10a <_putc_r+0x12>
 800b106:	f7ff f9cb 	bl	800a4a0 <__sinit>
 800b10a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b10c:	07d8      	lsls	r0, r3, #31
 800b10e:	d405      	bmi.n	800b11c <_putc_r+0x24>
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	0599      	lsls	r1, r3, #22
 800b114:	d402      	bmi.n	800b11c <_putc_r+0x24>
 800b116:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b118:	f7ff fbc1 	bl	800a89e <__retarget_lock_acquire_recursive>
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	3b01      	subs	r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	60a3      	str	r3, [r4, #8]
 800b124:	da05      	bge.n	800b132 <_putc_r+0x3a>
 800b126:	69a2      	ldr	r2, [r4, #24]
 800b128:	4293      	cmp	r3, r2
 800b12a:	db12      	blt.n	800b152 <_putc_r+0x5a>
 800b12c:	b2eb      	uxtb	r3, r5
 800b12e:	2b0a      	cmp	r3, #10
 800b130:	d00f      	beq.n	800b152 <_putc_r+0x5a>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	6022      	str	r2, [r4, #0]
 800b138:	701d      	strb	r5, [r3, #0]
 800b13a:	b2ed      	uxtb	r5, r5
 800b13c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b13e:	07da      	lsls	r2, r3, #31
 800b140:	d405      	bmi.n	800b14e <_putc_r+0x56>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	059b      	lsls	r3, r3, #22
 800b146:	d402      	bmi.n	800b14e <_putc_r+0x56>
 800b148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b14a:	f7ff fba9 	bl	800a8a0 <__retarget_lock_release_recursive>
 800b14e:	4628      	mov	r0, r5
 800b150:	bd70      	pop	{r4, r5, r6, pc}
 800b152:	4629      	mov	r1, r5
 800b154:	4622      	mov	r2, r4
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff fa93 	bl	800a682 <__swbuf_r>
 800b15c:	4605      	mov	r5, r0
 800b15e:	e7ed      	b.n	800b13c <_putc_r+0x44>

0800b160 <_fstat_r>:
 800b160:	b538      	push	{r3, r4, r5, lr}
 800b162:	4d07      	ldr	r5, [pc, #28]	@ (800b180 <_fstat_r+0x20>)
 800b164:	2300      	movs	r3, #0
 800b166:	4604      	mov	r4, r0
 800b168:	4608      	mov	r0, r1
 800b16a:	4611      	mov	r1, r2
 800b16c:	602b      	str	r3, [r5, #0]
 800b16e:	f7f6 f980 	bl	8001472 <_fstat>
 800b172:	1c43      	adds	r3, r0, #1
 800b174:	d102      	bne.n	800b17c <_fstat_r+0x1c>
 800b176:	682b      	ldr	r3, [r5, #0]
 800b178:	b103      	cbz	r3, 800b17c <_fstat_r+0x1c>
 800b17a:	6023      	str	r3, [r4, #0]
 800b17c:	bd38      	pop	{r3, r4, r5, pc}
 800b17e:	bf00      	nop
 800b180:	2000086c 	.word	0x2000086c

0800b184 <_isatty_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d06      	ldr	r5, [pc, #24]	@ (800b1a0 <_isatty_r+0x1c>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	f7f6 f97f 	bl	8001492 <_isatty>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_isatty_r+0x1a>
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_isatty_r+0x1a>
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	2000086c 	.word	0x2000086c

0800b1a4 <_sbrk_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d06      	ldr	r5, [pc, #24]	@ (800b1c0 <_sbrk_r+0x1c>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	f7f6 f988 	bl	80014c4 <_sbrk>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_sbrk_r+0x1a>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_sbrk_r+0x1a>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	2000086c 	.word	0x2000086c

0800b1c4 <_init>:
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	bf00      	nop
 800b1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ca:	bc08      	pop	{r3}
 800b1cc:	469e      	mov	lr, r3
 800b1ce:	4770      	bx	lr

0800b1d0 <_fini>:
 800b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d2:	bf00      	nop
 800b1d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1d6:	bc08      	pop	{r3}
 800b1d8:	469e      	mov	lr, r3
 800b1da:	4770      	bx	lr
